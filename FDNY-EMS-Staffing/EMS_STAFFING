<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EMS Staffing Report System - Redesign (Fully Functional)</title>
    <style>
        /* GREYSCALE FILTER REMOVED: Full color is now visible. */
        
        :root { /* FDNY Official Branding Colors */
            --primary-color: #C8102E; /* FDNY Red (Official) */
            --secondary-color: #003478; /* FDNY Navy Blue */
            --fdny-gold: #FFB81C; /* FDNY Gold accent */
            --light-gray: #f5f5f5;
            --medium-gray: #e0e0e0;
            --dark-gray: #424242;
            --border-color: #d4d4d4;
            --danger-color: #C8102E; /* FDNY Red */
            --danger-hover: #9e0b24;
            --warning-color: #FFB81C; /* FDNY Gold */
            --warning-bg-color: #fff8e1;
            --warning-text: #8d6e1f;
            --success-color: #2e7d32;
            --success-hover: #1b5e20;
            --info-color: #003478; /* FDNY Navy */
            --hover-bg-color: #e8f4f8;
            --drag-over-bg: #ffebee;
            --text-color: #1a1a1a;
            --heading-color: #003478; /* FDNY Navy */
            --panel-bg: #ffffff;
            --body-bg: #f5f7fa;
            --box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12);
            --added-bg-color: #e8f5e9;
            --added-border-color: var(--success-color);
            --added-text-color: var(--success-hover);

            /* Dark Mode Variables (Defaults to Light) - Simplified */
            --dm-primary-color: var(--primary-color);
            --dm-secondary-color: var(--secondary-color);
            --dm-light-gray: var(--light-gray);
            --dm-medium-gray: var(--medium-gray);
            --dm-dark-gray: var(--dark-gray);
            --dm-border-color: var(--border-color);
            --dm-text-color: var(--text-color);
            --dm-heading-color: var(--heading-color);
            --dm-panel-bg: var(--panel-bg);
            --dm-body-bg: var(--body-bg);
            --dm-box-shadow: var(--box-shadow);
            --dm-input-bg: #fff;
            --dm-select-bg: #fff;
            --dm-btn-color: #fff; /* Default button text color */
            --dm-warning-bg-color: var(--warning-bg-color);
            --dm-warning-color: var(--warning-color);
            --dm-warning-text: var(--warning-text);
            --dm-added-bg-color: var(--added-bg-color);
            --dm-added-border-color: var(--added-border-color);
            --dm-added-text-color: var(--added-text-color);
            --dm-danger-color: var(--danger-color);
            --dm-success-color: var(--success-color);
            --dm-info-color: var(--info-color);
            --dm-drag-over-bg: var(--drag-over-bg);
        }

        body.dark-mode { /* FDNY Dark Mode Theme - Subdued */
            --dm-primary-color: #D63447; /* Subdued FDNY Red */
            --dm-secondary-color: #5B8DB8; /* Softer blue */
            --dm-light-gray: #2c2c2c;
            --dm-medium-gray: #3c3c3c;
            --dm-dark-gray: #a0a0a0;
            --dm-border-color: #4c4c4c;
            --dm-text-color: #d0d0d0;
            --dm-heading-color: #f0f0f0;
            --dm-panel-bg: #252525;
            --dm-body-bg: #1a1a1a;
            --dm-box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
            --dm-input-bg: #2c2c2c;
            --dm-select-bg: #2c2c2c;
            --dm-btn-color: #d0d0d0;
            --dm-warning-bg-color: #3a3320;
            --dm-warning-color: #E6C845; /* Softer FDNY Gold */
            --dm-warning-text: #E6C845;
            --dm-added-bg-color: #1e3a28;
            --dm-added-border-color: #4caf50;
            --dm-added-text-color: #5db85f;
            --dm-danger-color: #D63447; /* Subdued FDNY Red */
            --dm-success-color: #4caf50;
            --dm-info-color: #6A9FCF;
            --dm-drag-over-bg: #3a2f2f;
        }
        
        /* Theme: Original (Blue & Teal) */
        body[data-theme="original"] {
            --primary-color: #2196F3; /* Material Blue */
            --secondary-color: #00897B; /* Teal */
            --fdny-gold: #FFC107; /* Amber accent */
            --danger-color: #E53935;
            --warning-color: #FFA726;
            --success-color: #43A047;
            --info-color: #29B6F6;
            --heading-color: #1976D2;
            
            /* Update light mode dm- variables */
            --dm-primary-color: #2196F3;
            --dm-secondary-color: #00897B;
            --dm-danger-color: #E53935;
            --dm-warning-color: #FFA726;
            --dm-success-color: #43A047;
            --dm-info-color: #29B6F6;
            --dm-heading-color: #1976D2;
        }
        
        body[data-theme="original"].dark-mode {
            --dm-primary-color: #64B5F6;
            --dm-secondary-color: #4DB6AC;
            --dm-danger-color: #EF5350;
            --dm-warning-color: #FFB74D;
            --dm-success-color: #66BB6A;
            --dm-info-color: #4FC3F7;
        }
        
        /* Theme: Grayscale */
        body[data-theme="grayscale"] {
            --primary-color: #2d2d2d;
            --secondary-color: #505050;
            --fdny-gold: #6b6b6b;
            --danger-color: #1a1a1a;
            --warning-color: #3d3d3d;
            --success-color: #555555;
            --info-color: #424242;
            --heading-color: #2d2d2d;
            
            /* Update light mode dm- variables */
            --dm-primary-color: #2d2d2d;
            --dm-secondary-color: #505050;
            --dm-danger-color: #1a1a1a;
            --dm-warning-color: #3d3d3d;
            --dm-success-color: #555555;
            --dm-info-color: #424242;
            --dm-heading-color: #2d2d2d;
        }
        
        body[data-theme="grayscale"].dark-mode {
            --dm-primary-color: #b0b0b0;
            --dm-secondary-color: #909090;
            --dm-danger-color: #c0c0c0;
            --dm-warning-color: #a8a8a8;
            --dm-success-color: #959595;
            --dm-info-color: #8a8a8a;
        }
        
        /* Theme: Bluish (Light Blue Accent) */
        body[data-theme="bluish"] {
            --primary-color: #4A90E2; /* Soft Blue */
            --secondary-color: #7B68EE; /* Medium Slate Blue */
            --fdny-gold: #50C878; /* Emerald accent */
            --danger-color: #E74C3C;
            --warning-color: #F39C12;
            --success-color: #27AE60;
            --info-color: #3498DB;
            --heading-color: #2C3E50;
            
            /* Update light mode dm- variables */
            --dm-primary-color: #4A90E2;
            --dm-secondary-color: #7B68EE;
            --dm-danger-color: #E74C3C;
            --dm-warning-color: #F39C12;
            --dm-success-color: #27AE60;
            --dm-info-color: #3498DB;
            --dm-heading-color: #2C3E50;
        }
        
        body[data-theme="bluish"].dark-mode {
            --dm-primary-color: #6BA3E8;
            --dm-secondary-color: #9B88F5;
            --dm-danger-color: #EC7063;
            --dm-warning-color: #F5B041;
            --dm-success-color: #52BE80;
            --dm-info-color: #5DADE2;
        }
        
        /* Theme: Forest Green */
        body[data-theme="forest"] {
            --primary-color: #2E7D32; /* Forest Green */
            --secondary-color: #558B2F; /* Olive Green */
            --fdny-gold: #9E9D24; /* Lime accent */
            --danger-color: #C62828;
            --warning-color: #F57F17;
            --success-color: #388E3C;
            --info-color: #00695C;
            --heading-color: #1B5E20;
            
            /* Update light mode dm- variables */
            --dm-primary-color: #2E7D32;
            --dm-secondary-color: #558B2F;
            --dm-danger-color: #C62828;
            --dm-warning-color: #F57F17;
            --dm-success-color: #388E3C;
            --dm-info-color: #00695C;
            --dm-heading-color: #1B5E20;
        }
        
        body[data-theme="forest"].dark-mode {
            --dm-primary-color: #66BB6A;
            --dm-secondary-color: #9CCC65;
            --dm-danger-color: #EF5350;
            --dm-warning-color: #FFCA28;
            --dm-success-color: #81C784;
            --dm-info-color: #4DB6AC;
        }
        
        /* Theme: Sunset Orange */
        body[data-theme="sunset"] {
            --primary-color: #E65100; /* Deep Orange */
            --secondary-color: #F57C00; /* Orange */
            --fdny-gold: #FFB300; /* Amber */
            --danger-color: #D84315;
            --warning-color: #FF6F00;
            --success-color: #689F38;
            --info-color: #0277BD;
            --heading-color: #BF360C;
            
            /* Update light mode dm- variables */
            --dm-primary-color: #E65100;
            --dm-secondary-color: #F57C00;
            --dm-danger-color: #D84315;
            --dm-warning-color: #FF6F00;
            --dm-success-color: #689F38;
            --dm-info-color: #0277BD;
            --dm-heading-color: #BF360C;
        }
        
        body[data-theme="sunset"].dark-mode {
            --dm-primary-color: #FF7043;
            --dm-secondary-color: #FFB74D;
            --dm-danger-color: #FF5252;
            --dm-warning-color: #FFD54F;
            --dm-success-color: #AED581;
            --dm-info-color: #4FC3F7;
        }
        
        /* Theme: Ocean Blue */
        body[data-theme="ocean"] {
            --primary-color: #006064; /* Cyan Darken-4 */
            --secondary-color: #0097A7; /* Cyan Darken-2 */
            --fdny-gold: #00ACC1; /* Cyan accent */
            --danger-color: #C62828;
            --warning-color: #F9A825;
            --success-color: #2E7D32;
            --info-color: #01579B;
            --heading-color: #004D40;
            
            /* Update light mode dm- variables */
            --dm-primary-color: #006064;
            --dm-secondary-color: #0097A7;
            --dm-danger-color: #C62828;
            --dm-warning-color: #F9A825;
            --dm-success-color: #2E7D32;
            --dm-info-color: #01579B;
            --dm-heading-color: #004D40;
        }
        
        body[data-theme="ocean"].dark-mode {
            --dm-primary-color: #4DD0E1;
            --dm-secondary-color: #80DEEA;
            --dm-danger-color: #EF5350;
            --dm-warning-color: #FFEB3B;
            --dm-success-color: #66BB6A;
            --dm-info-color: #64B5F6;
        }
        
        /* Theme: Purple Haze */
        body[data-theme="purple"] {
            --primary-color: #6A1B9A; /* Purple Darken-3 */
            --secondary-color: #8E24AA; /* Purple Darken-2 */
            --fdny-gold: #AB47BC; /* Purple accent */
            --danger-color: #C62828;
            --warning-color: #F57F17;
            --success-color: #388E3C;
            --info-color: #1565C0;
            --heading-color: #4A148C;
            
            /* Update light mode dm- variables */
            --dm-primary-color: #6A1B9A;
            --dm-secondary-color: #8E24AA;
            --dm-danger-color: #C62828;
            --dm-warning-color: #F57F17;
            --dm-success-color: #388E3C;
            --dm-info-color: #1565C0;
            --dm-heading-color: #4A148C;
        }
        
        body[data-theme="purple"].dark-mode {
            --dm-primary-color: #BA68C8;
            --dm-secondary-color: #CE93D8;
            --dm-danger-color: #EF5350;
            --dm-warning-color: #FFCA28;
            --dm-success-color: #81C784;
            --dm-info-color: #64B5F6;
        }
        
        /* Theme: Mint Fresh */
        body[data-theme="mint"] {
            --primary-color: #00796B; /* Teal Darken-2 */
            --secondary-color: #26A69A; /* Teal Lighten-1 */
            --fdny-gold: #4DB6AC; /* Teal accent */
            --danger-color: #D32F2F;
            --warning-color: #FFA000;
            --success-color: #388E3C;
            --info-color: #0288D1;
            --heading-color: #00695C;
            
            /* Update light mode dm- variables */
            --dm-primary-color: #00796B;
            --dm-secondary-color: #26A69A;
            --dm-danger-color: #D32F2F;
            --dm-warning-color: #FFA000;
            --dm-success-color: #388E3C;
            --dm-info-color: #0288D1;
            --dm-heading-color: #00695C;
        }
        
        body[data-theme="mint"].dark-mode {
            --dm-primary-color: #4DB6AC;
            --dm-secondary-color: #80CBC4;
            --dm-danger-color: #EF5350;
            --dm-warning-color: #FFB74D;
            --dm-success-color: #66BB6A;
            --dm-info-color: #4FC3F7;
        }
        
        body {
            font-family: "Helvetica Neue", Helvetica, Arial, "Roboto", sans-serif; /* Professional, highly legible FDNY-style */
            background-color: var(--dm-body-bg);
            color: var(--dm-text-color);
            padding: 0;
            margin: 0;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        /* --- New Top Bar/Header --- */
        #top-header {
            background-color: var(--dm-panel-bg);
            color: var(--dm-heading-color);
            padding: 10px 25px;
            box-shadow: var(--dm-box-shadow);
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 3px solid var(--dm-primary-color); /* FDNY Red accent border */
            position: sticky;
            top: 0;
            z-index: 100;
        }

        #app-title {
            font-size: 1.5em;
            font-weight: 700;
            color: var(--dm-primary-color);
            margin-right: 20px;
            letter-spacing: -0.5px;
            text-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        
        #header-controls {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .date-controls-container {
            display: flex;
            align-items: center;
            gap: 5px;
            background: var(--dm-medium-gray);
            padding: 5px 10px;
            border-radius: 4px;
        }

        .date-nav-btn {
            background: none;
            border: 2px solid var(--dm-border-color);
            color: var(--dm-primary-color);
            cursor: pointer;
            font-size: 1.2em;
            padding: 2px 8px;
            border-radius: 4px;
            line-height: 1;
            transition: background-color 0.2s ease, color 0.2s ease;
        }
        
        .date-nav-btn:hover {
            background-color: var(--dm-primary-color);
            color: var(--dm-panel-bg);
        }

        #current-schedule-date-display {
            font-size: 1em;
            font-weight: 500;
            color: var(--dm-text-color);
            min-width: 110px;
            text-align: center;
        }
        
        #clock {
            font-size: 1em;
            font-weight: 500;
            color: var(--dm-secondary-color);
        }
        
        .action-btn {
            padding: 8px 15px;
            border-radius: 4px;
            border: 2px solid var(--dm-border-color);
            cursor: pointer;
            font-size: 0.95em;
            transition: background-color 0.2s ease, box-shadow 0.2s ease, border-color 0.2s ease;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
            color: var(--dm-btn-color);
        }
        
        .action-btn.info-btn {
            background-color: var(--dm-primary-color);
        }
        .action-btn.info-btn:hover {
            background-color: #3b7cd6; /* Darker primary */
        }
        .action-btn:not(.info-btn):not(.clear-all-btn) {
            background-color: var(--dm-secondary-color);
        }
        .action-btn:not(.info-btn):not(.clear-all-btn):hover {
            background-color: var(--dm-dark-gray);
        }
        
        .dark-mode-toggle { /* Use original styles for toggle appearance */
            position: relative;
            top: 0;
            right: 0;
            display: flex;
            align-items: center;
        }
        .dark-mode-toggle .switch {
            position: relative;
            display: inline-block;
            width: 40px; 
            height: 20px;
        }
        .dark-mode-toggle .switch input { opacity: 0; width: 0; height: 0; }
        .dark-mode-toggle .slider {
            position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0;
            background-color: var(--dm-medium-gray); transition: .4s; border-radius: 20px;
        }
        .dark-mode-toggle .slider:before {
            position: absolute; content: ""; height: 14px; width: 14px; left: 3px; bottom: 3px;
            background-color: white; transition: .4s; border-radius: 50%;
        }
        .dark-mode-toggle input:checked + .slider { background-color: var(--dm-primary-color); }
        .dark-mode-toggle input:checked + .slider:before { transform: translateX(20px); }


        /* --- Main Content Area --- */
        #main-app-container {
            display: flex;
            flex-grow: 1;
            padding: 25px;
            gap: 20px;
            min-height: calc(100vh - 65px);
        }
        
        #left-roster-column {
            flex-basis: 70%;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        #right-ops-column {
            flex-basis: 30%;
            flex-shrink: 0;
            min-width: 350px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .panel {
            background-color: var(--dm-panel-bg);
            padding: 20px;
            border-radius: 6px;
            box-shadow: var(--dm-box-shadow);
            border: 2px solid var(--dm-border-color);
            flex-shrink: 0;
            flex-grow: 1;
            overflow: hidden;
        }
        
        h2 {
            margin-top: 0;
            color: var(--dm-heading-color);
            font-size: 1.4em;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--dm-border-color);
            margin-bottom: 15px;
        }
        h3 {
            color: var(--dm-heading-color);
            font-size: 1.1em;
            margin-bottom: 10px;
        }

        /* --- Filters and Search (Left Column) --- */
        #roster-controls {
            background-color: var(--dm-panel-bg);
            padding: 15px;
            border-radius: 6px;
            box-shadow: var(--dm-box-shadow);
            border: 2px solid var(--dm-border-color);
        }

        .filters-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
        }
        
        .filters-grid select, .employee-search-input {
            padding: 8px 10px;
            border-radius: 4px;
            border: 2px solid var(--dm-border-color);
            background-color: var(--dm-select-bg);
            color: var(--dm-text-color);
            font-size: 0.95em;
        }

        #roster-search-container {
            position: relative;
            flex-grow: 1;
            min-width: 250px;
            order: -1;
        }

        #function-filter-container {
            max-height: 100px;
            overflow-y: auto;
            border: 2px solid var(--dm-border-color);
            padding: 10px;
            display: flex;
            flex-wrap: wrap;
            gap: 8px 15px;
            background-color: var(--dm-input-bg);
            border-radius: 4px;
            width: 100%;
            margin-top: 10px;
            order: 5;
        }
        
        #function-filter-container label {
             display: flex;
             align-items: center;
             gap: 5px;
             cursor: pointer;
             white-space: nowrap;
             font-size: 0.9em;
        }
        
        #tour-filter-container {
            max-height: 60px;
            overflow-y: auto;
            border: 2px solid var(--dm-border-color);
            padding: 10px;
            display: flex;
            flex-wrap: wrap;
            gap: 8px 15px;
            background-color: var(--dm-input-bg);
            border-radius: 4px;
            width: 100%;
            margin-top: 10px;
            order: 4;
        }
        
        #tour-filter-container label {
             display: flex;
             align-items: center;
             gap: 5px;
             cursor: pointer;
             white-space: nowrap;
             font-size: 0.9em;
        }

        /* --- Employee List (Left Column) --- */
        #employee-list-panel {
            flex-grow: 1;
            overflow-y: auto;
            padding-top: 0;
            min-height: 500px;
        }

        .employee-list {
            list-style: none;
            padding: 0;
            margin: 0;
            min-height: 100px;
            overflow-y: auto;
        }
        
        .employee-item {
            background-color: var(--dm-panel-bg);
            padding: 10px 15px;
            margin-bottom: 8px;
            border-radius: 4px;
            cursor: grab;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: 2px solid var(--dm-border-color);
            transition: background-color 0.2s ease, box-shadow 0.2s ease, border-color 0.2s ease;
            box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        }

        .employee-item:hover {
             background-color: var(--dm-medium-gray);
        }
        
        .employee-item.absent, .employee-item.added-schedule {
            cursor: default;
        }
        
        .employee-item .employee-name {
            color: var(--dm-primary-color);
            font-weight: 500;
        }
        
        .employee-item .employee-details {
            font-size: 0.8em;
            margin-left: 8px;
            color: var(--dm-secondary-color);
        }

        .employee-buttons {
             display: flex;
             gap: 8px;
             align-items: center;
        }
        
        /* --- Right Column Tabs --- */
        #ops-tabs {
            background-color: var(--dm-panel-bg);
            border-radius: 6px;
            box-shadow: var(--dm-box-shadow);
            border: 2px solid var(--dm-border-color);
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            min-height: 500px;
        }

        #ops-tab-nav {
            display: flex;
            border-bottom: 2px solid var(--dm-border-color);
        }

        .ops-tab-btn {
            background: none;
            border: none;
            padding: 12px 18px;
            cursor: pointer;
            font-weight: 500;
            color: var(--dm-secondary-color);
            flex-grow: 1;
            text-align: center;
            transition: color 0.2s ease, background-color 0.2s ease;
            border-right: 2px solid var(--dm-border-color);
        }

        .ops-tab-btn:last-child {
            border-right: none;
        }

        .ops-tab-btn.active {
            background-color: var(--dm-medium-gray);
            color: var(--dm-primary-color);
            border-bottom: 2px solid var(--dm-primary-color);
        }
        
        #ops-tab-content {
            padding: 20px;
            overflow-y: auto;
            flex-grow: 1;
        }
        
        .tab-pane.hidden {
            display: none;
        }
        
        .exceptions-list {
            list-style: none;
            padding: 10px;
            margin: 0 0 15px 0;
            min-height: 100px;
            border: 2px solid var(--dm-border-color);
            border-radius: 4px;
            background-color: var(--dm-light-gray);
            transition: background-color 0.2s ease;
        }
        
        .exceptions-search-container {
            position: relative;
            margin-bottom: 15px;
        }

        /* --- Summary Panel Styles (Inside Tab) --- */
        .summary-section h4 {
            font-size: 1.1em;
            color: var(--dm-heading-color);
            padding-bottom: 5px;
            border-bottom: 2px dashed var(--dm-border-color);
            margin-top: 15px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .summary-item strong {
            display: inline-block;
            min-width: 110px;
            color: var(--dm-secondary-color);
            font-weight: 500;
        }
        
        .reorder-controls button {
             background: none; border: none; padding: 0 3px; cursor: pointer;
             font-size: 1.0em; line-height: 1; color: var(--dm-dark-gray);
        }

        /* --- Settings Modal --- */
        .modal {
            display: none;
            position: fixed;
            z-index: 2000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.6); /* Darker overlay for better focus */
        }
        
        /* Help Button */
        .help-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            height: 32px;
            background: #e74c3c;
            color: white;
            border-radius: 50%;
            border: none;
            cursor: pointer;
            font-size: 18px;
            font-weight: bold;
            margin-left: 10px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            vertical-align: middle;
        }
        
        .help-button:hover {
            background: #c0392b;
            transform: scale(1.1);
            box-shadow: 0 3px 6px rgba(0,0,0,0.3);
        }
        
        .help-button:active {
            transform: scale(0.95);
        }

        .modal-content {
            background-color: var(--dm-panel-bg);
            margin: 5% auto;
            padding: 25px;
            border: 3px solid var(--dm-border-color);
            width: 80%;
            max-width: 1000px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.5);
        }
        
        .close-btn {
            color: var(--dm-secondary-color);
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close-btn:hover, .close-btn:focus {
            color: var(--dm-text-color);
            text-decoration: none;
            cursor: pointer;
        }
        
        .modal-tab-nav {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 2px solid var(--dm-border-color);
        }

        .modal-tab-btn {
            padding: 10px 15px;
            cursor: pointer;
            border: none;
            background: none;
            color: var(--dm-secondary-color);
            font-weight: 500;
        }

        .modal-tab-btn.active {
            color: var(--dm-primary-color);
            border-bottom: 2px solid var(--dm-primary-color);
            font-weight: 600;
        }
        
        .modal-tab-pane {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        /* CSV Section styles for clarity */
        .csv-upload-section {
            padding: 15px;
            border: 2px solid var(--dm-border-color);
            border-radius: 6px;
            background-color: var(--dm-light-gray);
        }
        
        .csv-upload-section input[type="file"] {
             border: 2px solid var(--dm-border-color);
             padding: 5px;
             border-radius: 4px;
             background-color: var(--dm-input-bg);
             color: var(--dm-text-color);
        }

        /* Input styles for modal */
        .add-member-form input, .manage-reasons-form input {
            padding: 8px 10px;
            border: 2px solid var(--dm-border-color);
            border-radius: 4px;
            background-color: var(--dm-input-bg);
            color: var(--dm-text-color);
            font-size: 0.95em;
        }
        
        .manage-reasons-form input {
             flex-grow: 1;
        }
        .manage-reasons-form > div {
             display: flex;
             gap: 10px;
             align-items: center;
        }

        /* Week Switch Modal Styles */
        .week-day-button {
            padding: 20px 10px;
            border: 2px solid var(--dm-border-color);
            border-radius: 8px;
            background: var(--dm-panel-bg);
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            position: relative;
        }
        
        .week-day-button:hover:not(.disabled):not(.original) {
            background: var(--dm-primary-color);
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }
        
        .week-day-button.working {
            background: #e8f4f8;
            border-color: #3498db;
        }
        
        .week-day-button.off {
            background: #f8f9fa;
            border-color: #95a5a6;
        }
        
        .week-day-button.original {
            background: linear-gradient(135deg, #f39c12, #e67e22);
            color: white;
            border-color: #d68910;
            cursor: not-allowed;
        }
        
        .week-day-button.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .week-day-name {
            font-weight: bold;
            font-size: 1.1em;
            margin-bottom: 5px;
        }
        
        .week-day-date {
            font-size: 0.9em;
            color: var(--dm-secondary-color);
            margin-bottom: 8px;
        }
        
        .week-day-status {
            font-size: 0.85em;
            padding: 4px 8px;
            border-radius: 4px;
            background: rgba(0,0,0,0.1);
            display: inline-block;
        }

        /* Additional styles for new modal content */
        .reason-list {
            list-style: none;
            padding: 0;
            margin: 10px 0;
            max-height: 200px;
            overflow-y: auto;
            border: 2px solid var(--dm-border-color);
            border-radius: 4px;
            background-color: var(--dm-light-gray);
        }

        .reason-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 12px;
            border-bottom: 2px solid var(--dm-border-color);
        }

        .reason-item:last-child {
            border-bottom: none;
        }

        .remove-reason-btn {
            background: var(--dm-danger-color);
            color: white;
            border: none;
            border-radius: 3px;
            padding: 4px 8px;
            cursor: pointer;
            font-size: 0.8em;
        }

        .remove-reason-btn:hover {
            background: var(--danger-hover);
        }

        /* Search dropdown styles */
        .search-dropdown {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: var(--dm-panel-bg);
            border: 2px solid var(--dm-border-color);
            border-top: none;
            border-radius: 0 0 4px 4px;
            box-shadow: var(--dm-box-shadow);
            z-index: 1000;
            max-height: 200px;
            overflow-y: auto;
        }

        .search-dropdown.hidden {
            display: none;
        }

        .search-result-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 2px solid var(--dm-border-color);
            cursor: pointer;
        }

        .search-result-item:last-child {
            border-bottom: none;
        }

        .search-result-item:hover {
            background-color: var(--dm-hover-bg-color);
        }

        .search-result-name {
            font-weight: 500;
            color: var(--dm-primary-color);
        }

        .search-result-details {
            font-size: 0.85em;
            color: var(--dm-secondary-color);
        }

        .search-result-add-btn {
            padding: 4px 8px;
            font-size: 0.8em;
        }

        /* Calendar styles */
        .calendar-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }

        .calendar-table th,
        .calendar-table td {
            border: 2px solid var(--dm-border-color);
            padding: 8px;
            text-align: center;
            vertical-align: top;
            min-height: 60px;
        }

        .calendar-table th {
            background-color: var(--dm-medium-gray);
            font-weight: 600;
        }

        .calendar-day {
            height: 60px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .calendar-day-number {
            font-weight: 500;
            align-self: flex-start;
        }

        .calendar-platoons {
            font-size: 0.8em;
            color: var(--dm-primary-color);
            font-weight: 600;
            align-self: flex-end;
        }

        .calendar-table .other-month {
            background-color: var(--dm-light-gray);
            opacity: 0.6;
        }

        .calendar-table .weekend {
            background-color: rgba(255, 193, 7, 0.1);
        }

        @media (max-width: 768px) {
            .day-full { display: none; }
            .day-short { display: inline; }
        }

        @media (min-width: 769px) {
            .day-full { display: inline; }
            .day-short { display: none; }
        }
        
        /* Apply existing styles needed for visual integrity */
        .employee-list.drag-over { background-color: var(--dm-drag-over-bg); border-color: var(--dm-info-color); border-style: dashed; }
        .employee-item.absent { background-color: var(--dm-warning-bg-color); border-color: var(--dm-warning-color); color: var(--dm-warning-text); }
        .employee-item.added-schedule { background-color: var(--dm-added-bg-color); border-color: var(--dm-added-border-color); color: var(--dm-added-text-color); }
        .function-separator { background-color: var(--dm-medium-gray); color: var(--dm-secondary-color); font-weight: 600; padding: 8px 15px; margin: 5px 0 2px 0; border-radius: 4px; border-bottom: 2px solid var(--dm-border-color); cursor: default; }
        .reason-select, .shield-input, .tour-select { padding: 5px 8px; font-size: 0.9em; border: 2px solid var(--dm-border-color); border-radius: 4px; background-color: var(--dm-select-bg); color: var(--dm-text-color); max-width: 100px; margin-right: 5px; }
        .remove-btn { background-color: var(--dm-danger-color); color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; font-size: 0.85em; }
        .clear-all-btn { background-color: var(--dm-danger-color); color: white; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer; font-size: 0.9em; }
        .clear-all-btn:hover { background-color: var(--danger-hover); }
        .info-btn { background-color: var(--dm-primary-color); color: white; }
        
        /* Compact function summary styles */
        .compact-function-summary {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 5px 0;
        }
        
        .count-label {
            font-size: 0.8em;
            color: var(--dm-secondary-color);
            margin-left: 2px;
        }
        
        .count-separator {
            margin: 0 3px;
            color: var(--dm-secondary-color);
        }
        
        .sched-count {
            font-weight: 600;
            color: var(--dm-text-color);
        }
        
        .absent-count {
            font-weight: 600;
            color: var(--dm-danger-color);
        }
        
        .present-count {
            font-weight: 600;
            color: var(--dm-success-color);
        }
        
        .sick-count {
            font-weight: 600;
            color: var(--dm-warning-color);
        }
        
        .sick-percentage {
            font-weight: 500;
            color: var(--dm-warning-color);
        }
        
        /* Summary table styles */
        .summary-table {
            width: 100%;
            border-collapse: collapse;
            margin: 10px 0;
            font-size: 0.9em;
        }
        
        .summary-table th,
        .summary-table td {
            border: 2px solid var(--dm-border-color);
            padding: 8px;
            text-align: center;
        }
        
        .summary-table th {
            background-color: var(--dm-medium-gray);
            font-weight: 600;
        }
        
        .function-tour-summary-table {
            width: 100%;
            border-collapse: collapse;
            margin: 10px 0;
            font-size: 0.85em;
        }
        
        .function-tour-summary-table th,
        .function-tour-summary-table td {
            border: 2px solid var(--dm-border-color);
            padding: 6px;
            text-align: center;
        }
        
        .function-tour-summary-table th {
            background-color: var(--dm-medium-gray);
            font-weight: 600;
        }
        
        .func-header {
            text-align: left !important;
            font-weight: 500;
            color: var(--dm-primary-color);
        }
        
        /* Employee controls styles */
        .employee-controls {
            display: flex;
            gap: 8px;
            align-items: center;
            margin-top: 8px;
            flex-wrap: wrap;
        }
        
        .quick-add-btn {
            padding: 4px 8px;
            font-size: 0.8em;
            border-radius: 3px;
        }
        
        .absence-checkbox {
            margin-right: 8px;
        }
        
        .edit-member-btn,
        .remove-member-btn {
            padding: 4px 8px;
            font-size: 0.8em;
            border: 2px solid var(--dm-border-color);
            border-radius: 3px;
            background: var(--dm-medium-gray);
            color: var(--dm-text-color);
            cursor: pointer;
        }
        
        .edit-member-btn:hover,
        .remove-member-btn:hover {
            background: var(--dm-dark-gray);
        }
        
        /* Member List Item Styles */
        .member-list-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 15px;
            margin-bottom: 8px;
            border: 2px solid var(--dm-border-color);
            border-radius: 6px;
            background-color: var(--dm-light-gray);
            transition: background-color 0.2s ease, box-shadow 0.2s ease;
        }
        
        .member-list-item:hover {
            background-color: var(--dm-medium-gray);
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
        }
        
        .member-list-item-info {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 4px;
        }
        
        .member-list-item-name {
            font-weight: 600;
            font-size: 1.05em;
            color: var(--dm-heading-color);
        }
        
        .member-list-item-details {
            font-size: 0.9em;
            color: var(--dm-secondary-color);
        }
        
        .member-list-item-actions {
            display: flex;
            gap: 8px;
        }
        
        .member-edit-btn {
            background-color: var(--dm-info-color);
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9em;
            transition: opacity 0.2s ease;
        }
        
        .member-edit-btn:hover {
            opacity: 0.85;
        }
        
        .member-delete-btn {
            background-color: var(--dm-danger-color);
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9em;
            transition: opacity 0.2s ease;
        }
        
        .member-delete-btn:hover {
            opacity: 0.85;
        }
        
        .added-tour-info {
            font-size: 0.8em;
            background-color: var(--dm-primary-color);
            color: white;
            padding: 2px 6px;
            border-radius: 3px;
            margin-left: 8px;
            font-weight: 500;
        }
        
        /* Button click animation */
        .button-clicked {
            transform: scale(0.95);
            transition: transform 0.1s ease;
        }
        
        /* New addition animation */
        .new-addition {
            border: 2px solid var(--dm-success-color) !important;
            background-color: var(--dm-added-bg-color) !important;
        }
        
        /* History Item Styles */
        .history-item {
             background-color: var(--dm-panel-bg); padding: 8px 12px; margin-bottom: 8px;
             border-radius: 4px; border: 2px solid var(--dm-border-color);
             display: flex; justify-content: space-between; align-items: center; font-size: 0.9em;
        }
        .history-item-info .details { color: var(--dm-secondary-color); }
        .apply-today-btn { background-color: var(--dm-success-color); color: white; padding: 3px 6px; font-size: 0.8em; }

        /* Smaller screen adaptation */
        @media (max-width: 1200px) {
            #main-app-container {
                flex-direction: column;
            }
            #left-roster-column, #right-ops-column {
                flex-basis: auto;
                min-width: auto;
            }
        }
        
        /* Statistics Panel Styles */
        .stats-card {
            background-color: var(--dm-secondary-bg);
            border: 2px solid var(--dm-border-color);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }
        
        .stats-card h3 {
            margin: 0 0 15px 0;
            color: var(--dm-text-primary);
            font-size: 1.2em;
            border-bottom: 2px solid var(--dm-accent-color);
            padding-bottom: 5px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }
        
        .stat-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 2px solid var(--dm-border-color);
        }
        
        .stat-label {
            font-weight: 500;
            color: var(--dm-text-secondary);
        }
        
        .stat-value {
            font-weight: bold;
            color: var(--dm-text-primary);
        }
        
        .stats-section {
            margin: 20px 0;
        }
        
        .stats-section h3 {
            margin: 0 0 15px 0;
            color: var(--dm-text-primary);
            font-size: 1.3em;
            border-bottom: 2px solid var(--dm-accent-color);
            padding-bottom: 5px;
        }
        
        /* Statistics Page Headers with Blue Backgrounds */
        #summary-pane h2,
        #exceptions-pane h3,
        #exceptions-pane h4,
        #history-pane h3 {
            background-color: var(--dm-info-color);
            color: white;
            padding: 10px 15px;
            border-radius: 4px;
            margin-bottom: 15px;
        }
        
        /* Summary section h4 headers (subsections) */
        .summary-section h4 {
            background-color: var(--dm-info-color);
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            margin: 10px 0;
            font-size: 1.1em;
        }
        
        .stats-table {
            width: 100%;
            border-collapse: collapse;
            background-color: var(--dm-secondary-bg);
            border-radius: 8px;
            overflow: hidden;
            border: 2px solid var(--dm-border-color);
        }
        
        .stats-table th,
        .stats-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 2px solid var(--dm-border-color);
        }
        
        .stats-table th {
            background-color: var(--dm-info-color);
            color: white;
            font-weight: bold;
            text-transform: uppercase;
            font-size: 0.9em;
        }
        
        .stats-table tbody tr:hover {
            background-color: var(--dm-hover-bg);
        }
        
        .stats-table tbody tr:last-child td {
            border-bottom: none;
        }
        
        /* Period Selection Buttons */
        .stats-period-btn {
            background-color: var(--dm-secondary-bg);
            border: 2px solid var(--dm-border-color);
            color: var(--dm-text-secondary);
            padding: 5px 10px;
            margin: 0 2px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9em;
        }
        
        .stats-period-btn:hover {
            background-color: var(--dm-hover-bg);
        }
        
        .stats-period-btn.active {
            background-color: var(--dm-accent-color);
            color: white;
            border-color: var(--dm-accent-color);
        }

        /* Schedule View Styles */
        .schedule-table-wrapper {
            overflow-x: auto;
            overflow-y: visible;
            max-height: calc(100vh - 250px);
            border: 2px solid var(--dm-border-color);
            border-radius: 8px;
            background-color: var(--dm-panel-bg);
        }

        .schedule-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            font-size: 0.9em;
        }

        .schedule-table th,
        .schedule-table td {
            padding: 10px;
            border: 2px solid var(--dm-border-color);
            text-align: left;
        }

        .schedule-table th {
            background-color: var(--dm-primary-color);
            color: white;
            font-weight: 600;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .schedule-table th:first-child,
        .schedule-table td:first-child {
            position: sticky;
            left: 0;
            z-index: 15;
            background-color: var(--dm-panel-bg);
            min-width: 200px;
            max-width: 200px;
            border-right: 2px solid var(--dm-primary-color);
        }

        .schedule-table th:first-child {
            z-index: 20;
            background-color: var(--dm-primary-color);
        }

        .schedule-cell {
            min-height: 80px;
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .schedule-cell textarea {
            width: 100%;
            min-height: 30px;
            padding: 5px;
            border: 2px solid var(--dm-border-color);
            border-radius: 4px;
            background-color: var(--dm-input-bg);
            color: var(--dm-text-color);
            resize: vertical;
            font-family: inherit;
            font-size: 0.85em;
        }

        .schedule-cell select {
            width: 100%;
            padding: 6px;
            border: 2px solid var(--dm-border-color);
            border-radius: 4px;
            background-color: var(--dm-select-bg);
            color: var(--dm-text-color);
            cursor: pointer;
        }

        .schedule-cell-time {
            font-size: 0.8em;
            color: var(--dm-secondary-color);
            font-weight: 500;
        }

        .schedule-work-time {
            font-size: 0.75em;
            color: var(--dm-primary-color);
            font-weight: 600;
            text-align: center;
        }

        .schedule-add-overtime-btn {
            background-color: var(--dm-primary-color);
            color: white;
            border: none;
            border-radius: 3px;
            width: 18px;
            height: 18px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0;
            line-height: 1;
            transition: all 0.2s;
        }

        .schedule-add-overtime-btn:hover {
            background-color: var(--dm-accent-color);
            transform: scale(1.1);
        }

        .schedule-overtime-day {
            background-color: #fff3cd !important;
        }

        .schedule-overtime-badge {
            background-color: var(--dm-accent-color);
            color: white;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.7em;
            font-weight: 600;
            text-align: center;
        }

        /* Highlight cells with changes from original schedule */
        .schedule-cell-changed {
            background-color: #fff3cd !important;
            border: 2px solid #ffc107 !important;
            box-shadow: inset 0 0 0 1px #ff9800;
        }
        
        [data-theme="dark"] .schedule-cell-changed {
            background-color: #5a4a1a !important;
            border: 2px solid #ffb74d !important;
            box-shadow: inset 0 0 0 1px #ffa726;
        }

        .off-day {
            background-color: var(--dm-light-gray);
            opacity: 0.6;
        }

        .schedule-member-info {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .schedule-member-name {
            font-weight: 600;
            color: var(--dm-heading-color);
        }

        .schedule-member-details {
            font-size: 0.8em;
            color: var(--dm-text-color);
            display: flex;
            gap: 10px;
        }

        .schedule-function-section {
            margin-bottom: 30px;
            border: 2px solid var(--dm-border-color);
            border-radius: 8px;
        }

        .schedule-function-title {
            background-color: var(--dm-secondary-color);
            color: white;
            padding: 12px 15px;
            border-radius: 8px 8px 0 0;
            font-size: 1.1em;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 2px solid var(--dm-border-color);
        }

        .schedule-date-header {
            text-align: center;
            font-weight: 600;
        }

        .schedule-day-name {
            display: block;
            font-size: 0.9em;
        }

        .schedule-day-number {
            display: block;
            font-size: 1.1em;
            margin-top: 2px;
        }

        /* Platoon color coding */
        .platoon-badge {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 0.75em;
            font-weight: 600;
        }

        .platoon-a { background-color: #e3f2fd; color: #1976d2; }
        .platoon-b { background-color: #f3e5f5; color: #7b1fa2; }
        .platoon-c { background-color: #e8f5e9; color: #388e3c; }
        .platoon-d { background-color: #fff3e0; color: #f57c00; }
        .platoon-e { background-color: #fce4ec; color: #c2185b; }
        .platoon-f { background-color: #e0f2f1; color: #00796b; }
        
        /* Schedule summary row styling */
        .schedule-summary-row {
            background-color: var(--dm-primary-color) !important;
            color: white;
            font-weight: bold;
            border-top: 2px solid var(--dm-border-color);
        }
        
        .schedule-summary-cell {
            text-align: center;
            font-size: 1.1em;
            padding: 12px 8px !important;
        }
        
        /* Spacing between tour groups */
        .schedule-function-section {
            margin-bottom: 30px;
        }
        
        /* Compact Print Styles for Schedule Export */
        @media print {
            @page {
                size: legal landscape;
                margin: 0.4in 0.5in; /* Tighter margins for more density */
            }
            
            body.schedule-print-mode > *:not(#schedule-print-container) {
                display: none !important;
            }
            
            body.schedule-print-mode #schedule-print-container {
                display: block !important;
                position: static;
                width: 100%;
            }
            
            .schedule-print-table {
                width: 100%;
                border-collapse: collapse;
                font-size: 5.5pt; /* Slightly smaller for density */
                page-break-inside: auto;
                table-layout: auto;
                margin-bottom: 6px;
            }
            
            .schedule-print-table th,
            .schedule-print-table td {
                border: 2px solid #666;
                padding: 1px 2px;
                text-align: center;
                page-break-inside: avoid;
                white-space: nowrap;
            }
            
            .schedule-print-table th {
                background-color: #003478 !important; /* FDNY Navy */
                color: white !important;
                font-weight: bold;
                font-size: 5pt;
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
                padding: 2px 2px;
            }
            
            .schedule-print-table .name-cell {
                text-align: left;
                font-size: 5.5pt;
                white-space: nowrap;
                font-weight: 500;
            }
            
            .schedule-print-table .date-header {
                font-size: 4.5pt;
                padding: 2px 1px;
                line-height: 1.2;
            }
            
            .schedule-print-table .off-cell {
                background-color: #f8f8f8 !important;
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
                font-size: 6pt;
                color: #999;
            }
            
            .schedule-print-table .absence-cell {
                font-size: 5pt;
                background-color: #ffe0e0 !important;
                color: #C8102E !important; /* FDNY Red text */
                font-weight: 600;
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
            }
            
            .schedule-print-table .work-cell {
                font-size: 5pt;
                background-color: #e8f5e9 !important; /* Light green for working */
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
            }
            
            .schedule-print-header {
                text-align: center;
                margin-bottom: 3px;
                font-size: 14pt;
                font-weight: bold;
                color: #C8102E; /* FDNY Red */
                border-bottom: 3px solid #003478; /* FDNY Navy */
                padding-bottom: 5px;
            }
            
            .schedule-print-subheader {
                text-align: center;
                margin-bottom: 6px;
                font-size: 8pt;
                font-weight: 600;
                color: #003478; /* FDNY Navy */
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }
            
            .schedule-print-function-title {
                font-size: 6.5pt;
                font-weight: bold;
                margin-top: 6px;
                margin-bottom: 1px;
                page-break-after: avoid;
                background-color: #f5f5f5;
                padding: 2px 4px;
                border-left: 3px solid #C8102E; /* FDNY Red accent */
            }
            
            .schedule-print-table .summary-row {
                background-color: #FFB81C !important; /* FDNY Gold */
                font-weight: bold;
                border-top: 2px solid #003478 !important; /* FDNY Navy */
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
            }
            
            .schedule-print-table .summary-cell {
                text-align: center;
                font-size: 5.5pt;
                font-weight: bold;
                color: #000 !important;
            }
        }
    </style>
</head>
<body>
    <!-- 1. Top Bar/Header -->
    <div id="top-header">
        <div id="app-title">🚨 FDNY EMS Staffing Report System</div>
        <div id="header-controls">
            <!-- Date Navigation Controls -->
            <div class="date-controls-container">
                <button id="prev-day-btn" class="date-nav-btn" aria-label="Previous Day">‹</button>
                <span id="current-schedule-date-display">Mon, 10/06</span>
                <button id="next-day-btn" class="date-nav-btn" aria-label="Next Day">›</button>
            </div>
            
            <span id="clock">10:00:00</span>
            
            <button id="schedule-view-btn" class="action-btn info-btn" title="View & Manage Schedule">📋 Schedule</button>
            <button id="calendar-view-btn" class="action-btn info-btn" title="View Platoon Calendar">📅 Calendar</button>
            
            <!-- Export Button with Layout Selection -->
            <div style="display: inline-flex; align-items: center; gap: 5px;">
                <button id="export-btn" class="action-btn" style="background-color: var(--dm-secondary-color);" title="Export Current Roster">Export HTML</button>
                <select id="export-layout-selector" style="padding: 8px; border-radius: 4px; border: 2px solid var(--dm-border-color); background: var(--dm-secondary-bg); color: var(--dm-text-primary); cursor: pointer; font-size: 0.9em;" title="Select Export Layout">
                    <option value="original">Original (Grid)</option>
                    <option value="compact">Compact Table</option>
                    <option value="cards">Modern Cards</option>
                    <option value="plaintext">Plain Text (1-2 pages)</option>
                </select>
            </div>
            
            <!-- Settings Modal Trigger -->
            <button id="open-settings-modal" class="action-btn info-btn" title="Settings & Admin">⚙️ Admin</button>

            <!-- Dark Mode Toggle -->
            <div class="dark-mode-toggle">
                <label class="switch">
                    <input type="checkbox" id="dark-mode-switch">
                    <span class="slider"></span>
                </label>
            </div>
        </div>
    </div>

    <!-- 2. Main Application Container -->
    <div id="main-app-container">
        <!-- 2.1 Left Roster Column (Management) -->
        <div id="left-roster-column">
            <!-- Unified Filters Panel -->
            <div id="roster-controls">
                <h2 style="border: none; margin-bottom: 10px;">Employee Roster & Filters <span class="date-display" id="today-date"></span></h2>
                
                <div id="roster-search-container">
                    <input type="text" 
                           id="roster-employee-search" 
                           placeholder="Search Employee or Shield #..." 
                           class="employee-search-input"
                           autocomplete="off"
                           style="width: 100%;">
                    <div id="roster-search-dropdown" class="search-dropdown hidden"></div>
                </div>

                <div class="filters-grid">
                    <label for="working-platoons-display">Working Platoons:</label>
                    <span id="working-platoons" style="font-weight: bold; color: var(--dm-primary-color);"></span>

                    <div class="working-today-filter">
                        <input type="checkbox" id="working-today-checkbox">
                        <label for="working-today-checkbox">Working Filter Date Only</label>
                    </div>

                    <div class="hide-inactive-filter" style="display: flex; align-items: center; gap: 5px;">
                        <input type="checkbox" id="hide-inactive-checkbox" checked>
                        <label for="hide-inactive-checkbox">Hide Inactive Members</label>
                    </div>

                    <button type="button" id="clear-filter-btn" class="action-btn" style="background-color: var(--dm-secondary-color); padding: 5px 10px;">Clear Filters</button>
                    
                    <button type="button" id="clear-function-filters" class="action-btn" style="background-color: var(--dm-secondary-color); padding: 5px 10px;">Clear Functions</button>
                    
                    <button type="button" id="sort-roster-btn" class="action-btn info-btn" style="padding: 5px 10px;" title="Re-sort roster by Time → Platoon → Last Name">🔄 Sort</button>
                </div>

                <label style="width: 100%; margin-top: 10px; font-weight: 500; color: var(--dm-secondary-color);">Filter by Tour:</label>
                <div id="tour-filter-container">
                    <p>Loading tours...</p>
                </div>
                
                <label style="width: 100%; margin-top: 10px; font-weight: 500; color: var(--dm-secondary-color);">Filter by Function:</label>
                <div id="function-filter-container">
                    <p>Loading functions...</p>
                </div>
            </div>

            <!-- Employee List Panel -->
            <div id="employee-list-panel" class="panel">
                <!-- Clear Date Indicator -->
                <div id="rundown-date-indicator" style="background: linear-gradient(135deg, var(--dm-primary-color), var(--dm-secondary-color)); color: white; padding: 12px 16px; margin: -10px -10px 15px -10px; border-radius: 8px 8px 0 0; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                    <div style="font-size: 0.85em; font-weight: 500; opacity: 0.9; text-transform: uppercase; letter-spacing: 0.5px;">Showing Rundown For</div>
                    <div id="rundown-date-text" style="font-size: 1.3em; font-weight: 700; margin-top: 4px;">Today</div>
                </div>
                
                 <ul id="employee-list" class="employee-list drop-zone">
                    <!-- Employees populated here. Draggable items to right panel. -->
                </ul>
            </div>
        </div>

        <!-- 2.2 Right Operations Column (Tabbed: Summary, Exceptions, History) -->
        <div id="right-ops-column">
            <div id="ops-tabs">
                <!-- Tab Navigation -->
                <div id="ops-tab-nav">
                    <button class="ops-tab-btn active" data-tab="summary-pane">Summary</button>
                    <button class="ops-tab-btn" data-tab="exceptions-pane" id="exceptions-tab-btn">Exceptions</button>
                    <button class="ops-tab-btn" data-tab="history-pane">History</button>
                </div>

                <!-- Tab Content -->
                <div id="ops-tab-content">
                    
                    <!-- Summary Tab Content (Original Summary Panel Content) -->
                    <div id="summary-pane" class="tab-pane">
                         <div id="summary-header">
                            <h2>Daily Status <span class="date-display" id="summary-date"></span></h2>
                        </div>
                        <div id="summary-content">
                            <!-- Summary details populated by JS (Tour, Function, Overall, funcTour) -->
                        </div>
                        <div style="margin-top: 20px;">
                            <button id="view-stats-btn" class="action-btn info-btn" style="width: 100%; margin-bottom: 10px;">📊 View Statistics</button>
                        </div>
                    </div>

                    <!-- Exceptions Tab Content (Original Today Panel Content) -->
                    <div id="exceptions-pane" class="tab-pane hidden">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                            <h3 id="exceptions-date-header">Daily Exceptions</h3>
                            <button id="clear-today-btn" class="clear-all-btn">Clear All</button>
                        </div>
                        
                        <h4>Add to Schedule (Added)</h4>
                        <div class="exceptions-search-container">
                            <input type="text" id="today-employee-search" placeholder="Type employee name to add..." class="employee-search-input" autocomplete="off" style="width: 100%;">
                            <div id="today-search-dropdown" class="search-dropdown hidden"></div>
                        </div>
                        <ul id="today-added" class="exceptions-list drop-zone added-schedule-list"></ul>

                        <h4>Absent (Absent)</h4>
                        <div class="exceptions-search-container">
                            <input type="text" id="absent-employee-search" placeholder="Type employee name to mark absent..." class="employee-search-input" autocomplete="off" style="width: 100%;">
                            <div id="absent-search-dropdown" class="search-dropdown hidden"></div>
                        </div>
                        <ul id="today-absent" class="exceptions-list drop-zone absent-list"></ul>
                    </div>
                    
                    <!-- History Tab Content (Original History Panel Content) -->
                    <div id="history-pane" class="tab-pane hidden">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                            <h3>Recent History</h3>
                             <button id="refresh-history-btn" class="clear-all-btn info-btn" title="Refresh history display">🔄</button>
                        </div>
                        <ul id="history-list" class="exceptions-list">
                            <!-- History items populated by JS -->
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Hidden Print Container for Schedule Export -->
    <div id="schedule-print-container" style="display: none;">
        <!-- Print content will be generated here -->
    </div>
    
    <!-- 3. Full-Screen Views -->
    <!-- Placeholder for Calendar View Container (Original logic expects this) -->
    <div id="calendar-view-content" class="full-view-container" style="display: none; flex-direction: column; width: 100%;">
        <div style="background-color: var(--dm-panel-bg); border: 2px solid var(--dm-border-color); border-radius: 8px; padding: 20px; margin: 20px;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 2px solid var(--dm-border-color); padding-bottom: 15px;">
                <h2 style="margin: 0; color: var(--dm-heading-color);">Platoon Calendar View</h2>
                <div style="display: flex; align-items: center; gap: 15px;">
                    <button id="calendar-prev-month-btn" class="date-nav-btn" aria-label="Previous Month">‹</button>
                    <span id="calendar-current-month-display" style="min-width: 150px; text-align: center; font-weight: 500; color: var(--dm-primary-color);"></span>
                    <button id="calendar-next-month-btn" class="date-nav-btn" aria-label="Next Month">›</button>
                </div>
                <button id="calendar-back-btn" class="action-btn" style="background-color: var(--dm-secondary-color); color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">Back to Main View</button>
            </div>
            <div id="calendar-grid-container">
                <!-- Calendar grid will be generated here -->
            </div>
        </div>
    </div>
    
    <!-- Placeholder for Statistics Panel Full View Container (Original logic expects this) -->
    <div id="statistics-panel-full" class="full-view-container" style="display: none; flex-direction: column; width: 100%;">
        <div style="background-color: var(--dm-panel-bg); border: 2px solid var(--dm-border-color); border-radius: 8px; padding: 20px; margin: 20px;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <h2>Leave Usage Statistics <span id="stats-panel-date-range"></span></h2>
                <div> 
                    <button id="stats-back-btn" class="action-btn" style="background-color: var(--dm-secondary-color);">Back to Main View</button>
                </div>
            </div>
            <!-- Full statistics content from original file goes here -->
            <!-- Note: The content of the original #statistics-panel must be placed here. For brevity, I only map the outer container. -->
        </div>
    </div>

    <!-- Schedule View Container -->
    <div id="schedule-view-content" class="full-view-container" style="display: none; flex-direction: column; width: 100%;">
        <div style="background-color: var(--dm-panel-bg); border: 2px solid var(--dm-border-color); border-radius: 8px; padding: 20px; margin: 20px;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 2px solid var(--dm-border-color); padding-bottom: 15px;">
                <h2 style="margin: 0; color: var(--dm-heading-color);">Employee Schedule View</h2>
                <div style="display: flex; align-items: center; gap: 15px;">
                    <button id="schedule-prev-week-btn" class="date-nav-btn" aria-label="Previous Week">‹ Week</button>
                    <button id="schedule-prev-month-btn" class="date-nav-btn" aria-label="Previous Month">‹ Month</button>
                    <span id="schedule-current-range-display" style="min-width: 200px; text-align: center; font-weight: 500; color: var(--dm-primary-color);"></span>
                    <button id="schedule-next-week-btn" class="date-nav-btn" aria-label="Next Week">Week ›</button>
                    <button id="schedule-next-month-btn" class="date-nav-btn" aria-label="Next Month">Month ›</button>
                    <button id="schedule-toggle-view-btn" class="action-btn info-btn">Switch to Month</button>
                    <button id="schedule-export-btn" class="action-btn" style="background-color: var(--dm-accent-color); color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">📄 Export</button>
                </div>
                <button id="schedule-back-btn" class="action-btn" style="background-color: var(--dm-secondary-color); color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">Back to Main View</button>
            </div>
            
            <!-- Function Filter Section -->
            <div style="margin-bottom: 15px; padding: 10px; background-color: var(--dm-surface); border-radius: 4px; border: 2px solid var(--dm-border-color);">
                <div style="display: flex; align-items: center; gap: 10px; flex-wrap: wrap; margin-bottom: 10px;">
                    <label style="font-weight: 500; color: var(--dm-secondary-color);">Filter by Function:</label>
                    <div id="schedule-function-filter-container" style="display: flex; gap: 10px; flex-wrap: wrap; flex: 1;">
                        <!-- Function checkboxes will be generated here -->
                    </div>
                    <button id="schedule-clear-filters-btn" class="action-btn" style="background-color: var(--dm-secondary-color); padding: 5px 10px; font-size: 0.9em;">Clear Filters</button>
                </div>
                <div style="display: flex; align-items: center; gap: 10px; flex-wrap: wrap; margin-top: 10px; border-top: 2px solid var(--dm-border-color); padding-top: 10px;">
                    <label style="font-weight: 500; color: var(--dm-secondary-color);">Filter by Tour:</label>
                    <div id="schedule-tour-filter-container" style="display: flex; gap: 10px; flex-wrap: wrap; flex: 1;">
                        <!-- Tour checkboxes will be generated here -->
                    </div>
                </div>
                <div style="display: flex; align-items: center; gap: 10px; flex-wrap: wrap; margin-top: 10px; border-top: 2px solid var(--dm-border-color); padding-top: 10px;">
                    <label style="font-weight: 500; color: var(--dm-secondary-color);">Group/Sort By:</label>
                    <select id="schedule-group-by" style="padding: 5px 10px; border: 2px solid var(--dm-border-color); border-radius: 4px; background-color: var(--dm-panel-bg); color: var(--dm-text-color);">
                        <option value="function">Function</option>
                        <option value="tour">Tour (1→2→3)</option>
                    </select>
                </div>
                <div style="display: flex; align-items: center; gap: 10px; flex-wrap: wrap; margin-top: 10px; border-top: 2px solid var(--dm-border-color); padding-top: 10px;">
                    <label style="font-weight: 500; color: var(--dm-secondary-color);">🔍 Search Employee:</label>
                    <input type="text" id="schedule-search-input" placeholder="Type name to filter..." style="flex: 1; padding: 8px 12px; border: 2px solid var(--dm-border-color); border-radius: 4px; background-color: var(--dm-input-bg); color: var(--dm-text-color); font-size: 0.95em; min-width: 250px;">
                    <button id="schedule-clear-search-btn" class="action-btn" style="background-color: var(--dm-secondary-color); padding: 6px 12px; font-size: 0.9em;">Clear</button>
                </div>
            </div>
            
            <div id="schedule-table-container" style="overflow-x: auto;">
                <!-- Schedule table will be generated here -->
            </div>
        </div>
    </div>

    <!-- 4. Settings Modal (Complete Content) -->
    <div id="settings-modal" class="modal">
        <div class="modal-content">
            <span class="close-btn">&times;</span>
            <h2>Settings & Administration<button id="help-btn" class="help-button" title="How to Use This App">?</button></h2>
            
            <!-- Modal Tab Navigation -->
            <div class="modal-tab-nav">
                <button class="modal-tab-btn active" data-tab="data-management-pane">Data Management</button>
                <button class="modal-tab-btn" data-tab="member-management-pane">Member Management</button>
                <button class="modal-tab-btn" data-tab="reason-management-pane">Reason Management</button>
            </div>

            <!-- Data Management Tab -->
            <div id="data-management-pane" class="modal-tab-pane">
                <h3>Employee Data Management</h3>
                
                <div id="csv-status" class="csv-upload-section">
                    <h4>Current Data Status</h4>
                    <p id="csv-employee-count">No employee data loaded. Please upload a CSV file.</p>
                    <p><strong>Employee Count:</strong> <span id="employee-count-display">0</span></p>
                </div>

                <div class="csv-upload-section">
                    <h4>Upload CSV File</h4>
                    <p>Upload a CSV file with employee data. Expected format: DOB, Approved Positions, FirstName, LastName, Function, Tour, Platoon, Start Time, Shield, Vax#, Status</p>
                    <input type="file" id="csv-file-input" accept=".csv" />
                    <button id="load-csv-btn" class="action-btn info-btn">Load CSV Data</button>
                </div>

                <div class="csv-upload-section">
                    <h4>Reset Data</h4>
                    <p>Clear current employee data and revert to default (empty) list.</p>
                    <button id="clear-data-btn" class="action-btn clear-all-btn">Clear All Data</button>
                </div>
                
                <div class="csv-upload-section" style="margin-top: 20px; border-top: 2px solid var(--dm-border-color); padding-top: 20px;">
                    <h4>🎨 Color Theme</h4>
                    <p style="font-size: 0.9em; color: var(--dm-secondary-color); margin-bottom: 10px;">Select your preferred color scheme for the application:</p>
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <label style="font-weight: 500;">Theme:</label>
                        <select id="color-theme-select" style="flex: 1; padding: 8px 12px; border: 2px solid var(--dm-border-color); border-radius: 4px; background-color: var(--dm-input-bg); color: var(--dm-text-color); font-size: 0.95em;">
                            <option value="fdny">FDNY (Red, Navy, Gold) - Default</option>
                            <option value="original">Original (Blue & Teal)</option>
                            <option value="grayscale">Grayscale (Black & White)</option>
                            <option value="bluish">Bluish (Light Blue Accent)</option>
                            <option value="forest">Forest Green (Nature)</option>
                            <option value="sunset">Sunset Orange (Warm)</option>
                            <option value="ocean">Ocean Blue (Deep Sea)</option>
                            <option value="purple">Purple Haze (Royal)</option>
                            <option value="mint">Mint Fresh (Cool Teal)</option>
                        </select>
                    </div>
                    <p style="font-size: 0.85em; color: var(--dm-secondary-color); margin-top: 8px; font-style: italic;">✓ Your selection will be saved and applied immediately. Works in both light & dark modes!</p>
                </div>
            </div>

            <!-- Member Management Tab -->
            <div id="member-management-pane" class="modal-tab-pane hidden">
                <h3>Add New Member</h3>
                <div class="add-member-form">
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 10px;">
                        <input type="text" id="new-member-firstname" placeholder="First Name *" />
                        <input type="text" id="new-member-lastname" placeholder="Last Name *" />
                    </div>
                    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px; margin-bottom: 10px;">
                        <input type="text" id="new-member-function" placeholder="Function" list="function-datalist" />
                        <datalist id="function-datalist">
                            <option value="CHIEF">
                            <option value="CAPTAIN">
                            <option value="LIEUTENANT">
                            <option value="SGT">
                            <option value="SUPERVISOR">
                            <option value="RD">
                            <option value="ARD">
                            <option value="RELAY">
                            <option value="DD">
                            <option value="INSTRUCTOR">
                            <option value="CADO-GIS">
                        </datalist>
                        <input type="text" id="new-member-tour" placeholder="Tour" />
                        <input type="text" id="new-member-platoon" placeholder="Platoon" />
                    </div>
                    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px; margin-bottom: 10px;">
                        <input type="text" id="new-member-start-time" placeholder="Start Time (HHMM or HH:MM)" />
                        <input type="text" id="new-member-ref" placeholder="Shield #" />
                        <input type="text" id="new-member-vax" placeholder="Vax #" />
                    </div>
                    <div style="display: grid; grid-template-columns: 1fr; gap: 10px; margin-bottom: 15px;">
                        <select id="new-member-status" style="padding: 8px 10px; border: 2px solid var(--dm-border-color); border-radius: 4px; background-color: var(--dm-input-bg); color: var(--dm-text-color); font-size: 0.95em;">
                            <option value="ACTIVE">ACTIVE</option>
                            <option value="Active">Active</option>
                            <option value="LOA">LOA</option>
                            <option value="FMLA">FMLA</option>
                            <option value="DETAILED">DETAILED</option>
                            <option value="FIRE PROMO">FIRE PROMO</option>
                            <option value="RESTRICTED">RESTRICTED</option>
                            <option value="LODI">LODI</option>
                            <option value="W COMP">W COMP</option>
                            <option value="MILITARY">MILITARY</option>
                            <option value="AWOL">AWOL</option>
                            <option value="WTC">WTC</option>
                            <option value="OTHER">OTHER</option>
                            <option value="Leave">On Leave</option>
                            <option value="Inactive">Inactive</option>
                        </select>
                    </div>
                    <div style="display: flex; gap: 10px; align-items: center;">
                        <button id="add-member-btn" class="action-btn info-btn" style="flex: 1;">Add Member</button>
                        <button id="cancel-edit-btn" class="action-btn" style="background-color: var(--dm-secondary-color); display: none;">❌ Cancel Edit</button>
                    </div>
                </div>
                
                <div style="margin-top: 30px; border-top: 2px solid var(--dm-border-color); padding-top: 20px;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                        <h3 style="margin: 0;">All Members</h3>
                        <div style="display: flex; gap: 10px;">
                            <button id="reload-members-btn" class="action-btn" style="background-color: var(--dm-success-color); color: white;">🔄 Reload Data</button>
                            <button id="export-csv-btn" class="action-btn" style="background-color: var(--dm-info-color); color: white;">📥 Export CSV</button>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 15px;">
                        <input type="text" id="member-search-input" placeholder="🔍 Search members by name..." style="width: 100%; padding: 10px 15px; border: 2px solid var(--dm-border-color); border-radius: 4px; background-color: var(--dm-input-bg); color: var(--dm-text-color); font-size: 0.95em;">
                    </div>
                    
                    <div id="member-list-container" style="max-height: 400px; overflow-y: auto; border: 2px solid var(--dm-border-color); border-radius: 6px; background-color: var(--dm-panel-bg);">
                        <div id="member-list" style="padding: 10px;">
                            <!-- Member list will be populated here -->
                            <p style="text-align: center; color: var(--dm-secondary-color); padding: 20px;">No members found. Add members or load CSV data.</p>
                        </div>
                    </div>
                    
                    <p style="font-size: 0.85em; color: var(--dm-secondary-color); margin-top: 10px; font-style: italic;">
                        💡 Click "Reload Data" after editing to apply changes immediately throughout the app.
                    </p>
                </div>
            </div>

            <!-- Reason Management Tab -->
            <div id="reason-management-pane" class="modal-tab-pane hidden">
                <h3>Manage Absence Reasons</h3>
                <div class="manage-reasons-form">
                    <div>
                        <input type="text" id="new-reason" placeholder="Enter new reason..." />
                        <button id="add-reason-btn" class="action-btn info-btn">Add Reason</button>
                    </div>
                </div>
                <h4>Current Reasons:</h4>
                <ul id="reason-list" class="reason-list">
                    <!-- Populated by JavaScript -->
                </ul>
            </div>
        </div>
    </div>

    <!-- Week Switch Selector Modal -->
    <div id="week-switch-modal" class="modal" style="display: none;">
        <div class="modal-content" style="max-width: 800px;">
            <span class="close-btn" onclick="closeWeekSwitchModal()">&times;</span>
            <h2 style="margin-bottom: 20px;">Select Work Schedule</h2>
            <div id="week-switch-info" style="background: #ecf0f1; padding: 15px; border-radius: 6px; margin-bottom: 20px; text-align: center;">
                <strong id="switch-employee-name"></strong>: <span id="switch-work-type"></span>
                <br><span style="font-size: 0.9em; color: #666;" id="switch-instruction">Select the day(s) and enter work time</span>
            </div>
            
            <!-- Time Selection -->
            <div style="background: #f8f9fa; padding: 15px; border-radius: 6px; margin-bottom: 15px; text-align: center;">
                <label style="font-weight: 600; margin-right: 10px;">Work Time:</label>
                <input type="time" id="work-time-input" style="padding: 8px; border: 2px solid #ddd; border-radius: 4px; font-size: 1em;" value="08:00">
                <span style="margin-left: 15px; color: #666; font-size: 0.9em;">(24-hour format)</span>
            </div>
            
            <div id="week-days-container" style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 10px;">
                <!-- Week days will be populated here -->
            </div>
        </div>
    </div>

    <!-- Help Modal -->
    <div id="help-modal" class="modal">
        <div class="modal-content" style="max-width: 900px; max-height: 85vh; overflow-y: auto;">
            <span class="close-btn" id="close-help-modal">&times;</span>
            <h2 style="color: var(--dm-primary-color); border-bottom: 3px solid var(--dm-primary-color); padding-bottom: 10px;">📚 FDNY EMS Staffing System - User Guide</h2>
            
            <div style="padding: 20px 0;">
                
                <!-- Quick Start -->
                <section style="margin-bottom: 30px;">
                    <h3 style="color: var(--dm-secondary-color); font-size: 1.4em; margin-bottom: 15px;">🚀 Quick Start</h3>
                    <ol style="line-height: 1.8; padding-left: 20px;">
                        <li><strong>Load Employee Data:</strong> Click "⚙️ Admin" → "Data Management" → Upload your CSV file</li>
                        <li><strong>View Today's Schedule:</strong> The main roster shows employees scheduled to work based on platoon rotation</li>
                        <li><strong>Mark Absences:</strong> Search for employees in the "Absent" panel and select a reason</li>
                        <li><strong>Add Overtime:</strong> Search in "Added to Schedule" panel to add employees working overtime</li>
                        <li><strong>Export Report:</strong> Click "Export HTML" to generate a printable daily rundown</li>
                    </ol>
                </section>

                <!-- Main Features -->
                <section style="margin-bottom: 30px;">
                    <h3 style="color: var(--dm-secondary-color); font-size: 1.4em; margin-bottom: 15px;">🎯 Main Features</h3>
                    
                    <div style="background: var(--dm-panel-bg); padding: 15px; border-radius: 8px; margin-bottom: 15px; border-left: 4px solid var(--dm-primary-color);">
                        <h4 style="margin-top: 0;">📋 Employee Roster</h4>
                        <ul style="line-height: 1.8;">
                            <li><strong>Search:</strong> Use the search bar at the top to quickly find employees</li>
                            <li><strong>Filter by Tour:</strong> Select T1, T2, or T3 to view specific tours</li>
                            <li><strong>Filter by Function:</strong> Check boxes for CHIEF, CAPTAIN, SGT, RD, ARD, etc.</li>
                            <li><strong>Working Today Filter:</strong> Toggle to show only employees scheduled today</li>
                            <li><strong>Hide Inactive:</strong> Toggle to hide INACTIVE status employees</li>
                            <li><strong>Drag & Drop:</strong> Drag employees between Roster, Absent, and Added lists</li>
                        </ul>
                    </div>

                    <div style="background: var(--dm-panel-bg); padding: 15px; border-radius: 8px; margin-bottom: 15px; border-left: 4px solid #e74c3c;">
                        <h4 style="margin-top: 0;">❌ Absent Panel</h4>
                        <ul style="line-height: 1.8;">
                            <li><strong>Add to Absent:</strong> Search employee name or drag from roster</li>
                            <li><strong>Select Reason:</strong> Choose from dropdown (SICK, ML, FMLA, etc.)</li>
                            <li><strong>Overtime Option:</strong> Click "OT" to log overtime details (hours, vice, reason)</li>
                            <li><strong>Remove:</strong> Click the "✕" button to remove from absent list</li>
                        </ul>
                    </div>

                    <div style="background: var(--dm-panel-bg); padding: 15px; border-radius: 8px; margin-bottom: 15px; border-left: 4px solid #27ae60;">
                        <h4 style="margin-top: 0;">➕ Added to Schedule Panel</h4>
                        <ul style="line-height: 1.8;">
                            <li><strong>Add Employee:</strong> Search name or drag from roster (for off-duty employees working OT)</li>
                            <li><strong>Enter Reason:</strong> Specify why they're added (e.g., "Filling in", "Voluntary OT")</li>
                            <li><strong>Override Shield:</strong> Enter alternate shield number if needed</li>
                            <li><strong>Override Tour:</strong> Change tour assignment if different from normal</li>
                            <li><strong>Overtime:</strong> Click "OT" button to log full overtime details</li>
                        </ul>
                    </div>
                </section>

                <!-- Working Platoons -->
                <section style="margin-bottom: 30px;">
                    <h3 style="color: var(--dm-secondary-color); font-size: 1.4em; margin-bottom: 15px;">🔄 Platoon Rotation System</h3>
                    <div style="background: #e8f4f8; padding: 15px; border-radius: 8px; border: 2px solid #3498db;">
                        <p style="margin-top: 0;"><strong>The system automatically calculates which platoons are working based on rotation schedules:</strong></p>
                        <ul style="line-height: 1.8;">
                            <li><strong>A, B, C Platoons:</strong> 15-day rotation (Work 5, Off 2, Work 5, Off 3)</li>
                            <li><strong>D Platoon:</strong> Monday-Friday (weekends off)</li>
                            <li><strong>E, F, G, H Platoons:</strong> 14-day rotation cycle</li>
                        </ul>
                        <p style="margin-bottom: 0;"><strong>Working platoons display automatically</strong> at the top of the roster for any selected date.</p>
                    </div>
                </section>

                <!-- Calendar & Schedule Views -->
                <section style="margin-bottom: 30px;">
                    <h3 style="color: var(--dm-secondary-color); font-size: 1.4em; margin-bottom: 15px;">📅 Calendar & Schedule Views</h3>
                    
                    <div style="background: var(--dm-panel-bg); padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                        <h4 style="margin-top: 0;">Calendar View</h4>
                        <ul style="line-height: 1.8;">
                            <li>Click "📅 Calendar" button in the header</li>
                            <li>Navigate months using ◄ ► arrows</li>
                            <li>Click any date to view roster for that day</li>
                            <li>Color-coded days show absence/schedule density</li>
                            <li>Schedule absences in advance by clicking dates</li>
                        </ul>
                    </div>

                    <div style="background: var(--dm-panel-bg); padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                        <h4 style="margin-top: 0;">Schedule View (Week/Month)</h4>
                        <ul style="line-height: 1.8;">
                            <li>Click "🗓️ Schedule" button to open weekly schedule</li>
                            <li>View 7-day or full month grid of all employees</li>
                            <li>Mark absences for future dates by clicking employee rows</li>
                            <li>Toggle between Tours and Functions using filters</li>
                            <li>Schedule automatic absences (vacations, planned ML, etc.)</li>
                            <li>Click "OT/Switch" to log scheduled overtime or tour switches</li>
                        </ul>
                    </div>
                </section>

                <!-- Export Options -->
                <section style="margin-bottom: 30px;">
                    <h3 style="color: var(--dm-secondary-color); font-size: 1.4em; margin-bottom: 15px;">📄 Export & Printing</h3>
                    <div style="background: var(--dm-panel-bg); padding: 15px; border-radius: 8px;">
                        <p style="margin-top: 0;"><strong>Four export layouts available:</strong></p>
                        <ul style="line-height: 1.8;">
                            <li><strong>Original Layout:</strong> Complete detailed rundown with all sections and statistics
                                <br><em style="color: #666;">→ Includes highlighted employees (red=absent, green=added, orange=overtime)</em>
                            </li>
                            <li><strong>Compact Layout:</strong> Condensed 2-column format, minimal spacing</li>
                            <li><strong>Cards Layout:</strong> Individual employee cards with full details</li>
                            <li><strong>Plain Text:</strong> Simple list format, minimal styling for quick printing</li>
                        </ul>
                        <p><strong>To Export:</strong></p>
                        <ol style="line-height: 1.8;">
                            <li>Select layout from dropdown next to "Export HTML" button</li>
                            <li>Click "Export HTML"</li>
                            <li>New window opens with formatted report</li>
                            <li>Use browser's Print function (Ctrl+P) or Save as PDF</li>
                        </ol>
                    </div>
                </section>

                <!-- Admin Settings -->
                <section style="margin-bottom: 30px;">
                    <h3 style="color: var(--dm-secondary-color); font-size: 1.4em; margin-bottom: 15px;">⚙️ Admin Settings</h3>
                    
                    <div style="background: var(--dm-panel-bg); padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                        <h4 style="margin-top: 0;">Data Management</h4>
                        <ul style="line-height: 1.8;">
                            <li><strong>Upload CSV:</strong> Import employee roster from CSV file
                                <br><em style="color: #666;">Required columns: FIRST_NAME, LAST_NAME, FUNCTION, TOUR, PLATOON, START_TIME, SHIELD</em>
                            </li>
                            <li><strong>Export CSV:</strong> Download current roster as CSV file</li>
                            <li><strong>Clear Data:</strong> Remove all employee data (keeps absence/schedule history)</li>
                        </ul>
                    </div>

                    <div style="background: var(--dm-panel-bg); padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                        <h4 style="margin-top: 0;">Member Management</h4>
                        <ul style="line-height: 1.8;">
                            <li><strong>Add New Member:</strong> Manually add employees to the roster</li>
                            <li><strong>Edit Members:</strong> Click pencil icon to modify employee details</li>
                            <li><strong>Delete Members:</strong> Click trash icon to remove employees</li>
                            <li><strong>View All Members:</strong> Scrollable list of all employees in system</li>
                        </ul>
                    </div>

                    <div style="background: var(--dm-panel-bg); padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                        <h4 style="margin-top: 0;">Reason Management</h4>
                        <ul style="line-height: 1.8;">
                            <li><strong>Add Custom Reasons:</strong> Create new absence/schedule reasons</li>
                            <li><strong>Delete Reasons:</strong> Remove unused reason codes</li>
                            <li><strong>Default Reasons:</strong> SICK, ML, FMLA, VACATION, IOD, SUSPENSION, etc.</li>
                        </ul>
                    </div>
                </section>

                <!-- Themes & Customization -->
                <section style="margin-bottom: 30px;">
                    <h3 style="color: var(--dm-secondary-color); font-size: 1.4em; margin-bottom: 15px;">🎨 Themes & Appearance</h3>
                    <div style="background: var(--dm-panel-bg); padding: 15px; border-radius: 8px;">
                        <p style="margin-top: 0;"><strong>Choose from 8 color themes:</strong></p>
                        <ul style="line-height: 1.8;">
                            <li>🔴 FDNY Red (Default) - Official FDNY colors</li>
                            <li>🔵 Navy Blue - Professional blue theme</li>
                            <li>🟢 Forest Green - Calm green tones</li>
                            <li>🟣 Royal Purple - Elegant purple theme</li>
                            <li>🟠 Sunset Orange - Warm orange hues</li>
                            <li>🟡 Golden Yellow - Bright and cheerful</li>
                            <li>🩷 Soft Pink - Gentle rose tones</li>
                            <li>⚫ Dark Mode - High-contrast dark theme</li>
                        </ul>
                        <p><strong>To Change Theme:</strong> Use the theme selector dropdown in the header</p>
                    </div>
                </section>

                <!-- Tips & Best Practices -->
                <section style="margin-bottom: 30px;">
                    <h3 style="color: var(--dm-secondary-color); font-size: 1.4em; margin-bottom: 15px;">💡 Tips & Best Practices</h3>
                    <div style="background: #fff3cd; padding: 15px; border-radius: 8px; border-left: 4px solid #ffc107;">
                        <ul style="line-height: 1.8; margin: 0;">
                            <li><strong>Daily Workflow:</strong> Open app → Check working platoons → Mark absences → Add overtime → Export report</li>
                            <li><strong>Data Persistence:</strong> All changes save automatically to browser storage</li>
                            <li><strong>Schedule in Advance:</strong> Use Schedule View to mark known absences for future dates</li>
                            <li><strong>Overtime Tracking:</strong> Always use the OT button to log complete overtime details</li>
                            <li><strong>Regular Backups:</strong> Export CSV regularly to backup your roster data</li>
                            <li><strong>Print Reports:</strong> Export at end of shift for physical records</li>
                            <li><strong>Browser Storage:</strong> Data persists in your browser - clearing browser data will erase it</li>
                        </ul>
                    </div>
                </section>

                <!-- Keyboard Shortcuts -->
                <section style="margin-bottom: 30px;">
                    <h3 style="color: var(--dm-secondary-color); font-size: 1.4em; margin-bottom: 15px;">⌨️ Keyboard Shortcuts</h3>
                    <div style="background: var(--dm-panel-bg); padding: 15px; border-radius: 8px;">
                        <ul style="line-height: 1.8; margin: 0;">
                            <li><strong>Ctrl + P:</strong> Print exported report</li>
                            <li><strong>Esc:</strong> Close any open modal</li>
                            <li><strong>Tab:</strong> Navigate between form fields</li>
                            <li><strong>Enter:</strong> Submit forms (Add Member, Add Reason, etc.)</li>
                        </ul>
                    </div>
                </section>

                <!-- Support -->
                <section style="margin-bottom: 20px;">
                    <h3 style="color: var(--dm-secondary-color); font-size: 1.4em; margin-bottom: 15px;">❓ Need Help?</h3>
                    <div style="background: var(--dm-panel-bg); padding: 15px; border-radius: 8px; border-left: 4px solid var(--dm-primary-color);">
                        <p style="margin: 0; line-height: 1.8;">
                            <strong>For technical support or questions:</strong><br>
                            • Check this guide for common features and workflows<br>
                            • All data is stored locally in your browser<br>
                            • Use Export CSV to backup your roster regularly<br>
                            • Click the help button (?) anytime to view this guide
                        </p>
                    </div>
                </section>

            </div>
            
            <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 2px solid var(--dm-border-color);">
                <button id="close-help-btn" class="action-btn" style="background-color: var(--dm-primary-color); padding: 12px 30px; font-size: 1.1em;">Close Guide</button>
            </div>
        </div>
    </div>

    <!-- 5. Essential JavaScript (The Complete Original Core) -->
    <script>
        // --- START OF COMPLETE ORIGINAL JAVASCRIPT CORE ---
        
        // This massive block contains all the original data, configuration, 
        // and functional logic (loadState, handleCSVLoad, updateSummary, etc.)
        // which is required for the application to function.

        // Platoon Rotation System - Predictive Algorithm
        // Uses calculated rotation patterns instead of hardcoded dates
        
        /* COMPLETE PLATOON ROTATION PATTERNS:
         * 
         * A, B, C PLATOONS: 15-day rotation cycle (Work 5, Off 2, Work 5, Off 3)
         * - A Platoon: Offset +13 (starts at day 14 of cycle)
         * - B Platoon: Offset +4 (starts at day 5 of cycle)  
         * - C Platoon: Offset +0 (starts at day 1 of cycle)
         * 
         * D PLATOON: Monday-Friday only (weekends off)
         * 
         * E, F, G, H PLATOONS: 14-day rotation cycle starting October 1, 2025
         * Day 1: E,G  |  Day 8: F,H  |  Reference: Oct 1, 2025
         * Day 2: E,H  |  Day 9: F,G  
         * Day 3: F,H  |  Day 10: E,G
         * Day 4: F,G  |  Day 11: E,H
         * Day 5: F,G  |  Day 12: E,H
         * Day 6: E,G  |  Day 13: F,H
         * Day 7: E,H  |  Day 14: F,G
         * 
         * COVERAGE: System ensures continuous coverage through overlapping cycles
         */        // Default fallback pattern for dates not in the data
        // Platoon rotation now handled by predictive algorithm in getWorkingPlatoonsForDate()

        // --- Configuration for Summary Panel ---
        // Edit this array to control the order of functions in the summary.
        // Functions not listed here will appear alphabetically at the end.
        const summaryFunctionOrder = [
            "CHIEF", "CAPTAIN", "LIEUTENANT", "SGT", "SUPERVISOR", // Leadership first
            "INSTRUCTOR", "RD", "ARD", "RELAY", "DD", "CADO-GIS", // Other roles
            // Add other function names here in desired order
        ];
        // Edit this array to show only specific functions. Leave empty to show all.
        // Example: const summaryVisibleFunctions = ["RD", "ARD", "INSTRUCTOR"];
        const summaryVisibleFunctions = [];        // --- Data Parsing ---
        /** Enhanced parseEmployeeData function with better error handling */
        function parseEmployeeData(csvData) {
            // Handle empty or null data
            if (!csvData || csvData.trim() === '') {
                console.log('No CSV data provided');
                return [];
            }
            
            const lines = csvData.trim().split('\n');
            const employees = [];
            let errorCount = 0;
            
            console.log(`Parsing CSV with ${lines.length} lines`);
            
            // Ensure we have at least a header row
            if (lines.length < 2) {
                console.warn('CSV file must have at least a header row and one data row');
                return [];
            }
              // Start from 1 to skip header
            for (let i = 1; i < lines.length; i++) {
                try {
                    // Handle both comma and semicolon delimited CSV files
                    let columns = lines[i].split(',');
                    if (columns.length < 5) {
                        // Try semicolon delimiter if comma doesn't work well
                        columns = lines[i].split(';');
                    }
                    
                    // Try tab delimiter if still not enough columns
                    if (columns.length < 5) {
                        columns = lines[i].split('\t');
                    }
                    
                    // Clean and parse columns according to documented format:
                    // [DOB, Approved Positions, FirstName, LastName, Function, Tour, Platoon, Start Time, Shield, Vax#, Status]
                    if (columns.length >= 11) { // Require all 11 columns as documented
                        const dob = (columns[0] || '').replace(/^"|"$/g, '').trim();
                        const approvedPositions = (columns[1] || '').replace(/^"|"$/g, '').trim();
                        const firstName = (columns[2] || '').replace(/^"|"$/g, '').trim();
                        const lastName = (columns[3] || '').replace(/^"|"$/g, '').trim();
                        const func = (columns[4] || '').replace(/^"|"$/g, '').trim();
                        const tour = (columns[5] || '').replace(/^"|"$/g, '').trim();
                        const platoon = (columns[6] || '').replace(/^"|"$/g, '').trim();
                        const startTime = (columns[7] || '').replace(/^"|"$/g, '').trim();
                        const shield = (columns[8] || '').replace(/^"|"$/g, '').trim();
                        const vax = (columns[9] || '').replace(/^"|"$/g, '').trim();
                        const status = (columns[10] || '').replace(/^"|"$/g, '').trim();

                        // More forgiving requirements - only need name (first or last) 
                        if (firstName || lastName) { 
                            const fullName = `${firstName || ''} ${lastName || ''}`.trim();
                            const employeeData = {
                                dob: dob || '',
                                approvedPositions: approvedPositions || '',
                                shield: shield || `auto-${i}`, // Generate auto shield if missing
                                firstName: firstName || 'Unknown',
                                lastName: lastName || 'Employee',
                                fullName: fullName || `Employee ${i}`,
                                function: func || 'Other', // Default function
                                tour: tour || 'Unknown',
                                platoon: platoon || 'Unknown',
                                startTime: normalizeTimeForStorage(startTime),
                                vax: vax || '', // Default empty vax
                                status: status || 'Active'
                            };
                            employees.push(employeeData);
                        } else {
                            errorCount++;
                            console.warn(`Row ${i + 1}: Missing name information - skipping`);
                        }
                    } else if (columns.length >= 3) { // Fallback for files with fewer columns
                        // Try to parse with flexible column mapping for backward compatibility
                        const firstName = (columns[2] || columns[0] || '').replace(/^"|"$/g, '').trim();
                        const lastName = (columns[3] || columns[1] || '').replace(/^"|"$/g, '').trim();
                        const func = (columns[4] || '').replace(/^"|"$/g, '').trim();
                        const tour = (columns[5] || '').replace(/^"|"$/g, '').trim();
                        const platoon = (columns[6] || '').replace(/^"|"$/g, '').trim();
                        const startTime = (columns[7] || '').replace(/^"|"$/g, '').trim();
                        const shield = (columns[8] || '').replace(/^"|"$/g, '').trim();
                        const vax = (columns[9] || '').replace(/^"|"$/g, '').trim();
                        const status = (columns[10] || '').replace(/^"|"$/g, '').trim();

                        if (firstName || lastName) {
                            const fullName = `${firstName || ''} ${lastName || ''}`.trim();
                            const employeeData = {
                                dob: '',
                                approvedPositions: '',
                                shield: shield || `auto-${i}`,
                                firstName: firstName || 'Unknown',
                                lastName: lastName || 'Employee',
                                fullName: fullName || `Employee ${i}`,
                                function: func || 'Other',
                                tour: tour || 'Unknown',
                                platoon: platoon || 'Unknown',
                                startTime: normalizeTimeForStorage(startTime),
                                vax: vax || '',
                                status: status || 'Active'
                            };
                            employees.push(employeeData);
                        } else {
                            errorCount++;
                            console.warn(`Row ${i + 1}: Missing name information - skipping`);
                        }
                    } else {
                        errorCount++;
                        console.warn(`Row ${i + 1}: Insufficient columns (${columns.length}) - need at least 3 or preferably 11`);
                    }
                } catch (error) {
                    errorCount++;
                    console.error(`Error parsing row ${i + 1}:`, error);
                }
            }
            
            console.log(`Parsed ${employees.length} employees successfully, ${errorCount} errors`);
            
            // Sort employees logically: by start time, platoon, then last name
            return sortEmployees(employees);
        }        // Store all parsed employee data - initialize as empty array
        let allEmployees = [];
        // Keep track of which employees are currently displayed (after filtering)
        let displayedEmployees = [];

        // Add new variables for CSV functionality
        let isUsingCSVData = false;
        let originalHardcodedData = []; // Keep original as backup

        // Add new DOM elements for CSV functionality - These will be found after DOM is loaded
        let csvFileInput, loadCSVBtn, clearDataBtn, csvStatus, employeeCountDisplay;

        // --- DOM Elements ---
        const employeeList = document.getElementById('employee-list');
        const dropZones = document.querySelectorAll('.drop-zone'); // Includes absent and added lists
        const functionFilterContainer = document.getElementById('function-filter-container');
        const tourFilterContainer = document.getElementById('tour-filter-container');
        const workingTodayCheckbox = document.getElementById('working-today-checkbox');
        const hideInactiveCheckbox = document.getElementById('hide-inactive-checkbox');
        const clearFunctionFiltersBtn = document.getElementById('clear-function-filters');
        // These elements will be found after DOM is loaded
        let addMemberBtn, newMemberFirstNameInput, newMemberLastNameInput, newMemberFunctionInput;
        let newMemberTourInput, newMemberPlatoonInput, newMemberStartTimeInput, newMemberRefInput;
        let newMemberVaxInput, newMemberStatusInput, addReasonBtn, newReasonInput, reasonList;        const summaryContent = document.getElementById('summary-content');
        const clockElement = document.getElementById('clock');
        const summaryDateDisplay = document.getElementById('summary-date');
        const todayDateDisplay = document.getElementById('today-date');
        const historyList = document.getElementById('history-list'); // History List Element
        const clearTodayBtn = document.getElementById('clear-today-btn'); // Clear Today Button
        const currentScheduleDateDisplay = document.getElementById('current-schedule-date-display'); // New Date Display
        const prevDayBtn = document.getElementById('prev-day-btn'); // New Prev Button
        const nextDayBtn = document.getElementById('next-day-btn'); // New Next Button        // Monthly View Elements
        const toggleMonthlyViewBtn = document.getElementById('toggle-monthly-view-btn');
        const mainViewContent = document.getElementById('main-app-container'); // Changed to new ID
        const calendarViewContent = document.getElementById('calendar-view-content'); // Main Calendar View Container
        const monthlyViewContent = document.getElementById('calendar-view-content'); // Use Calendar View Container for monthly view
        const prevMonthBtn = document.getElementById('calendar-prev-month-btn'); // Re-mapped button IDs
        const nextMonthBtn = document.getElementById('calendar-next-month-btn'); // Re-mapped button IDs
        const currentMonthYearDisplay = document.getElementById('calendar-current-month-display'); // Re-mapped display
        const calendarBackBtn = document.getElementById('calendar-back-btn');
        const calendarGridContainer = document.getElementById('calendar-grid-container'); 
        
        // Statistics Panel Elements - These will be found after DOM is loaded
        let statisticsPanelFull, viewStatsBtn, refreshStatsBtn;
        const statsPeriodSelect = document.getElementById('stats-period-select'); // Element only exists if the full stats panel HTML is present
        const totalEmployeesStatElement = document.getElementById('total-employees-stat'); // Element only exists if the full stats panel HTML is present
        const avgSickUsageStatElement = document.getElementById('avg-sick-usage-stat'); // Element only exists if the full stats panel HTML is present
        const totalSickDaysStatElement = document.getElementById('total-sick-days-stat'); // Element only exists if the full stats panel HTML is present
        const attendanceRateStatElement = document.getElementById('attendance-rate-stat'); // Element only exists if the full stats panel HTML is present
        const statsEmployeeSearch = document.getElementById('stats-employee-search'); // Element only exists if the full stats panel HTML is present
        const statsSortSelect = document.getElementById('stats-sort-select'); // Element only exists if the full stats panel HTML is present
        const employeeStatsListElement = document.getElementById('employee-stats-list'); // Element only exists if the full stats panel HTML is present
        const functionStatsListElement = document.getElementById('function-stats-list'); // Element only exists if the full stats panel HTML is present
        const analysisContentElement = document.getElementById('analysis-content'); // Element only exists if the full stats panel HTML is present
        
        // Enhanced Filter Elements (Elements only exist if the full stats panel HTML is present)
        const statsPeriodSelectEnhanced = document.getElementById('stats-period-select-enhanced'); 
        const usageRateFilter = document.getElementById('usage-rate-filter');
        const minDaysFilter = document.getElementById('min-days-filter');
        const leaveTypeFilter = document.getElementById('leave-type-filter');
        const statsTourFilter = document.getElementById('stats-tour-filter');
        const statsPlatoonFilter = document.getElementById('stats-platoon-filter');
        const functionFiltersContainer = document.getElementById('function-filters');
        const applyFiltersBtn = document.getElementById('apply-filters-btn');
        const clearFiltersBtn = document.getElementById('clear-filters-btn');
        const resetFiltersBtn = document.getElementById('reset-filters-btn');
        const filterSummary = document.getElementById('filter-summary');
        const filteredCount = document.getElementById('filtered-count');
        const totalCount = document.getElementById('total-count');

        // New Elements for Redesign structure
        const settingsModal = document.getElementById('settings-modal');
        const openSettingsBtn = document.getElementById('open-settings-modal');
        const closeSettingsBtn = settingsModal ? settingsModal.querySelector('.close-btn') : null;
        const modalTabButtons = settingsModal ? settingsModal.querySelectorAll('.modal-tab-btn') : [];
        const modalTabPanes = settingsModal ? settingsModal.querySelectorAll('.modal-tab-pane') : [];
        const opsTabNav = document.getElementById('ops-tabs');
        const opsTabButtons = opsTabNav ? opsTabNav.querySelectorAll('.ops-tab-btn') : [];
        const opsTabPanes = opsTabNav ? opsTabNav.querySelectorAll('.tab-pane') : [];

        // Roster Search
        const rosterSearchInput = document.getElementById('roster-employee-search');
        const rosterSearchDropdown = document.getElementById('roster-search-dropdown');


        // --- State ---
        let currentDisplayDate = new Date(); // Date for filtering schedule view
        currentDisplayDate.setHours(0, 0, 0, 0); // Normalize to start of day
        let currentMonthlyViewDate = new Date(); // For the monthly view
        currentMonthlyViewDate.setDate(1); // Start with the first day of the current month
        currentMonthlyViewDate.setHours(0, 0, 0, 0);
        let currentCalendarViewDate = new Date(); // For the calendar view
        currentCalendarViewDate.setDate(1); // Start with the first day of the current month
        currentCalendarViewDate.setHours(0, 0, 0, 0);        let absenceState = { today: {}, tomorrow: {} };
        let addedState = { today: {}, tomorrow: {} }; // State for added to schedule - now stores { empId: { reason: '', shield: '' } }
        let absenceReasons = [ // Use let to allow modification from localStorage
            "Sick", "Vacation", "LOA", "Mutual", "AL", "CT", "MO", "TCO",
            "FMLA", "LODI", "MEDIC PROMO", "FIRE PROMO", "DETAILED",
            "RESTRICTED", "OFFSITE", "Overtime"
        ];
        let summarySectionOrder = ['tour', 'function', 'funcTour', 'overall']; // Default order
        let historyState = []; // Added for Recent History
          // Statistics and Leave Usage Tracking
        let leaveUsageStats = {}; // Stores historical leave usage data
        let statisticsData = {
            period: 30, // Default to last 30 days
            lastUpdated: null
        };
        
        let currentLeaveStatsPeriod = 30; // Global variable for current leave stats period
        
        // Enhanced Filter State
        let statsFilters = {
            period: 30, // Default period
            usageRate: '',
            minDays: 0,
            leaveType: '',
            tour: '',
            platoon: '',
            functions: [],
            searchQuery: ''
        }; // Initialized with default values

        // --- LocalStorage Keys ---
        const LS_KEYS = {
            EMPLOYEES: 'staffingApp_allEmployees',
            ABSENCES: 'staffingApp_absenceState',
            ADDED: 'staffingApp_addedState',
            REASONS: 'staffingApp_absenceReasons',
            FILTERS: 'staffingApp_filters',
            SUMMARY_ORDER: 'staffingApp_summaryOrder',
            HISTORY: 'staffingApp_historyState', // Added History Key
            THEME: 'staffingApp_theme', // Added Theme Key
            LEAVE_STATS: 'staffingApp_leaveUsageStats', // Leave usage statistics
            STATISTICS_DATA: 'staffingApp_statisticsData', // Statistics configuration
            SCHEDULE_DATA: 'staffingApp_scheduleData' // Schedule absence data
        };

        // --- Utility Functions ---

        /** 
         * Formats time to military format HH:MM
         * Accepts various input formats: 4-digit (0800), 3-digit (630), with/without colon
         * Always returns HH:MM format or 'N/A' if invalid
         */
        function formatMilitaryTime(timeStr) {
            if (!timeStr || timeStr === 'N/A' || timeStr.trim() === '') {
                return 'N/A';
            }
            
            // Remove any non-digit characters
            const digits = String(timeStr).replace(/\D/g, '');
            
            if (digits.length === 4) {
                // Format: HHMM (e.g., 0800, 1730)
                return `${digits.substring(0, 2)}:${digits.substring(2, 4)}`;
            } else if (digits.length === 3) {
                // Format: HMM (e.g., 630 becomes 06:30)
                return `0${digits.substring(0, 1)}:${digits.substring(1, 3)}`;
            } else if (digits.length === 2) {
                // Format: HH (e.g., 08 becomes 08:00)
                return `${digits}:00`;
            } else if (digits.length === 1) {
                // Format: H (e.g., 6 becomes 06:00)
                return `0${digits}:00`;
            }
            
            return 'N/A';
        }

        /** 
         * Normalizes time input to consistent 4-digit format for storage
         * Converts HH:MM or variations to HHMM
         */
        function normalizeTimeForStorage(timeStr) {
            if (!timeStr || timeStr === 'N/A' || timeStr.trim() === '') {
                return '';
            }
            
            // Remove any non-digit characters
            const digits = String(timeStr).replace(/\D/g, '');
            
            if (digits.length === 4) {
                return digits; // Already in HHMM format
            } else if (digits.length === 3) {
                return `0${digits}`; // Pad to 4 digits
            } else if (digits.length === 2) {
                return `${digits}00`; // Add minutes
            } else if (digits.length === 1) {
                return `0${digits}00`; // Pad hour and add minutes
            }
            
            return '';
        }

        /**
         * Sorts employees by start time, then platoon (A→B→C→D→E→F), then last name
         * Use this consistently throughout the app for logical ordering
         */
        function sortEmployees(employeeArray) {
            return employeeArray.sort((a, b) => {
                // Helper to parse time to minutes since midnight
                const parseTime = (timeStr) => {
                    if (!timeStr || timeStr === 'N/A' || timeStr === '') return 9999;
                    const digits = String(timeStr).replace(/\D/g, '');
                    if (digits.length >= 4) {
                        return parseInt(digits.substring(0,2)) * 60 + parseInt(digits.substring(2,4));
                    } else if (digits.length === 3) {
                        return parseInt(digits.substring(0,1)) * 60 + parseInt(digits.substring(1,3));
                    } else if (digits.length === 2) {
                        return parseInt(digits) * 60;
                    }
                    return 9999;
                };
                
                // First: Sort by start time
                const timeA = parseTime(a.startTime);
                const timeB = parseTime(b.startTime);
                if (timeA !== timeB) {
                    return timeA - timeB;
                }
                
                // Second: Sort by platoon (A→B→C→D→E→F, then Unknown)
                const platoonOrder = { 'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6 };
                const platoonA = String(a.platoon || 'Unknown').toUpperCase().trim();
                const platoonB = String(b.platoon || 'Unknown').toUpperCase().trim();
                const orderA = platoonOrder[platoonA] || 999;
                const orderB = platoonOrder[platoonB] || 999;
                if (orderA !== orderB) {
                    return orderA - orderB;
                }
                
                // Third: Sort by last name
                const lastA = String(a.lastName || '').toUpperCase().trim();
                const lastB = String(b.lastName || '').toUpperCase().trim();
                if (lastA < lastB) return -1;
                if (lastA > lastB) return 1;
                
                // Fourth: Sort by first name if last names match
                const firstA = String(a.firstName || '').toUpperCase().trim();
                const firstB = String(b.firstName || '').toUpperCase().trim();
                if (firstA < firstB) return -1;
                if (firstA > firstB) return 1;
                
                return 0;
            });
        }

        // --- Functions (Original Core Logic) ---

        /** Helper function to show notifications */
        function showNotification(message, type = 'success', duration = 3000) {
            // Re-define/Include the original showNotification function
            let container = document.getElementById('notification-container');
            if (!container) {
                container = document.createElement('div');
                container.id = 'notification-container';
                container.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 10000;
                    pointer-events: none;
                `;
                document.body.appendChild(container);
            }

            const notification = document.createElement('div');
            notification.style.cssText = `
                background: ${type === 'success' ? '#d4edda' : type === 'error' ? '#f8d7da' : '#fff3cd'};
                color: ${type === 'success' ? '#155724' : type === 'error' ? '#721c24' : '#856404'};
                border: 2px solid ${type === 'success' ? '#c3e6cb' : type === 'error' ? '#f5c6cb' : '#ffeaa7'};
                padding: 12px 16px;
                border-radius: 6px;
                margin-bottom: 10px;
                max-width: 300px;
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                transform: translateX(100%);
                transition: transform 0.3s ease;
                pointer-events: auto;
                font-size: 14px;
                line-height: 1.4;
            `;
            
            notification.textContent = message;
            container.appendChild(notification);
            
            setTimeout(() => {
                notification.style.transform = 'translateX(0)';
            }, 100);
            
            setTimeout(() => {
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }, duration);
        }

        // --- Employee Search Functions (Adapted for new IDs) ---
        function initializeSearchFunctionality() {
            setupSearchInput('today-employee-search', 'today-search-dropdown', 'today');
            setupAbsentSearchInput('absent-employee-search', 'absent-search-dropdown');
            setupSearchInput('roster-employee-search', 'roster-search-dropdown', 'roster'); // Roster search for filtering
            initializeStatisticsSearchFunctionality();
        }

        function setupSearchInput(inputId, dropdownId, day) {
            const searchInput = document.getElementById(inputId);
            const searchDropdown = document.getElementById(dropdownId);
            
            if (!searchInput) return;

            let searchTimeout;

            searchInput.addEventListener('input', (e) => {
                clearTimeout(searchTimeout);
                const query = e.target.value.trim().toLowerCase();
                
                if (inputId === 'roster-employee-search') {
                    // Handle roster search immediately for filtering
                    if (query.length === 0) {
                        // Clear search - show all filtered employees
                        applyFiltersAndPopulate();
                    } else {
                        // Apply search filter
                        filterAndHighlightRoster(query);
                    }
                    return;
                }
                
                if (query.length < 2) {
                    if (searchDropdown) hideSearchDropdown(dropdownId);
                    return;
                }

                searchTimeout = setTimeout(() => {
                    performEmployeeSearch(query, dropdownId, day);
                }, 300);
            });

            if (searchDropdown) {
                searchInput.addEventListener('blur', (e) => {
                    // Delay hiding to allow clicks on dropdown
                    setTimeout(() => {
                        if (!searchDropdown.contains(document.activeElement)) {
                            hideSearchDropdown(dropdownId);
                        }
                    }, 200);
                });

                searchInput.addEventListener('focus', (e) => {
                    const query = e.target.value.trim().toLowerCase();
                    if (query.length >= 2 && inputId !== 'roster-employee-search') {
                        performEmployeeSearch(query, dropdownId, day);
                    }
                });
            }
        }
        
        function filterAndHighlightRoster(query) {
            if (!employeeList) return;
            
            // Filter displayed employees based on search query
            let filteredEmployees = displayedEmployees.filter(emp => {
                const searchQuery = query.toLowerCase().trim();
                
                const nameMatch = emp.fullName.toLowerCase().includes(searchQuery) || 
                                 emp.lastName.toLowerCase().includes(searchQuery) ||
                                 emp.firstName.toLowerCase().includes(searchQuery);
                                 
                const shieldMatch = emp.shield && (
                    emp.shield.toString().toLowerCase().includes(searchQuery) ||
                    emp.shield.toString().includes(query) // Keep original case for numbers
                );
                
                const functionMatch = emp.function && emp.function.toLowerCase().includes(searchQuery);
                const tourMatch = emp.tour && emp.tour.toString().includes(query);
                const platoonMatch = emp.platoon && emp.platoon.toLowerCase().includes(searchQuery);
                
                // Enhanced VAX matching
                const vaxMatch = emp.vax && (
                    emp.vax.toString().toLowerCase().includes(searchQuery) ||
                    emp.vax.toString().replace(/\s+/g, '').toLowerCase().includes(searchQuery.replace(/\s+/g, '')) ||
                    emp.vax.toString().includes(query) // Keep original case
                );
                
                return nameMatch || shieldMatch || functionMatch || tourMatch || platoonMatch || vaxMatch;
            });
            
            // Clear current list
            employeeList.innerHTML = '';
            
            if (filteredEmployees.length === 0) {
                const noResultsMessage = document.createElement('li');
                noResultsMessage.style.padding = '20px';
                noResultsMessage.style.textAlign = 'center';
                noResultsMessage.style.color = 'var(--dm-secondary-color)';
                noResultsMessage.style.fontStyle = 'italic';
                noResultsMessage.textContent = `No employees found matching "${query}".`;
                employeeList.appendChild(noResultsMessage);
                return;
            }
            
            // Group and display filtered employees
            const groupedEmployees = {};
            filteredEmployees.forEach(emp => {
                const funcKey = emp.function || 'Unassigned';
                if (!groupedEmployees[funcKey]) {
                    groupedEmployees[funcKey] = [];
                }
                groupedEmployees[funcKey].push(emp);
            });
            
            // Use same function ordering as main list
            const allFunctionsInList = Object.keys(groupedEmployees);
            const orderedFunctions = summaryFunctionOrder.filter(f => allFunctionsInList.includes(f));
            const remainingFunctions = allFunctionsInList.filter(f => !summaryFunctionOrder.includes(f)).sort();
            const finalFunctionOrder = [...orderedFunctions, ...remainingFunctions];
            
            // Populate filtered list
            finalFunctionOrder.forEach(func => {
                if (groupedEmployees[func] && groupedEmployees[func].length > 0) {
                    // Add separator
                    const separator = document.createElement('li');
                    separator.className = 'function-separator';
                    separator.textContent = `${func} (${groupedEmployees[func].length} found)`;
                    employeeList.appendChild(separator);
                    
                    // Add employees for this function
                    groupedEmployees[func].forEach(employee => {
                        const li = createEmployeeElement(employee);
                        // Highlight matching text
                        li.style.border = '2px solid var(--dm-primary-color)';
                        li.style.backgroundColor = 'var(--dm-hover-bg-color)';
                        employeeList.appendChild(li);
                    });
                }
            });
            
            // Re-add drag listeners
            addDragListenersToList(employeeList);
        }

        /** Perform employee search and show results (for ADDED list) */
        function performEmployeeSearch(query, dropdownId, day) {
            const searchDropdown = document.getElementById(dropdownId);
            if (!searchDropdown) return;            // Filter employees who aren't already in today list
            const availableEmployees = allEmployees.filter(emp => {
                const searchQuery = query.toLowerCase().trim();
                
                // Name matching
                const nameMatch = emp.fullName.toLowerCase().includes(searchQuery) || 
                                 emp.lastName.toLowerCase().includes(searchQuery) ||
                                 emp.firstName.toLowerCase().includes(searchQuery);
                
                // Shield matching (check both string and number formats)
                const shieldMatch = emp.shield && (
                    emp.shield.toString().toLowerCase().includes(searchQuery) ||
                    emp.shield.toString().includes(query) // Keep original case for numbers
                );
                
                // VAX matching (more robust - handle various formats)
                const vaxMatch = emp.vax && (
                    emp.vax.toString().toLowerCase().includes(searchQuery) ||
                    emp.vax.toString().replace(/\s+/g, '').toLowerCase().includes(searchQuery.replace(/\s+/g, '')) ||
                    emp.vax.toString().includes(query) // Keep original case
                );

                const matchFound = nameMatch || shieldMatch || vaxMatch;
                const notInAnyList = !emp.id || (!absenceState.today[emp.id] && 
                                   !addedState.today[emp.id]);

                return matchFound && notInAnyList;
            });

            if (availableEmployees.length === 0) {
                hideSearchDropdown(dropdownId);
                return;
            }

            // Sort by relevance (exact matches first, then partial)
            availableEmployees.sort((a, b) => {
                const aExact = a.fullName.toLowerCase().startsWith(query);
                const bExact = b.fullName.toLowerCase().startsWith(query);
                if (aExact && !bExact) return -1;
                if (!aExact && bExact) return 1;
                return a.fullName.localeCompare(b.fullName);
            });

            // Limit results
            const limitedResults = availableEmployees.slice(0, 8);

            // Populate dropdown
            searchDropdown.innerHTML = '';
            limitedResults.forEach(emp => {
                const resultItem = createSearchResultItem(emp, day);
                searchDropdown.appendChild(resultItem);
            });

            showSearchDropdown(dropdownId);
        }

        function createSearchResultItem(employee, day) {
            const item = document.createElement('div');
            item.className = 'search-result-item';

            const infoDiv = document.createElement('div');
            
            const nameSpan = document.createElement('span');
            nameSpan.className = 'search-result-name';
            nameSpan.textContent = employee.fullName;
            
            const detailsSpan = document.createElement('span');
            detailsSpan.className = 'search-result-details';
            detailsSpan.textContent = `${employee.function || 'N/A'} | T${employee.tour || '?'} | ${employee.shield || 'No Shield'}`;
            
            infoDiv.appendChild(nameSpan);
            infoDiv.appendChild(document.createElement('br'));
            infoDiv.appendChild(detailsSpan);

            const addBtn = document.createElement('button');
            addBtn.className = 'search-result-add-btn action-btn info-btn'; // Use new classes
            addBtn.textContent = 'Add';
            addBtn.onclick = (e) => {
                e.stopPropagation();
                addEmployeeToSchedule(employee.id, day);
                hideSearchDropdown(day === 'today' ? 'today-search-dropdown' : 'tomorrow-search-dropdown');
                clearSearchInput(day);
            };

            item.appendChild(infoDiv);
            item.appendChild(addBtn);

            return item;
        }

        function addEmployeeToSchedule(employeeId, day) {
            const employee = allEmployees.find(emp => emp.id === employeeId);
            if (!employee) return;            // Check if employee is already in any list
            if (absenceState.today[employeeId] || 
                addedState.today[employeeId]) {
                showNotification(`${employee.fullName} is already scheduled or absent`, 'warning');
                return;
            }

            // Create employee element
            const employeeElement = createEmployeeElement(employee);
            employeeElement.classList.add('added-schedule');
            employeeElement.setAttribute('draggable', 'false');

            // Add to appropriate list
            const targetList = document.getElementById(`${day}-added`);
            targetList.appendChild(employeeElement);

            // Update state
            const defaultTour = employee.tour || '';
            addedState[day][employeeId] = { reason: '', shield: '', tour: defaultTour };

            // Add controls
            addAddedControls(employeeElement, '', '', defaultTour);

            // Add tour info to display with animation
            if (defaultTour) {
                const tourInfo = document.createElement('span');
                tourInfo.className = 'added-tour-info';
                tourInfo.textContent = `T${defaultTour}`;
                const nameSpan = employeeElement.querySelector('.employee-name');
                if (nameSpan) {
                    nameSpan.appendChild(tourInfo);
                    tourInfo.style.opacity = '0';
                    tourInfo.style.transform = 'scale(0.5)';
                    setTimeout(() => {
                        tourInfo.style.transition = 'all 0.3s ease';
                        tourInfo.style.opacity = '1';
                        tourInfo.style.transform = 'scale(1)';
                    }, 100);
                }
            }            // Add success animation to the new item
            employeeElement.style.opacity = '0';
            employeeElement.style.transform = 'translateY(-20px)';
            employeeElement.classList.add('new-addition');
            setTimeout(() => {
                employeeElement.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
                employeeElement.style.opacity = '1';
                employeeElement.style.transform = 'translateY(0)';
            }, 50);

            // Remove the new-addition class after animation
            setTimeout(() => {
                employeeElement.classList.remove('new-addition');
            }, 2500);            // Refresh lists and save
            populateSideLists();
            applyFiltersAndPopulate(); // This will remove the employee from main list
            updateSummary();
            saveState();            // Show success notification
            showNotification(`${employee.fullName} added to Today`, 'success');
        }

        function showSearchDropdown(dropdownId) {
            const dropdown = document.getElementById(dropdownId);
            if (dropdown) {
                dropdown.classList.remove('hidden');
            }
        }

        function hideSearchDropdown(dropdownId) {
            const dropdown = document.getElementById(dropdownId);
            if (dropdown) {
                dropdown.classList.add('hidden');
            }
        }

        function setupAbsentSearchInput(inputId, dropdownId) {
            const searchInput = document.getElementById(inputId);
            const searchDropdown = document.getElementById(dropdownId);
            
            if (!searchInput || !searchDropdown) return;

            let searchTimeout;

            searchInput.addEventListener('input', (e) => {
                clearTimeout(searchTimeout);
                const query = e.target.value.trim().toLowerCase();
                
                if (query.length < 2) {
                    hideSearchDropdown(dropdownId);
                    return;
                }

                searchTimeout = setTimeout(() => {
                    performAbsentEmployeeSearch(query, dropdownId);
                }, 300);
            });

            searchInput.addEventListener('blur', (e) => {
                // Delay hiding to allow clicks on dropdown
                setTimeout(() => {
                    if (!searchDropdown.contains(document.activeElement)) {
                        hideSearchDropdown(dropdownId);
                    }
                }, 200);
            });

            searchInput.addEventListener('focus', (e) => {
                const query = e.target.value.trim().toLowerCase();
                if (query.length >= 2) {
                    performAbsentEmployeeSearch(query, dropdownId);
                }
            });
        }

        function performAbsentEmployeeSearch(query, dropdownId) {
            const searchDropdown = document.getElementById(dropdownId);
            if (!searchDropdown) return;

            // Filter employees who aren't already in today absent or added list
            const availableEmployees = allEmployees.filter(emp => {
                const nameMatch = emp.fullName.toLowerCase().includes(query) || 
                                 emp.lastName.toLowerCase().includes(query) ||
                                 emp.firstName.toLowerCase().includes(query) ||
                                 (emp.shield && emp.shield.toString().includes(query));

                const notInAnyList = !emp.id || (!absenceState.today[emp.id] && 
                                   !addedState.today[emp.id]);

                return nameMatch && notInAnyList;
            });

            if (availableEmployees.length === 0) {
                hideSearchDropdown(dropdownId);
                return;
            }

            // Sort by relevance (exact matches first, then partial)
            availableEmployees.sort((a, b) => {
                const aExact = a.fullName.toLowerCase().startsWith(query);
                const bExact = b.fullName.toLowerCase().startsWith(query);
                if (aExact && !bExact) return -1;
                if (!aExact && bExact) return 1;
                return a.fullName.localeCompare(b.fullName);
            });

            // Limit results
            const limitedResults = availableEmployees.slice(0, 8);

            // Populate dropdown
            searchDropdown.innerHTML = '';
            limitedResults.forEach(emp => {
                const resultItem = createAbsentSearchResultItem(emp);
                searchDropdown.appendChild(resultItem);
            });

            showSearchDropdown(dropdownId);
        }

        function createAbsentSearchResultItem(employee) {
            const item = document.createElement('div');
            item.className = 'search-result-item';

            const infoDiv = document.createElement('div');
            
            const nameSpan = document.createElement('span');
            nameSpan.className = 'search-result-name';
            nameSpan.textContent = employee.fullName;
            
            const detailsSpan = document.createElement('span');
            detailsSpan.className = 'search-result-details';
            detailsSpan.textContent = `${employee.function || 'N/A'} | T${employee.tour || '?'} | ${employee.shield || 'No Shield'}`;
            
            infoDiv.appendChild(nameSpan);
            infoDiv.appendChild(document.createElement('br'));
            infoDiv.appendChild(detailsSpan);

            const addBtn = document.createElement('button');
            addBtn.className = 'search-result-add-btn action-btn';
            addBtn.textContent = 'Mark Absent';
            addBtn.onclick = (e) => {
                e.stopPropagation();
                addEmployeeToAbsent(employee.id);
                hideSearchDropdown('absent-search-dropdown');
                clearAbsentSearchInput();
            };

            item.appendChild(infoDiv);
            item.appendChild(addBtn);

            return item;
        }

        function addEmployeeToAbsent(employeeId) {
            const employee = allEmployees.find(emp => emp.id === employeeId);
            if (!employee) return;

            // Check if employee is already in any list
            if (absenceState.today[employeeId] || 
                addedState.today[employeeId]) {
                showNotification(`${employee.fullName} is already scheduled or absent`, 'warning');
                return;
            }

            // Create employee element
            const employeeElement = createEmployeeElement(employee);
            employeeElement.classList.add('absent');
            employeeElement.setAttribute('draggable', 'false');

            // Add to absent list
            const absentList = document.getElementById('today-absent');
            absentList.appendChild(employeeElement);

            // Update state with default reason
            absenceState.today[employeeId] = '';

            // Update schedule data for today
            const memberName = `${employee.lastName}, ${employee.firstName}`;
            const todayKey = formatDateKey(new Date(currentDisplayDate));
            if (!scheduleData[todayKey]) {
                scheduleData[todayKey] = {};
            }
            scheduleData[todayKey][memberName] = ''; // Empty reason initially
            saveScheduleData();

            // Add controls for reason selection
            addAbsenceControls(employeeElement, '');

            // Add success animation to the new item
            employeeElement.style.opacity = '0';
            employeeElement.style.transform = 'translateY(-20px)';
            employeeElement.classList.add('new-addition');
            setTimeout(() => {
                employeeElement.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
                employeeElement.style.opacity = '1';
                employeeElement.style.transform = 'translateY(0)';
            }, 50);

            // Remove the new-addition class after animation
            setTimeout(() => {
                employeeElement.classList.remove('new-addition');
            }, 2500);

            // Track leave usage for statistics
            trackLeaveUsage(employeeId, '');

            // Refresh lists, schedule table, and save
            populateSideLists();
            applyFiltersAndPopulate(); // This will remove the employee from main list
            updateSummary();
            renderScheduleTable();
            saveState();

            // Show success notification
            showNotification(`${employee.fullName} marked as absent`, 'success');
        }

        function clearAbsentSearchInput() {
            const searchInput = document.getElementById('absent-employee-search');
            if (searchInput) {
                searchInput.value = '';
            }
        }        // --- Enhanced Statistics Functions (Stubs for full functionality) ---

        function initializeStatisticsSearchFunctionality() {
            // Statistics functionality stub - can be expanded when full stats HTML is present
            // This prevents errors when stats panel is not fully implemented
            if (typeof statsEmployeeSearch !== 'undefined' && statsEmployeeSearch) {
                // Add search functionality here when needed
            }
        }

        function initializeFilterDropdowns() {
            // Filter dropdowns stub - can be expanded when full stats HTML is present
            if (typeof functionFiltersContainer !== 'undefined' && functionFiltersContainer) {
                // Initialize function filters here when needed
            }
        }

        function applyEnhancedFilters() {
            // Enhanced filters stub - can be expanded when full stats HTML is present
            if (typeof statsFilters !== 'undefined') {
                // Apply filters here when needed
            }
        }

        function updateStatisticsDisplay() {
            if (!statisticsPanelFull) return;
            
            const today = new Date();
            const dateStr = today.toDateString();
            
            // Calculate working platoons for today
            const workingPlatoons = getWorkingPlatoonsForDate(today);
            
            // Filter employees by working status
            const workingEmployees = allEmployees.filter(emp => 
                emp.platoon && workingPlatoons.includes(emp.platoon)
            );
            const offDutyEmployees = allEmployees.filter(emp => 
                !emp.platoon || !workingPlatoons.includes(emp.platoon)
            );
            
            // Get absence data
            const absenceData = absenceState.today || {};
            const absentEmployees = workingEmployees.filter(emp => absenceData[emp.id]);
            const presentEmployees = workingEmployees.filter(emp => !absenceData[emp.id]);
            
            // Get addition data  
            const additionData = addedState.today || {};
            const addedEmployees = Object.keys(additionData);
            
            // Calculate statistics by function
            const functionStats = {};
            allEmployees.forEach(emp => {
                const func = emp.function || 'Unknown';
                if (!functionStats[func]) {
                    functionStats[func] = {
                        total: 0,
                        working: 0,
                        present: 0,
                        absent: 0,
                        offDuty: 0,
                        added: 0
                    };
                }
                
                functionStats[func].total++;
                
                if (workingPlatoons.includes(emp.platoon)) {
                    functionStats[func].working++;
                    if (absenceData[emp.id]) {
                        functionStats[func].absent++;
                    } else {
                        functionStats[func].present++;
                    }
                } else {
                    functionStats[func].offDuty++;
                }
                
                if (additionData[emp.id]) {
                    functionStats[func].added++;
                }
            });
            
            // Calculate tour statistics
            const tourStats = { '1': {total: 0, working: 0, present: 0, absent: 0}, 
                               '2': {total: 0, working: 0, present: 0, absent: 0}, 
                               '3': {total: 0, working: 0, present: 0, absent: 0} };
            
            allEmployees.forEach(emp => {
                const tour = emp.tour || 'Unknown';
                if (tourStats[tour]) {
                    tourStats[tour].total++;
                    if (workingPlatoons.includes(emp.platoon)) {
                        tourStats[tour].working++;
                        if (absenceData[emp.id]) {
                            tourStats[tour].absent++;
                        } else {
                            tourStats[tour].present++;
                        }
                    }
                }
            });
            
            // Generate HTML content
            let statsContent = `
                <div style="background-color: var(--dm-panel-bg); border: 2px solid var(--dm-border-color); border-radius: 8px; padding: 20px; margin: 20px;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h2>EMS Staffing Statistics - ${dateStr}</h2>
                        <button id="stats-back-btn" class="action-btn" style="background-color: var(--dm-secondary-color);">Back to Main View</button>
                    </div>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px;">
                        <!-- Overall Summary -->
                        <div class="stats-card">
                            <h3>Overall Summary</h3>
                            <div class="stats-grid">
                                <div class="stat-item">
                                    <span class="stat-label">Total Employees:</span>
                                    <span class="stat-value">${allEmployees.length}</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">Working Today:</span>
                                    <span class="stat-value">${workingEmployees.length}</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">Present:</span>
                                    <span class="stat-value" style="color: #27ae60;">${presentEmployees.length}</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">Absent:</span>
                                    <span class="stat-value" style="color: #e74c3c;">${absentEmployees.length}</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">Off Duty:</span>
                                    <span class="stat-value" style="color: #95a5a6;">${offDutyEmployees.length}</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">Added to Schedule:</span>
                                    <span class="stat-value" style="color: #3498db;">${addedEmployees.length}</span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Platoon Information -->
                        <div class="stats-card">
                            <h3>Platoon Status</h3>
                            <div class="stats-grid">
                                <div class="stat-item">
                                    <span class="stat-label">Working Platoons:</span>
                                    <span class="stat-value">${workingPlatoons || 'None'}</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">Staffing Level:</span>
                                    <span class="stat-value">${workingEmployees.length > 0 ? Math.round((presentEmployees.length / workingEmployees.length) * 100) : 0}%</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Tour Statistics -->
                    <div class="stats-section">
                        <h3>Tour Breakdown</h3>
                        <table class="stats-table">
                            <thead>
                                <tr>
                                    <th>Tour</th>
                                    <th>Total</th>
                                    <th>Working</th>
                                    <th>Present</th>
                                    <th>Absent</th>
                                    <th>Availability</th>
                                </tr>
                            </thead>
                            <tbody>`;
            
            ['1', '2', '3'].forEach(tour => {
                const stats = tourStats[tour];
                const availability = stats.working > 0 ? Math.round((stats.present / stats.working) * 100) : 0;
                statsContent += `
                    <tr>
                        <td>Tour ${tour}</td>
                        <td>${stats.total}</td>
                        <td>${stats.working}</td>
                        <td style="color: #27ae60;">${stats.present}</td>
                        <td style="color: #e74c3c;">${stats.absent}</td>
                        <td>${availability}%</td>
                    </tr>`;
            });
            
            statsContent += `
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Function Statistics -->
                    <div class="stats-section">
                        <h3>Function Breakdown</h3>
                        <table class="stats-table">
                            <thead>
                                <tr>
                                    <th>Function</th>
                                    <th>Total</th>
                                    <th>Working</th>
                                    <th>Present</th>
                                    <th>Absent</th>
                                    <th>Off Duty</th>
                                    <th>Added</th>
                                </tr>
                            </thead>
                            <tbody>`;
            
            Object.entries(functionStats).sort().forEach(([func, stats]) => {
                statsContent += `
                    <tr>
                        <td>${func}</td>
                        <td>${stats.total}</td>
                        <td>${stats.working}</td>
                        <td style="color: #27ae60;">${stats.present}</td>
                        <td style="color: #e74c3c;">${stats.absent}</td>
                        <td style="color: #95a5a6;">${stats.offDuty}</td>
                        <td style="color: #3498db;">${stats.added}</td>
                    </tr>`;
            });
            
            statsContent += `
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Leave Usage Statistics -->
                    <div class="stats-section">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                            <h3>Leave Usage Statistics</h3>
                            <div style="display: flex; gap: 10px; align-items: center;">
                                <button onclick="updateLeaveStatsPeriod(7)" class="stats-period-btn ${currentLeaveStatsPeriod === 7 ? 'active' : ''}">7 Days</button>
                                <button onclick="updateLeaveStatsPeriod(30)" class="stats-period-btn ${currentLeaveStatsPeriod === 30 ? 'active' : ''}">30 Days</button>
                                <button onclick="updateLeaveStatsPeriod(90)" class="stats-period-btn ${currentLeaveStatsPeriod === 90 ? 'active' : ''}">90 Days</button>
                                <button onclick="updateLeaveStatsPeriod(365)" class="stats-period-btn ${currentLeaveStatsPeriod === 365 ? 'active' : ''}">1 Year</button>
                            </div>
                        </div>
                        <div style="display: flex; gap: 10px; margin-bottom: 15px; flex-wrap: wrap; align-items: center;">
                            <label style="font-weight: 500;">Filters:</label>
                            <select id="stats-function-filter" onchange="updateStatisticsDisplay()" style="padding: 5px;">
                                <option value="">All Functions</option>
                                ${[...new Set(allEmployees.map(e => e.function).filter(Boolean))].sort().map(func => 
                                    `<option value="${func}">${func}</option>`
                                ).join('')}
                            </select>
                            <select id="stats-tour-filter-display" onchange="updateStatisticsDisplay()" style="padding: 5px;">
                                <option value="">All Tours</option>
                                <option value="1">Tour 1</option>
                                <option value="2">Tour 2</option>
                                <option value="3">Tour 3</option>
                            </select>
                            <select id="stats-platoon-filter-display" onchange="updateStatisticsDisplay()" style="padding: 5px;">
                                <option value="">All Platoons</option>
                                ${[...new Set(allEmployees.map(e => e.platoon).filter(Boolean))].sort().map(plt => 
                                    `<option value="${plt}">Platoon ${plt}</option>`
                                ).join('')}
                            </select>
                            <label style="margin-left: 10px;"><input type="checkbox" id="stats-show-only-leave" onchange="updateStatisticsDisplay()"> Show Only With Leave</label>
                            <button onclick="clearStatsFilters()" class="action-btn" style="background-color: var(--dm-secondary-color); padding: 5px 10px;">Clear Filters</button>
                        </div>
                        <table class="stats-table">
                            <thead>
                                <tr>
                                    <th>Employee</th>
                                    <th>Function</th>
                                    <th>Total Days</th>
                                    <th>Sick Days</th>
                                    <th>Other Days</th>
                                    <th>Usage Rate</th>
                                </tr>
                            </thead>
                            <tbody>`;
            
            // Get filter values
            const functionFilter = document.getElementById('stats-function-filter')?.value || '';
            const tourFilter = document.getElementById('stats-tour-filter-display')?.value || '';
            const platoonFilter = document.getElementById('stats-platoon-filter-display')?.value || '';
            const showOnlyLeave = document.getElementById('stats-show-only-leave')?.checked || false;
            
            // Calculate leave statistics for each employee (show all employees with leave data or working today)
            let hasLeaveData = false;
            const employeesToShow = allEmployees.filter(emp => {
                // Apply filters
                if (functionFilter && emp.function !== functionFilter) return false;
                if (tourFilter && emp.tour !== tourFilter) return false;
                if (platoonFilter && emp.platoon !== platoonFilter) return false;
                
                const leaveStats = calculateEmployeeLeaveStats(emp.id, currentLeaveStatsPeriod);
                const isWorkingToday = workingPlatoons.includes(emp.platoon);
                
                if (showOnlyLeave) {
                    return leaveStats.totalDays > 0;
                }
                
                return leaveStats.totalDays > 0 || isWorkingToday;
            });
            
            employeesToShow.forEach(emp => {
                const leaveStats = calculateEmployeeLeaveStats(emp.id, currentLeaveStatsPeriod);
                hasLeaveData = true;
                
                // Color code based on usage level
                let usageColor = '#27ae60'; // Green for low usage
                if (leaveStats.percentage > 15) usageColor = '#e74c3c'; // Red for high usage
                else if (leaveStats.percentage > 10) usageColor = '#f39c12'; // Orange for medium usage
                
                statsContent += `
                    <tr>
                        <td>${emp.fullName}</td>
                        <td>${emp.function || 'N/A'}</td>
                        <td>${leaveStats.totalDays}</td>
                        <td style="color: #e74c3c;">${leaveStats.sickDays}</td>
                        <td>${leaveStats.otherDays}</td>
                        <td style="color: ${usageColor}; font-weight: bold;">${leaveStats.percentage}%</td>
                    </tr>`;
            });
            
            if (!hasLeaveData) {
                statsContent += `
                    <tr>
                        <td colspan="6" style="text-align: center; font-style: italic; color: #95a5a6;">
                            No employees with leave data or working today
                        </td>
                    </tr>`;
            }
            
            statsContent += `
                            </tbody>
                        </table>
                    </div>
                </div>`;
            
            // Update the statistics panel content
            statisticsPanelFull.innerHTML = statsContent;
            
            // Re-bind the back button
            const statsBackBtn = document.getElementById('stats-back-btn');
            if (statsBackBtn) {
                statsBackBtn.addEventListener('click', toggleStatisticsFullView);
            }
        }
        
        /** Updates leave statistics display for different time periods */
        function updateLeaveStatsPeriod(days) {
            currentLeaveStatsPeriod = days;
            
            // Update button states
            document.querySelectorAll('.stats-period-btn').forEach(btn => {
                btn.classList.remove('active');
                // Check if button text contains the days value
                if ((days === 7 && btn.textContent.includes('7')) ||
                    (days === 30 && btn.textContent.includes('30')) ||
                    (days === 90 && btn.textContent.includes('90')) ||
                    (days === 365 && btn.textContent.includes('Year'))) {
                    btn.classList.add('active');
                }
            });
            
            // Update the statistics display with new period
            updateStatisticsDisplay();
        }
        
        /** Clears all statistics filters */
        function clearStatsFilters() {
            const functionFilter = document.getElementById('stats-function-filter');
            const tourFilter = document.getElementById('stats-tour-filter-display');
            const platoonFilter = document.getElementById('stats-platoon-filter-display');
            const showOnlyLeave = document.getElementById('stats-show-only-leave');
            
            if (functionFilter) functionFilter.value = '';
            if (tourFilter) tourFilter.value = '';
            if (platoonFilter) platoonFilter.value = '';
            if (showOnlyLeave) showOnlyLeave.checked = false;
            
            updateStatisticsDisplay();
        }
        
        function trackLeaveUsage(employeeId, reason, date = null) {
            const useDate = date || new Date();
            const dateKey = useDate.toISOString().split('T')[0]; // YYYY-MM-DD format
            
            // Initialize employee's leave stats if not exists
            if (!leaveUsageStats[employeeId]) {
                leaveUsageStats[employeeId] = {
                    totalDays: 0,
                    entries: {}
                };
            }
            
            // Store the leave entry
            leaveUsageStats[employeeId].entries[dateKey] = {
                reason: reason || 'Unspecified',
                date: dateKey,
                timestamp: new Date().toISOString()
            };
            
            // Recalculate total days
            leaveUsageStats[employeeId].totalDays = Object.keys(leaveUsageStats[employeeId].entries).length;
            
            // Save to localStorage
            saveLeaveUsageStats();
        }
        function calculateEmployeeLeaveStats(employeeId, periodDays = 30) {
            if (!leaveUsageStats[employeeId]) {
                return {
                    totalDays: 0,
                    sickDays: 0,
                    otherDays: 0,
                    percentage: 0,
                    sickPercentage: 0
                };
            }
            
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - periodDays);
            const cutoffDateStr = cutoffDate.toISOString().split('T')[0];
            
            let totalDays = 0;
            let sickDays = 0;
            let otherDays = 0;
            
            // Count days within the period
            Object.entries(leaveUsageStats[employeeId].entries).forEach(([dateKey, entry]) => {
                if (dateKey >= cutoffDateStr) {
                    totalDays++;
                    const reason = (entry.reason || '').toLowerCase();
                    if (reason.includes('sick') || reason.includes('illness') || reason.includes('medical')) {
                        sickDays++;
                    } else {
                        otherDays++;
                    }
                }
            });
            
            // Calculate percentages (assuming standard work year)
            const workingDaysInPeriod = Math.floor(periodDays * 5 / 7); // Rough estimate
            const percentage = workingDaysInPeriod > 0 ? Math.round((totalDays / workingDaysInPeriod) * 100) : 0;
            const sickPercentage = totalDays > 0 ? Math.round((sickDays / totalDays) * 100) : 0;
            
            return {
                totalDays,
                sickDays,
                otherDays,
                percentage,
                sickPercentage
            };
        }
        function saveLeaveUsageStats() {
            try {
                localStorage.setItem(LS_KEYS.LEAVE_STATS, JSON.stringify(leaveUsageStats));
            } catch (error) {
                console.error('Failed to save leave usage stats:', error);
            }
        }
        function loadLeaveUsageStats() {
            try {
                const stored = localStorage.getItem(LS_KEYS.LEAVE_STATS);
                if (stored) {
                    leaveUsageStats = JSON.parse(stored);
                } else {
                    leaveUsageStats = {};
                }
            } catch (error) {
                console.error('Failed to load leave usage stats:', error);
                leaveUsageStats = {};
            }
        }
        function loadStatisticsData() {
            // Stubbed for now
        }
        function saveStatisticsData() {
            // Stubbed for now
        }

        /** Handles CSV file loading */
        function handleCSVLoad() {
            const file = csvFileInput.files[0];
            if (!file) {
                showNotification('Please select a CSV file first', 'warning');
                return;
            }

            if (!file.name.toLowerCase().endsWith('.csv')) {
                showNotification('Please select a valid CSV file', 'error');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const csvData = e.target.result;
                    const newEmployees = parseEmployeeData(csvData);
                    
                    if (newEmployees.length === 0) {
                        showNotification('No valid employees found in CSV file', 'error');
                        return;
                    }                    // Assign unique IDs with better error handling
                    newEmployees.forEach((employee, index) => {
                        let empId;
                        // Check if this is an auto-generated shield or real shield
                        if (employee.shield && !employee.shield.startsWith('auto-')) {
                            empId = `emp-shield-${employee.shield}`;
                        } else {
                            empId = `emp-idx-${index}`;
                        }
                        employee.id = empId;
                        
                        // Ensure vax property exists
                        if (employee.vax === undefined) {
                            employee.vax = '';
                        }
                          // Ensure all required properties exist
                        employee.dob = employee.dob || '';
                        employee.approvedPositions = employee.approvedPositions || '';
                        employee.firstName = employee.firstName || 'Unknown';
                        employee.lastName = employee.lastName || 'Employee';
                        employee.fullName = employee.fullName || `${employee.firstName} ${employee.lastName}`;
                        employee.function = employee.function || 'Other';
                        employee.tour = employee.tour || 'Unknown';
                        employee.platoon = employee.platoon || 'Unknown';
                        employee.startTime = normalizeTimeForStorage(employee.startTime || '');
                        employee.status = employee.status || 'Active';
                    });

                    // Update employee data
                    allEmployees = newEmployees;
                    displayedEmployees = [...allEmployees];                    isUsingCSVData = true;                    // Clear any existing state for old employees
                    absenceState = { today: {}, tomorrow: {} };
                    addedState = { today: {}, tomorrow: {} };

                    // Update UI                    
                    updateEmployeeCountDisplay();
                    populateFilters();
                    applyFiltersAndPopulate();
                    populateSideLists();
                    updateSummary();
                    saveState();

                    showNotification(`Successfully loaded ${newEmployees.length} employees from CSV`, 'success');
                    
                    // Update CSV status
                    updateCSVStatus(`Loaded from: ${file.name}`, 'success');
                    
                    // Update enhanced statistics after data load
                    setTimeout(() => {
                        try {
                            // updateEnhancedStatisticsDisplay(); // Stubbed call
                        } catch (error) {
                            console.error('Error updating enhanced statistics after CSV load:', error);
                        }
                    }, 300);

                } catch (error) {
                    console.error('Error processing CSV file:', error);
                    showNotification('Error processing CSV file. Please check the format.', 'error');
                    updateCSVStatus('Error loading CSV file', 'error');
                }
            };

            reader.onerror = function() {
                showNotification('Error reading file', 'error');
                updateCSVStatus('Error reading file', 'error');
            };

            reader.readAsText(file);
        }

        /** Handles clearing employee data and reverting to hardcoded data */
        function handleClearData() {
            if (!confirm('Are you sure you want to clear the current data and revert to default employees?')) {
                return;
            }

            // Revert to original hardcoded data (Note: Since no hardcoded data was provided in the prompt, 
            // this will likely result in an empty list if no CSV was loaded prior, which is safe.)
            allEmployees = [...originalHardcodedData];
              // Reassign IDs and ensure all properties exist
            allEmployees.forEach((employee, index) => {
                const empId = employee.shield ? `emp-shield-${employee.shield}` : `emp-idx-${index}`;
                employee.id = empId;
                if (employee.vax === undefined) {
                    employee.vax = '';
                }
                // Ensure new fields exist for backward compatibility
                if (employee.dob === undefined) {
                    employee.dob = '';
                }
                if (employee.approvedPositions === undefined) {
                    employee.approvedPositions = '';
                }
            });

            displayedEmployees = [...allEmployees];
            isUsingCSVData = false;            // Clear states
            absenceState = { today: {}, tomorrow: {} };
            addedState = { today: {}, tomorrow: {} };

            // Update UI
            updateEmployeeCountDisplay();
            populateFilters();
            applyFiltersAndPopulate();
            populateSideLists();
            updateSummary();
            saveState();

            // Clear file input
            csvFileInput.value = '';

            showNotification('Data cleared and reverted to default employees', 'success');
            updateCSVStatus('Using default employee data', 'default');
        }

        /** Updates the employee count display */
        function updateEmployeeCountDisplay() {
            if (employeeCountDisplay) {
                employeeCountDisplay.textContent = allEmployees.length;
            }
        }        /** Updates CSV status message */
        function updateCSVStatus(message, type = 'default') {
            if (csvStatus) {
                const statusElement = csvStatus.querySelector('#csv-employee-count');
                if (statusElement) {
                    const count = `Current: <strong>${allEmployees.length}</strong> employees loaded`;
                    const typeMessage = ` (${message})`;
                    statusElement.innerHTML = count + typeMessage;
                    
                    // Add color coding based on type
                    if (type === 'success') {
                        statusElement.style.color = 'var(--success-color)';
                    } else if (type === 'error') {
                        statusElement.style.color = 'var(--danger-color)';
                    } else if (type === 'warning') {
                        statusElement.style.color = 'var(--warning-color)';
                    } else {
                        statusElement.style.color = 'var(--dm-secondary-color)';
                    }
                }
            }
        }

        /** Clear search input */
        function clearSearchInput(day) {
            const input = document.getElementById(`${day}-employee-search`);
            if (input) {
                input.value = '';
            }
        }

        /** Applies the theme (light/dark) */
        function applyTheme(theme) {
            const darkModeSwitch = document.getElementById('dark-mode-switch');
            if (theme === 'dark') {
                document.body.classList.add('dark-mode');
                if (darkModeSwitch) darkModeSwitch.checked = true;
            } else {
                document.body.classList.remove('dark-mode');
                if (darkModeSwitch) darkModeSwitch.checked = false;
            }
        }

        /** Saves the current application state to localStorage, including history */
        function saveState() {
            try {
                // --- History Management ---                // Get current state that will become history on next load
                const currentSessionData = {
                    timestamp: Date.now(), // Mark when this session's data was saved
                    absences: JSON.parse(JSON.stringify(absenceState)), // Deep copy
                    added: JSON.parse(JSON.stringify(addedState)) // Deep copy
                };

                // Load existing history
                let existingHistory = [];
                const savedHistory = localStorage.getItem(LS_KEYS.HISTORY);
                if (savedHistory) {
                    try {
                        existingHistory = JSON.parse(savedHistory);
                        if (!Array.isArray(existingHistory)) existingHistory = [];
                    } catch { existingHistory = []; }
                }                // Add current session data to the start of the history
                // Avoid adding duplicate session data if state hasn't changed significantly (simple check)
                const hasAbsences = Object.keys(currentSessionData.absences.today).length > 0 || Object.keys(currentSessionData.absences.tomorrow).length > 0;
                const hasAdded = Object.keys(currentSessionData.added.today).length > 0 || Object.keys(currentSessionData.added.tomorrow).length > 0;
                const hasAnyData = hasAbsences || hasAdded;
                
                // Only add to history if there's actually data and it's different from the last session
                if (hasAnyData && (JSON.stringify(currentSessionData.absences) !== JSON.stringify(existingHistory[0]?.absences) ||
                    JSON.stringify(currentSessionData.added) !== JSON.stringify(existingHistory[0]?.added))) {
                    existingHistory.unshift(currentSessionData);
                }

                // Keep only the last 2 sessions
                historyState = existingHistory.slice(0, 2);

                // Cap total items (across both sessions) - More precise capping
                let totalItemsCount = 0;
                const cappedHistory = [];
                for (const session of historyState) {
                    const sessionItems = [];                    // Collect items from this session
                    const day = 'today'; // Only handle today now
                    Object.entries(session.absences[day]).forEach(([empId, reason]) => {
                        if (totalItemsCount < 30) {
                            sessionItems.push({ empId, type: 'absent', day, reason, shield: '' });
                            totalItemsCount++;
                        }
                    });
                    Object.entries(session.added[day]).forEach(([empId, data]) => {
                         if (totalItemsCount < 30) {
                            sessionItems.push({ empId, type: 'added', day, reason: data.reason, shield: data.shield });
                            totalItemsCount++;
                        }
                    });
                    if (sessionItems.length > 0) {
                         // Reconstruct session data with potentially pruned items
                         const prunedSession = { timestamp: session.timestamp, absences: { today: {}, tomorrow: {} }, added: { today: {}, tomorrow: {} } };
                         sessionItems.forEach(item => {
                             if (item.type === 'absent') {
                                 prunedSession.absences[item.day][item.empId] = item.reason;
                             } else {
                                 prunedSession.added[item.day][item.empId] = { reason: item.reason, shield: item.shield };
                             }
                         });
                         cappedHistory.push(prunedSession);
                    }
                     if (totalItemsCount >= 30) break; // Stop if we hit the cap
                }
                historyState = cappedHistory; // Use the capped version                localStorage.setItem(LS_KEYS.HISTORY, JSON.stringify(historyState));
                // --- End History Management ---

                // Update the history display immediately after updating historyState
                populateHistory();

                // Save employee list (might be large)
                localStorage.setItem(LS_KEYS.EMPLOYEES, JSON.stringify(allEmployees));

                // Save absence and added states
                localStorage.setItem(LS_KEYS.ABSENCES, JSON.stringify(absenceState));
                localStorage.setItem(LS_KEYS.ADDED, JSON.stringify(addedState));

                // Save reasons
                localStorage.setItem(LS_KEYS.REASONS, JSON.stringify(absenceReasons));

                // Save filters
                const functionCheckboxes = {};
                functionFilterContainer.querySelectorAll('input[type="checkbox"]').forEach(cb => {
                    functionCheckboxes[cb.value] = cb.checked;
                });
                const tourCheckboxes = {};
                if (tourFilterContainer) {
                    tourFilterContainer.querySelectorAll('input[type="checkbox"]').forEach(cb => {
                        tourCheckboxes[cb.value] = cb.checked;
                    });
                }
                const filterState = {
                    functions: functionCheckboxes,
                    tours: tourCheckboxes,
                    workingToday: workingTodayCheckbox.checked,
                    hideInactive: hideInactiveCheckbox.checked
                };
                localStorage.setItem(LS_KEYS.FILTERS, JSON.stringify(filterState));

                // Save summary section order
                const currentOrder = Array.from(summaryContent.querySelectorAll('.summary-section'))
                                        .map(section => section.dataset.sectionId); // Use data-sectionId
                localStorage.setItem(LS_KEYS.SUMMARY_ORDER, JSON.stringify(currentOrder));

                // Save theme preference
                const currentTheme = document.body.classList.contains('dark-mode') ? 'dark' : 'light';
                localStorage.setItem(LS_KEYS.THEME, currentTheme);

            } catch (error) {
                console.error("Error saving state to localStorage:", error);
                // Optionally notify the user if storage fails (e.g., quota exceeded)
            }
        }

        /** Loads application state from localStorage */
        function loadState() {
             try {
                // Load employees
                const savedEmployees = localStorage.getItem(LS_KEYS.EMPLOYEES);
                if (savedEmployees) {
                    const parsedEmployees = JSON.parse(savedEmployees);
                    // Basic validation: check if it's an array
                    if (Array.isArray(parsedEmployees)) {
                        allEmployees = parsedEmployees;
                        // Re-assign IDs just in case they weren't saved correctly or format changed
                        allEmployees.forEach((employee, index) => {
                            const empId = employee.shield ? `emp-shield-${employee.shield}` : `emp-idx-${index}`;
                            employee.id = empId;
                            // Ensure vax property exists, default to empty string if not
                            if (employee.vax === undefined) {
                                employee.vax = '';
                            }
                            // Normalize startTime to consistent format
                            if (employee.startTime) {
                                employee.startTime = normalizeTimeForStorage(employee.startTime);
                            }
                        });
                    } else {
                         console.warn("Invalid employee data found in localStorage. Using default.");
                         // Keep default allEmployees
                    }
                }

                // Load absences
                const savedAbsences = localStorage.getItem(LS_KEYS.ABSENCES);
                if (savedAbsences) {
                    const parsedAbsences = JSON.parse(savedAbsences);
                    // Basic validation
                    if (parsedAbsences && typeof parsedAbsences.today === 'object' && typeof parsedAbsences.tomorrow === 'object') {
                        absenceState = parsedAbsences;
                    } else {
                        console.warn("Invalid absence data found in localStorage. Using default.");
                    }
                }                 // Load added state
                const savedAdded = localStorage.getItem(LS_KEYS.ADDED);
                if (savedAdded) {
                    const parsedAdded = JSON.parse(savedAdded);
                     // Basic validation - check if values are objects with reason/shield
                    if (parsedAdded && typeof parsedAdded.today === 'object') {
                        // Ensure nested structure is correct
                        Object.keys(parsedAdded.today).forEach(id => {
                            if (typeof parsedAdded.today[id] !== 'object' || parsedAdded.today[id] === null) {
                                parsedAdded.today[id] = { reason: '', shield: '' }; // Fix if structure is wrong
                            }                        });
                        
                        // Remove tomorrow structure if it exists from old saves
                        if (parsedAdded.tomorrow) {
                            delete parsedAdded.tomorrow;
                        }
                        
                        addedState = parsedAdded;
                    } else {
                        console.warn("Invalid added schedule data found in localStorage. Using default.");
                    }
                }


                // Load reasons
                const savedReasons = localStorage.getItem(LS_KEYS.REASONS);
                if (savedReasons) {
                    const parsedReasons = JSON.parse(savedReasons);
                    if (Array.isArray(parsedReasons)) {
                        absenceReasons = parsedReasons; // Overwrite default with saved
                    } else {
                         console.warn("Invalid reasons data found in localStorage. Using default.");
                    }
                }

                // Load filters
                const savedFilters = localStorage.getItem(LS_KEYS.FILTERS);
                if (savedFilters) {
                    const parsedFilters = JSON.parse(savedFilters);
                    if (parsedFilters) {
                        // Restore filter states are done in populateFilters()
                        // Restore hideInactive checkbox state (default to checked if not saved)
                        if (hideInactiveCheckbox) {
                            hideInactiveCheckbox.checked = parsedFilters.hideInactive !== undefined ? parsedFilters.hideInactive : true;
                        }
                    }
                }

                 // Load summary section order
                const savedOrder = localStorage.getItem(LS_KEYS.SUMMARY_ORDER);
                if (savedOrder) {
                    const parsedOrder = JSON.parse(savedOrder);
                    if (Array.isArray(parsedOrder) && parsedOrder.length === 4) { // Basic check
                        summarySectionOrder = parsedOrder;
                    } else {
                         console.warn("Invalid summary order data found in localStorage. Using default.");
                    }
                }

                // Load History
                const savedHistoryData = localStorage.getItem(LS_KEYS.HISTORY);
                if (savedHistoryData) {
                    try {
                        const parsedHistory = JSON.parse(savedHistoryData);
                        if (Array.isArray(parsedHistory)) {
                            historyState = parsedHistory;
                        } else {
                             console.warn("Invalid history data found in localStorage. Using default.");
                        }
                    } catch (e) {
                         console.warn("Error parsing history data from localStorage. Using default.", e);
                         historyState = [];
                    }
                }
                
                // Load schedule data
                loadScheduleData();
                
            } catch (error) {
                console.error("Error loading state from localStorage:", error);                // Reset to defaults if loading fails catastrophically
                absenceState = { today: {}, tomorrow: {} };
                addedState = { today: {}, tomorrow: {} };
                allEmployees = []; // Initialize as empty array
                absenceReasons = [ /* Default reasons */
                    "Sick", "Vacation", "LOA", "Mutual", "AL", "CT", "MO", "TCO",
                    "FMLA", "LODI", "MEDIC PROMO", "FIRE PROMO", "DETAILED",
                    "RESTRICTED", "OFFSITE"
                ];
                summarySectionOrder = ['tour', 'function', 'funcTour', 'overall'];
                historyState = []; // Reset history on error
                localStorage.removeItem(LS_KEYS.THEME); // Clear theme on error too
            }
        }


        /** Calculates the difference in days between two dates */
        function daysDifference(date1, date2) {
            const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds
            return Math.round(Math.abs((date1 - date2) / oneDay));
        }

        /** Gets the working platoons for a specific date using actual platoon data */
        function getWorkingPlatoonsForDate(targetDate) {
            const normalizedTargetDate = new Date(targetDate);
            normalizedTargetDate.setHours(0, 0, 0, 0);
            
            // Reference date: October 1, 2025 (start of known pattern)
            const referenceDate = new Date(2025, 9, 1); // October 1, 2025
            const diffDays = Math.floor((normalizedTargetDate - referenceDate) / (24 * 60 * 60 * 1000));
            
            let workingPlatoons = [];
            
            // A, B, C Platoons: 15-day rotation cycle
            // Pattern: Work 5 days, Off 2 days, Work 5 days, Off 3 days (total 15 days)
            // C Platoon schedule from Oct 1, 2025:
            // Oct 1-3: Work (days 3-5 of work period 1), Oct 4-6: Off (3 days), Oct 7-11: Work (5 days), Oct 12-13: Off (2 days)
            const abcPlatoons = [
                { name: 'C', offset: 0 },   // C: Days 0-4 work, 5-6 off, 7-11 work, 12-14 off (CORRECTED)
                { name: 'A', offset: 5 },   // A: offset by 5 days from C
                { name: 'B', offset: 10 }   // B: offset by 10 days from C
            ];
            
            abcPlatoons.forEach(platoon => {
                const adjustedDays = diffDays + platoon.offset;
                const cyclePosition = ((adjustedDays % 15) + 15) % 15;
                
                // Shift pattern so Oct 1, 2025 is day 1 of cycle
                // Pattern: Days 1-3 work, Days 4-6 off (3 days), Days 7-11 work (5 days), Days 12-13 off (2 days), Days 14-0 work (2 days of 5-day period)
                const shiftedPosition = (cyclePosition + 1) % 15;
                const isWorking = (shiftedPosition >= 1 && shiftedPosition <= 3) ||     // Oct 1-3 work (3 days)
                                 (shiftedPosition >= 7 && shiftedPosition <= 11) ||    // Oct 7-11 work (5 days)
                                 (shiftedPosition >= 14 || shiftedPosition === 0);     // Days 14-0 work (2 days)
                
                if (isWorking) {
                    workingPlatoons.push(platoon.name);
                }
            });
            
            // Add D platoon (Monday-Friday only)
            const dayOfWeek = normalizedTargetDate.getDay(); // 0=Sunday, 6=Saturday
            if (dayOfWeek >= 1 && dayOfWeek <= 5) { // Monday to Friday
                workingPlatoons.push('D');
            }
            
            // E, F, G, H Platoons: 14-day rotation cycle
            const efghPattern = [
                ['E', 'G'],     // Day 1
                ['E', 'H'],     // Day 2
                ['F', 'H'],     // Day 3
                ['F', 'G'],     // Day 4
                ['F', 'G'],     // Day 5
                ['E', 'G'],     // Day 6
                ['E', 'H'],     // Day 7
                ['F', 'H'],     // Day 8
                ['F', 'G'],     // Day 9
                ['E', 'G'],     // Day 10
                ['E', 'H'],     // Day 11
                ['E', 'H'],     // Day 12
                ['F', 'H'],     // Day 13
                ['F', 'G']      // Day 14
            ];
            
            // Calculate which day in the 14-day cycle
            const efghCycleDay = ((diffDays % 14) + 14) % 14;
            const efghPlatoons = efghPattern[efghCycleDay];
            
            // Add E, F, G, H platoons to working platoons
            workingPlatoons = workingPlatoons.concat(efghPlatoons);
            
            // Sort and join to create final string
            return workingPlatoons.sort().join('');
        }

        /** Updates the display of working platoons based on the current date */
        function updateWorkingPlatoonsDisplay() {
            const workingPlatoonsSpan = document.getElementById('working-platoons');
            const workingPlatoons = getWorkingPlatoonsForDate(new Date(currentDisplayDate));
            
            if (workingPlatoonsSpan) {
                 if (workingTodayCheckbox.checked && workingPlatoons) {
                     workingPlatoonsSpan.textContent = `(${workingPlatoons})`;
                 } else {
                     workingPlatoonsSpan.textContent = workingPlatoons ? `(${workingPlatoons})` : '(N/A)'; // Show platoons regardless of filter state, but highlight if filter is on
                 }
            }
        }

        /** Gets the currently selected functions from the checkboxes */
        function getSelectedFunctions() {
            const selected = [];
            if (functionFilterContainer) {
                 functionFilterContainer.querySelectorAll('input[type="checkbox"]:checked').forEach(checkbox => {
                     selected.push(checkbox.value);
                 });
            }
            return selected;
        }
        
        /** Gets the currently selected tours from the checkboxes */
        function getSelectedTours() {
            const selected = [];
            if (tourFilterContainer) {
                 tourFilterContainer.querySelectorAll('input[type="checkbox"]:checked').forEach(checkbox => {
                     selected.push(checkbox.value);
                 });
            }
            return selected;
        }        /** Applies filters and repopulates the employee list */
        function applyFiltersAndPopulate() {
            if (allEmployees.length === 0) {
                displayedEmployees = [];
                populateEmployeeList();
                return;
            }

            const selectedFunctions = getSelectedFunctions(); // Get array of selected functions
            const selectedTours = getSelectedTours(); // Get array of selected tours
            const showWorkingOnly = workingTodayCheckbox.checked;
            const hideInactive = hideInactiveCheckbox.checked;
            // Use currentDisplayDate for platoon filtering if checkbox is checked
            const workingPlatoons = showWorkingOnly ? getWorkingPlatoonsForDate(new Date(currentDisplayDate)) : null;

            displayedEmployees = allEmployees.filter(emp => {
                 // Check if function is in the selected list (or if no functions are selected, show all)
                const functionMatch = selectedFunctions.length === 0 || selectedFunctions.includes(emp.function);
                // Check if tour is in the selected list (or if no tours are selected, show all)
                const tourMatch = selectedTours.length === 0 || selectedTours.includes(emp.tour);
                // Check working platoon only if the checkbox is checked
                const workingTodayMatch = !showWorkingOnly || (workingPlatoons && emp.platoon && workingPlatoons.includes(emp.platoon));
                // Hide inactive members if checkbox is checked
                const statusMatch = !hideInactive || (emp.status !== 'Inactive');
                // Exclude if absent today, but include if added today (based on actual today, not display date)
                const isAbsentToday = absenceState.today[emp.id] !== undefined;
                const isAddedToday = addedState.today[emp.id] !== undefined;

                // If employee is added today, they should be included regardless of other filters
                // If employee is absent today, they should be excluded
                // Otherwise, apply normal filters
                if (isAddedToday) {
                    return !isAbsentToday && statusMatch; // Added employees are included unless also marked absent or inactive
                }
                
                return functionMatch && tourMatch && workingTodayMatch && statusMatch && !isAbsentToday;
            });

            // Update the working platoons display
            updateWorkingPlatoonsDisplay();
            
            populateEmployeeList(); // Repopulate with filtered list
            // Don't save state here, save it explicitly after filter changes or other actions
        }/** Creates and appends employee list items based on current filters, grouped by function */
        function populateEmployeeList() {
            employeeList.innerHTML = ''; // Clear existing list

            // Check if we have any employees
            if (allEmployees.length === 0) {
                const noDataMessage = document.createElement('li');
                noDataMessage.style.padding = '20px';
                noDataMessage.style.textAlign = 'center';
                noDataMessage.style.color = 'var(--dm-secondary-color)';
                noDataMessage.style.fontStyle = 'italic';
                noDataMessage.innerHTML = 'No employee data loaded.<br>Please upload a CSV file to get started.';
                employeeList.appendChild(noDataMessage);
                return;
            }

            // Check if any employees match current filters
            if (displayedEmployees.length === 0) {
                const noFilterMessage = document.createElement('li');
                noFilterMessage.style.padding = '20px';
                noFilterMessage.style.textAlign = 'center';
                noFilterMessage.style.color = 'var(--dm-secondary-color)';
                noFilterMessage.style.fontStyle = 'italic';
                noFilterMessage.textContent = 'No employees match the current filters.';
                employeeList.appendChild(noFilterMessage);
                return;
            }

            // Group employees by function
            const groupedEmployees = {};
            displayedEmployees.forEach(emp => {
                const funcKey = emp.function || 'Unassigned';
                if (!groupedEmployees[funcKey]) {
                    groupedEmployees[funcKey] = [];
                }
                groupedEmployees[funcKey].push(emp);
            });
            
            // Sort employees within each function group by start time, then by platoon, then by last name
            Object.keys(groupedEmployees).forEach(func => {
                sortEmployees(groupedEmployees[func]);
            });

            // Determine function order (using summaryFunctionOrder + alphabetical for others)
            const allFunctionsInList = Object.keys(groupedEmployees);
            const orderedFunctions = summaryFunctionOrder.filter(f => allFunctionsInList.includes(f));
            const remainingFunctions = allFunctionsInList.filter(f => !summaryFunctionOrder.includes(f)).sort();
            const finalFunctionOrder = [...orderedFunctions, ...remainingFunctions];

            // Populate list with separators
            finalFunctionOrder.forEach(func => {
                if (groupedEmployees[func] && groupedEmployees[func].length > 0) {
                    // Calculate scheduled count for this function based on current display date and filters
                    const workingPlatoonsForDisplayDate = getWorkingPlatoonsForDate(new Date(currentDisplayDate));
                    const scheduledCount = groupedEmployees[func].filter(emp =>
                        emp.platoon && workingPlatoonsForDisplayDate.includes(emp.platoon)
                    ).length;

                    // Add separator with scheduled count
                    const separator = document.createElement('li');
                    separator.className = 'function-separator';
                    // Display count only if > 0, adjust text as needed
                    separator.textContent = `${func}${scheduledCount > 0 ? ` (Scheduled: ${scheduledCount})` : ''}`;
                    employeeList.appendChild(separator);

                    // Add employees for this function
                    groupedEmployees[func].forEach(employee => {
                        const li = createEmployeeElement(employee);
                        employeeList.appendChild(li);
                    });
                }
            });

            // Add drag listeners to newly populated list items (not separators)
            addDragListenersToList(employeeList);
        }


        /** Populates side lists (Absent, Added) based on saved state, grouped by function */        function populateSideLists() {
            const day = 'today'; // Only handle today now
            const absentListContainer = document.getElementById(`${day}-absent`);
            const addedListContainer = document.getElementById(`${day}-added`);
            if (!absentListContainer || !addedListContainer) return; // Safety check
            
            absentListContainer.innerHTML = ''; // Clear container
            addedListContainer.innerHTML = ''; // Clear container

            // --- Group Employees by Function ---
            const absentGrouped = {};
            const addedGrouped = {};

            // Group Absent
            Object.keys(absenceState[day]).forEach(empId => {
                const employee = allEmployees.find(e => e.id === empId);
                if (employee) {
                    const func = employee.function || 'Unassigned';
                    if (!absentGrouped[func]) absentGrouped[func] = [];
                    absentGrouped[func].push({ employee, reason: absenceState[day][empId] });
                    
                    // Track leave usage when employee is added to absent list
                    if (absenceState[day][empId]) {
                        trackLeaveUsage(empId, absenceState[day][empId]); // Track leave usage
                    }
                } else {
                    console.warn(`Employee ${empId} not found for ${day} absent list.`);
                    delete absenceState[day][empId]; // Clean up state
                }
            });                // Group Added
                Object.keys(addedState[day]).forEach(empId => {
                    const employee = allEmployees.find(e => e.id === empId);
                    if (employee) {
                        const func = employee.function || 'Unassigned';
                        if (!addedGrouped[func]) addedGrouped[func] = [];
                        const currentData = addedState[day][empId] || { reason: '', shield: '', tour: '' };
                        addedGrouped[func].push({ employee, reason: currentData.reason, shield: currentData.shield, tour: currentData.tour });
                    } else {
                        console.warn(`Employee ${empId} not found for ${day} added list.`);
                        delete addedState[day][empId]; // Clean up state
                    }
                });

                // --- Determine Function Order ---
                const allFunctions = new Set([...Object.keys(absentGrouped), ...Object.keys(addedGrouped)]);
                const orderedFunctions = summaryFunctionOrder.filter(f => allFunctions.has(f));
                const remainingFunctions = [...allFunctions].filter(f => !summaryFunctionOrder.includes(f)).sort();
                const finalFunctionOrder = [...orderedFunctions, ...remainingFunctions];

                // --- Populate Absent List ---
                finalFunctionOrder.forEach(func => {
                    if (absentGrouped[func] && absentGrouped[func].length > 0) {
                        const heading = document.createElement('h4');
                        heading.textContent = func;
                        absentListContainer.appendChild(heading);

                        const funcUl = document.createElement('ul');
                        absentGrouped[func].forEach(item => {
                            const li = createEmployeeElement(item.employee);
                            li.classList.add('absent');
                            li.setAttribute('draggable', 'false');
                            addAbsenceControls(li, item.reason);
                            funcUl.appendChild(li);
                        });
                        absentListContainer.appendChild(funcUl);
                    }
                });

                // --- Populate Added List ---
                finalFunctionOrder.forEach(func => {
                    if (addedGrouped[func] && addedGrouped[func].length > 0) {
                        const heading = document.createElement('h4');
                        heading.textContent = func;
                        addedListContainer.appendChild(heading);

                        const funcUl = document.createElement('ul');
                        addedGrouped[func].forEach(item => {
                            const li = createEmployeeElement(item.employee);
                            li.classList.add('added-schedule');
                            li.setAttribute('draggable', 'false');
                              // Add tour info to the display
                            if (item.tour) {
                                const tourInfo = document.createElement('span');
                                tourInfo.className = 'added-tour-info';
                                tourInfo.textContent = `T${item.tour}`;
                                const nameSpan = li.querySelector('.employee-name');
                                if (nameSpan) {
                                    nameSpan.appendChild(tourInfo);
                                }
                            }
                            
                            addAddedControls(li, item.reason, item.shield, item.tour);
                            funcUl.appendChild(li);
                        });
                        addedListContainer.appendChild(funcUl);
                    }
                });
        }


        /** Creates a single employee list item element */
        function createEmployeeElement(employee) {
            const li = document.createElement('li');
            li.className = 'employee-item';
            li.setAttribute('draggable', 'true');
            li.id = employee.id; // Use the ID from the employee object

            // Container for name and details
            const infoDiv = document.createElement('div');
            infoDiv.className = 'employee-info';

            const nameSpan = document.createElement('span');
            nameSpan.className = 'employee-name';
            nameSpan.textContent = `${employee.firstName}, ${employee.lastName}`; // Display FirstName, LastName
            infoDiv.appendChild(nameSpan);

            // Add Tour, Platoon and Start Time details
            const detailsSpan = document.createElement('span');
            detailsSpan.className = 'employee-details';
            // Format Start Time using centralized function
            const formattedStartTime = formatMilitaryTime(employee.startTime);
            // Include Shield and Vax # with bold start time
            detailsSpan.innerHTML = ` (T:${employee.tour || 'N/A'}, PLT: ${employee.platoon || 'N/A'}, <strong>${formattedStartTime}</strong>, S:${employee.shield || 'N/A'}, V:${employee.vax || 'N/A'})`;
            detailsSpan.style.fontSize = '0.85em'; // Smaller font for details
            detailsSpan.style.marginLeft = '5px';
            detailsSpan.style.color = 'var(--secondary-color)';
            infoDiv.appendChild(detailsSpan);

            li.appendChild(infoDiv);

            // Container for buttons (only for main list initially)
            const buttonDiv = document.createElement('div');
            buttonDiv.className = 'employee-buttons';            // Add Absence Checkbox (for today only)
            const absenceCheckbox = document.createElement('input');
            absenceCheckbox.type = 'checkbox';
            absenceCheckbox.className = 'absence-checkbox';
            absenceCheckbox.setAttribute('aria-label', `Mark ${employee.fullName} absent today`);
            absenceCheckbox.title = 'Mark absent for today'; // Tooltip
            buttonDiv.appendChild(absenceCheckbox);

            // Add Quick Add buttons
            const quickAddTodayBtn = document.createElement('button');
            quickAddTodayBtn.className = 'quick-add-btn action-btn info-btn';
            quickAddTodayBtn.innerHTML = '+T'; // Plus T for "add to Today"
            quickAddTodayBtn.setAttribute('aria-label', `Quick add ${employee.fullName} to today`);
            quickAddTodayBtn.title = 'Quick add to today';            quickAddTodayBtn.onclick = (e) => {
                e.stopPropagation();
                // Add visual feedback
                e.target.classList.add('button-clicked');
                setTimeout(() => e.target.classList.remove('button-clicked'), 150);
                addEmployeeToSchedule(employee.id, 'today');
            };
            buttonDiv.appendChild(quickAddTodayBtn);            // Add Edit button
            const editBtn = document.createElement('button');
            editBtn.className = 'edit-member-btn';
            editBtn.innerHTML = '✏️'; // Pencil emoji for edit
            editBtn.setAttribute('aria-label', `Edit ${employee.fullName}`);
            buttonDiv.appendChild(editBtn);

            // Add remove button for the main list
            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-member-btn';
            removeBtn.innerHTML = '&times;'; // Use '×' symbol
            removeBtn.setAttribute('aria-label', `Remove ${employee.fullName}`);
            buttonDiv.appendChild(removeBtn);

            li.appendChild(buttonDiv);


            // Store data attributes
            li.dataset.function = employee.function; // Store function
            li.dataset.tour = employee.tour;
            li.dataset.platoon = employee.platoon;
            li.dataset.startTime = employee.startTime;
            li.dataset.shield = employee.shield; // Store shield
            li.dataset.vax = employee.vax; // Store vax
            return li;
        }

         /** Adds dragstart listener to all items in a list */
        function addDragListenersToList(listElement) {
            const items = listElement.querySelectorAll('.employee-item');
            items.forEach(item => {
                // Remove existing listener first to avoid duplicates
                item.removeEventListener('dragstart', handleDragStart);
                item.addEventListener('dragstart', handleDragStart);
            });
        }

        /** Handles the start of a drag operation */
        function handleDragStart(event) {
            // Only allow dragging if not in edit mode
            if (event.target.closest('.employee-item').classList.contains('editing')) {
                event.preventDefault();
                return;
            }
            event.dataTransfer.setData('text/plain', event.target.closest('.employee-item').id);
            event.dataTransfer.effectAllowed = 'move';
        }

        /** Handles dragging over a drop zone */
        function handleDragOver(event) {
            event.preventDefault(); // Necessary to allow dropping
            event.dataTransfer.dropEffect = 'move';
            event.currentTarget.classList.add('drag-over'); // Highlight drop zone
        }

        /** Handles dragging leaving a drop zone */
        function handleDragLeave(event) {
            event.currentTarget.classList.remove('drag-over');
        }

        /** Handles dropping an item onto a drop zone */
        function handleDrop(event) {
            event.preventDefault();
            event.currentTarget.classList.remove('drag-over');
            const employeeId = event.dataTransfer.getData('text/plain');
            const employeeElement = document.getElementById(employeeId);
            const targetList = event.currentTarget; // The UL element

            if (employeeElement && targetList) {
                const listId = targetList.id;
                const isAbsentList = targetList.classList.contains('absent-list');
                const isAddedList = targetList.classList.contains('added-schedule-list');
                const stateKey = 'today'; // Only handle today now

                // Prevent dropping if already in a side list (absent or added)
                if (employeeElement.classList.contains('absent') || employeeElement.classList.contains('added-schedule')) {
                    return;
                }

                // Move element
                targetList.appendChild(employeeElement);
                employeeElement.setAttribute('draggable', 'false'); // Disable dragging from side lists

                // Remove main list buttons
                const mainButtons = employeeElement.querySelector('.employee-buttons');
                if (mainButtons) employeeElement.removeChild(mainButtons);

                // Update State & Add Controls
                if (isAbsentList) {
                    employeeElement.classList.add('absent');
                    addAbsenceControls(employeeElement); // Add reason dropdown + remove
                    absenceState[stateKey][employeeId] = ''; // Add to state, reason empty initially
                    
                    // Update schedule data for today
                    const employee = allEmployees.find(emp => emp.id === employeeId);
                    if (employee) {
                        const memberName = `${employee.lastName}, ${employee.firstName}`;
                        const todayKey = formatDateKey(new Date(currentDisplayDate));
                        if (!scheduleData[todayKey]) {
                            scheduleData[todayKey] = {};
                        }
                        scheduleData[todayKey][memberName] = ''; // Empty reason initially
                        saveScheduleData();
                    }
                } else if (isAddedList) {
                    employeeElement.classList.add('added-schedule');
                    const employee = allEmployees.find(emp => emp.id === employeeId);
                    const defaultTour = employee ? employee.tour : '';
                    addAddedControls(employeeElement, '', '', defaultTour); // Add tour, reason, shield, remove
                    addedState[stateKey][employeeId] = { reason: '', shield: '', tour: defaultTour }; // Initialize state object with tour
                    
                    // Update schedule data for today
                    if (employee) {
                        const memberName = `${employee.lastName}, ${employee.firstName}`;
                        const todayKey = formatDateKey(new Date(currentDisplayDate));
                        if (!scheduleData[todayKey]) {
                            scheduleData[todayKey] = {};
                        }
                        scheduleData[todayKey][memberName] = ''; // Empty reason initially
                        saveScheduleData();
                    }
                }

                console.log(`Dropped ${employeeId} onto ${listId}`);
                updateSummary(); // Update summary after drop
                renderScheduleTable(); // Update schedule table
                saveState(); // Save the new state
            }
        }

        /** Adds dropdown and remove button to an absent employee */
        function addAbsenceControls(employeeElement, currentReason = '') {
            const controlsDiv = document.createElement('div');
            controlsDiv.className = 'employee-controls';

            // Reason Dropdown
            const select = document.createElement('select');
            select.className = 'reason-select';
            select.innerHTML = '<option value="">Select Reason...</option>'; // Default option
            populateReasonDropdown(select); // Populate with current reasons
            select.value = currentReason; // Set saved reason
            // Listener added via delegation

            // Remove Button
            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-btn';
            removeBtn.textContent = 'Remove';
            // Listener added via delegation

            controlsDiv.appendChild(select);
            controlsDiv.appendChild(removeBtn);

            employeeElement.appendChild(controlsDiv);
        }        /** Adds reason dropdown, tour dropdown, shield input, and remove button to an added-to-schedule employee */
        function addAddedControls(employeeElement, currentReason = '', currentShield = '', currentTour = '') {
            const controlsDiv = document.createElement('div');
            controlsDiv.className = 'employee-controls';

            // Tour Dropdown
            const tourSelect = document.createElement('select');
            tourSelect.className = 'tour-select';
            tourSelect.innerHTML = '<option value="">Tour</option>';
            ['1', '2', '3'].forEach(tour => {
                const option = document.createElement('option');
                option.value = tour;
                option.textContent = `T${tour}`;
                tourSelect.appendChild(option);
            });
            tourSelect.value = currentTour;
            // Listener added via delegation

            // Reason Dropdown
            const select = document.createElement('select');
            select.className = 'reason-select';
            select.innerHTML = '<option value="">Select Reason...</option>'; // Default option
            populateReasonDropdown(select); // Populate with current reasons
            select.value = currentReason; // Set saved reason
            // Listener added via delegation

            // Shield Input
            const shieldInput = document.createElement('input');
            shieldInput.type = 'text';
            shieldInput.className = 'shield-input';
            shieldInput.placeholder = 'Shield #';
            shieldInput.value = currentShield; // Set saved shield
            // Listener added via delegation

            // Remove Button
            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-btn';
            removeBtn.textContent = 'Remove';
            // Listener added via delegation

            controlsDiv.appendChild(tourSelect);
            controlsDiv.appendChild(select);
            controlsDiv.appendChild(shieldInput);
            controlsDiv.appendChild(removeBtn);

            employeeElement.appendChild(controlsDiv);
        }

        // --- Full View Toggles ---

        /** Toggles between main employee list view and calendar schedule view */
        function toggleCalendarView() {
            if (!calendarViewContent || !mainViewContent) {
                showNotification('Calendar view is not available.', 'error');
                return;
            }
            
            if (calendarViewContent.style.display === 'none' || calendarViewContent.style.display === '') {
                console.log('Showing calendar view');
                // Show calendar view
                mainViewContent.style.display = 'none'; // Hide main container
                calendarViewContent.style.display = 'flex'; // Show calendar
                updateCalendarDateDisplay();
                renderCalendarView();
            } else {
                console.log('Hiding calendar view');
                // Hide calendar view
                calendarViewContent.style.display = 'none'; // Hide calendar
                mainViewContent.style.display = 'flex'; // Show main container
            }
        }
        
        /** Toggles between main employee list view and statistics full view */
        function toggleStatisticsFullView() {
            if (statisticsPanelFull && (statisticsPanelFull.style.display === 'none' || statisticsPanelFull.style.display === '')) {
                // Show stats view
                mainViewContent.style.display = 'none'; // Hide main container
                statisticsPanelFull.style.display = 'flex'; // Show stats
                updateStatisticsDisplay(); // Call update to ensure data is fresh
            } else if (statisticsPanelFull) {
                // Hide stats view
                statisticsPanelFull.style.display = 'none'; // Hide stats
                mainViewContent.style.display = 'flex'; // Show main container
            } else {
                // Fallback if statistics panel doesn't exist
                showNotification('Statistics panel is not available in this version.', 'info');
            }
        }

        /** Updates the displayed month and year for the calendar view */
        function updateCalendarDateDisplay() {
            const monthDisplay = document.getElementById('calendar-current-month-display');
            if (monthDisplay) {
                monthDisplay.textContent = currentCalendarViewDate.toLocaleDateString('en-US', {
                    month: 'long', year: 'numeric'
                });
            }
        }        /** Renders the calendar view with platoon information */
        function renderCalendarView() {
            console.log('Rendering calendar view...');
            if (!calendarGridContainer) {
                console.error('Calendar grid container not found');
                return;
            }
            
            calendarGridContainer.innerHTML = '<p>Loading calendar...</p>';

            const year = currentCalendarViewDate.getFullYear();
            const month = currentCalendarViewDate.getMonth();

            // Create calendar table
            const table = document.createElement('table');
            table.className = 'calendar-table';            // Create header row with days of week
            const thead = table.createTHead();
            const headerRow = thead.insertRow();
            const daysOfWeek = [
                { full: 'Sunday', short: 'Sun' },
                { full: 'Monday', short: 'Mon' },
                { full: 'Tuesday', short: 'Tue' },
                { full: 'Wednesday', short: 'Wed' },
                { full: 'Thursday', short: 'Thu' },
                { full: 'Friday', short: 'Fri' },
                { full: 'Saturday', short: 'Sat' }
            ];            daysOfWeek.forEach(day => {
                const th = document.createElement('th');
                th.innerHTML = `<span class="day-full">${day.full}</span><span class="day-short">${day.short}</span>`;
                headerRow.appendChild(th);
            });
            
            const tbody = table.createTBody();

            // Get first day of month and number of days
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const daysInMonth = lastDay.getDate();
            const startingDayOfWeek = firstDay.getDay();

            // Calculate previous month days to show
            const prevMonth = new Date(year, month - 1, 0);
            const prevMonthDays = prevMonth.getDate();

            let currentDate = 1;
            let nextMonthDate = 1;

            // Create 6 weeks of calendar
            for (let week = 0; week < 6; week++) {
                const row = tbody.insertRow();
                
                for (let day = 0; day < 7; day++) {
                    const cell = row.insertCell();
                    const dayDiv = document.createElement('div');
                    dayDiv.className = 'calendar-day';

                    const dayNumber = document.createElement('div');
                    dayNumber.className = 'calendar-day-number';

                    const platoonsDiv = document.createElement('div');
                    platoonsDiv.className = 'calendar-platoons';

                    let cellDate, isCurrentMonth = true;

                    if (week === 0 && day < startingDayOfWeek) {
                        // Previous month days
                        const prevDate = prevMonthDays - startingDayOfWeek + day + 1;
                        dayNumber.textContent = prevDate;
                        cellDate = new Date(year, month - 1, prevDate);
                        isCurrentMonth = false;
                        cell.classList.add('other-month');
                    } else if (currentDate <= daysInMonth) {
                        // Current month days
                        dayNumber.textContent = currentDate;
                        cellDate = new Date(year, month, currentDate);
                        currentDate++;
                    } else {
                        // Next month days
                        dayNumber.textContent = nextMonthDate;
                        cellDate = new Date(year, month + 1, nextMonthDate);
                        nextMonthDate++;
                        isCurrentMonth = false;
                        cell.classList.add('other-month');
                    }

                    // Add weekend class
                    if (day === 0 || day === 6) {
                        cell.classList.add('weekend');
                    }

                    // Get working platoons for this date
                    const workingPlatoons = getWorkingPlatoonsForDate(cellDate);
                    if (workingPlatoons) {
                        platoonsDiv.textContent = workingPlatoons;
                    } else {
                        platoonsDiv.textContent = '';
                    }

                    dayDiv.appendChild(dayNumber);
                    dayDiv.appendChild(platoonsDiv);
                    cell.appendChild(dayDiv);
                }

                // Stop creating weeks if we've shown all days of current month and some next month days
                if (currentDate > daysInMonth && nextMonthDate > 7) {
                    break;
                }
            }            calendarGridContainer.innerHTML = '';
            calendarGridContainer.appendChild(table);
            console.log('Calendar rendering complete');
        }

        /** Handles calendar navigation - previous month */
        function handleCalendarPrevMonth() {
            currentCalendarViewDate.setMonth(currentCalendarViewDate.getMonth() - 1);
            updateCalendarDateDisplay();
            renderCalendarView();
        }

        /** Handles calendar navigation - next month */
        function handleCalendarNextMonth() {
            currentCalendarViewDate.setMonth(currentCalendarViewDate.getMonth() + 1);
            updateCalendarDateDisplay();
            renderCalendarView();
        }

        // --- Schedule View Functionality ---
        
        let scheduleData = {}; // Format: { "2024-01-15": { "Doe, John": "Vacation" } }
        let currentScheduleDate = new Date();
        let isScheduleWeekView = true;
        let scheduleSelectedFunctions = []; // Array of selected function names for filtering
        let scheduleSelectedTours = []; // Array of selected tour names for filtering
        let scheduleGroupBy = 'function'; // 'function' or 'tour'

        /** Toggles between main view and schedule view */
        function toggleScheduleView() {
            const scheduleViewContent = document.getElementById('schedule-view-content');
            const mainViewContent = document.getElementById('main-app-container');
            
            if (!scheduleViewContent) {
                showNotification('Schedule view is not available.', 'error');
                return;
            }
            
            if (scheduleViewContent.style.display === 'none' || scheduleViewContent.style.display === '') {
                // Show schedule view
                if (mainViewContent) mainViewContent.style.display = 'none';
                scheduleViewContent.style.display = 'flex';
                updateScheduleView();
            } else {
                // Hide schedule view
                scheduleViewContent.style.display = 'none';
                if (mainViewContent) mainViewContent.style.display = 'flex';
            }
        }

        /** Updates the schedule view based on current date and view mode */
        function updateScheduleView() {
            populateScheduleFunctionFilters();
            populateScheduleTourFilters();
            updateScheduleDateDisplay();
            renderScheduleTable();
        }

        /** Populates the tour filter checkboxes in schedule view */
        function populateScheduleTourFilters() {
            const container = document.getElementById('schedule-tour-filter-container');
            if (!container) return;
            
            // Get unique tours from all employees
            const tours = [...new Set(allEmployees.map(emp => emp.tour || 'Unknown'))].sort();
            
            // Sort tours in logical order (1, 2, 3, Unknown)
            const tourOrder = { '1': 1, '2': 2, '3': 3 };
            tours.sort((a, b) => {
                const orderA = tourOrder[a] || 999;
                const orderB = tourOrder[b] || 999;
                if (orderA !== orderB) return orderA - orderB;
                return a.localeCompare(b);
            });
            
            container.innerHTML = '';
            tours.forEach(tour => {
                const label = document.createElement('label');
                label.style.cssText = 'display: flex; align-items: center; gap: 5px; font-size: 0.9em; cursor: pointer;';
                
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.value = tour;
                checkbox.className = 'schedule-tour-checkbox';
                checkbox.checked = scheduleSelectedTours.length === 0 || scheduleSelectedTours.includes(tour);
                checkbox.addEventListener('change', handleScheduleTourFilterChange);
                
                label.appendChild(checkbox);
                label.appendChild(document.createTextNode(`Tour ${tour}`));
                container.appendChild(label);
            });
        }

        /** Handles changes to schedule tour filter checkboxes */
        function handleScheduleTourFilterChange() {
            const checkboxes = document.querySelectorAll('.schedule-tour-checkbox');
            scheduleSelectedTours = Array.from(checkboxes)
                .filter(cb => cb.checked)
                .map(cb => cb.value);
            
            renderScheduleTable();
        }

        /** Populates the function filter checkboxes in schedule view */
        function populateScheduleFunctionFilters() {
            const container = document.getElementById('schedule-function-filter-container');
            if (!container) return;
            
            // Get unique functions from all employees
            const functions = [...new Set(allEmployees.map(emp => emp.function || 'Unassigned'))].sort();
            
            container.innerHTML = '';
            functions.forEach(func => {
                const label = document.createElement('label');
                label.style.cssText = 'display: flex; align-items: center; gap: 5px; font-size: 0.9em; cursor: pointer;';
                
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.value = func;
                checkbox.className = 'schedule-function-checkbox';
                checkbox.checked = scheduleSelectedFunctions.length === 0 || scheduleSelectedFunctions.includes(func);
                checkbox.addEventListener('change', handleScheduleFunctionFilterChange);
                
                label.appendChild(checkbox);
                label.appendChild(document.createTextNode(func));
                container.appendChild(label);
            });
        }

        /** Handles changes to schedule function filter checkboxes */
        function handleScheduleFunctionFilterChange() {
            const checkboxes = document.querySelectorAll('.schedule-function-checkbox');
            scheduleSelectedFunctions = Array.from(checkboxes)
                .filter(cb => cb.checked)
                .map(cb => cb.value);
            
            renderScheduleTable();
        }

        /** Updates the displayed date range for schedule view */
        function updateScheduleDateDisplay() {
            const scheduleCurrentDateDisplay = document.getElementById('schedule-current-range-display');
            if (!scheduleCurrentDateDisplay) return;
            
            if (isScheduleWeekView) {
                const startOfWeek = getStartOfWeek(currentScheduleDate);
                const endOfWeek = new Date(startOfWeek);
                endOfWeek.setDate(startOfWeek.getDate() + 6);
                
                scheduleCurrentDateDisplay.textContent = `${startOfWeek.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${endOfWeek.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`;
            } else {
                scheduleCurrentDateDisplay.textContent = currentScheduleDate.toLocaleDateString('en-US', {
                    month: 'long', year: 'numeric'
                });
            }
        }

        /** Gets the start of week (Sunday) for a given date */
        function getStartOfWeek(date) {
            const d = new Date(date);
            const day = d.getDay();
            const diff = d.getDate() - day;
            return new Date(d.setDate(diff));
        }

        /** Renders the schedule table with all employees and dates */
        function renderScheduleTable() {
            const scheduleTableContainer = document.getElementById('schedule-table-container');
            if (!scheduleTableContainer) {
                console.error('Schedule table container not found');
                return;
            }
            
            scheduleTableContainer.innerHTML = '<p>Loading schedule...</p>';
            
            let startDate, daysToShow;
            
            if (isScheduleWeekView) {
                startDate = getStartOfWeek(currentScheduleDate);
                daysToShow = 7;
            } else {
                const month = currentScheduleDate.getMonth();
                const year = currentScheduleDate.getFullYear();
                startDate = new Date(year, month, 1);
                daysToShow = new Date(year, month + 1, 0).getDate();
            }
            
            // Get all employees from the global allEmployees array
            if (allEmployees.length === 0) {
                scheduleTableContainer.innerHTML = '<p>No employees found. Please add employees first.</p>';
                return;
            }
            
            // Check if we should hide inactive members
            const hideInactive = hideInactiveCheckbox ? hideInactiveCheckbox.checked : false;
            
            // Get grouping preference
            const groupBySelect = document.getElementById('schedule-group-by');
            scheduleGroupBy = groupBySelect ? groupBySelect.value : 'function';
            
            // Get search filter
            const scheduleSearchInput = document.getElementById('schedule-search-input');
            const searchTerm = scheduleSearchInput ? scheduleSearchInput.value.trim().toLowerCase() : '';
            
            // Group employees by selected criteria
            const grouped = {};
            allEmployees.forEach(emp => {
                const func = emp.function || 'Unassigned';
                const tour = emp.tour || 'Unknown';
                
                // Apply function filter
                if (scheduleSelectedFunctions.length > 0 && !scheduleSelectedFunctions.includes(func)) {
                    return;
                }
                
                // Apply tour filter
                if (scheduleSelectedTours.length > 0 && !scheduleSelectedTours.includes(tour)) {
                    return;
                }
                
                // Apply search filter
                if (searchTerm) {
                    const fullName = `${emp.firstName} ${emp.lastName}`.toLowerCase();
                    const reverseName = `${emp.lastName} ${emp.firstName}`.toLowerCase();
                    if (!fullName.includes(searchTerm) && !reverseName.includes(searchTerm)) {
                        return;
                    }
                }
                
                // Apply status filter (hide inactive members if checkbox is checked)
                if (hideInactive && emp.status === 'Inactive') {
                    return;
                }
                
                // Group by selected field
                const groupKey = scheduleGroupBy === 'tour' ? `Tour ${tour}` : func;
                
                if (!grouped[groupKey]) {
                    grouped[groupKey] = [];
                }
                grouped[groupKey].push(emp);
            });
            
            // Check if any groups are visible after filtering
            if (Object.keys(grouped).length === 0) {
                scheduleTableContainer.innerHTML = '<p style="text-align: center; padding: 20px; color: var(--dm-secondary-color);">No employees match the selected filters.</p>';
                return;
            }
            
            // Sort groups logically
            const sortedGroups = Object.keys(grouped).sort((a, b) => {
                if (scheduleGroupBy === 'tour') {
                    // Extract tour numbers for sorting (1, 2, 3, Unknown)
                    const tourA = a.replace('Tour ', '');
                    const tourB = b.replace('Tour ', '');
                    const orderMap = { '1': 1, '2': 2, '3': 3 };
                    const orderA = orderMap[tourA] || 999;
                    const orderB = orderMap[tourB] || 999;
                    if (orderA !== orderB) return orderA - orderB;
                }
                return a.localeCompare(b);
            });
            
            // Build table HTML
            let tableHTML = '';
            
            // Add informational note at the top
            tableHTML += `
                <div style="background-color: var(--dm-card-bg); padding: 12px; margin-bottom: 16px; border-radius: 6px; border-left: 4px solid var(--dm-primary-color);">
                    <strong>📅 Schedule Guide:</strong>
                    <ul style="margin: 8px 0 0 0; padding-left: 20px; font-size: 0.9em; line-height: 1.6;">
                        <li><strong>Working days:</strong> Use dropdown to mark absences (Sick, Vacation, etc.) or extra work (OVERTIME, SWITCH, etc.)</li>
                        <li><strong>Off days:</strong> Click <strong style="color: var(--dm-primary-color);">+</strong> button to mark as working (OVERTIME, SWITCH, TC, MUTUAL)</li>
                        <li><strong>SWITCH:</strong> Mark both people's days individually (e.g., Person A works Monday marked as SWITCH, Person B works Sunday marked as SWITCH)</li>
                        <li><strong>Changes apply automatically:</strong> When viewing a scheduled date, absences and added workers will show in the daily view</li>
                    </ul>
                </div>
            `;
            
            sortedGroups.forEach(groupName => {
                const groupMembers = sortEmployees(grouped[groupName]);
                
                tableHTML += `
                    <div class="schedule-function-section">
                        <h3 class="schedule-function-title">${groupName}</h3>
                        <div class="schedule-table-wrapper">
                            <table class="schedule-table">
                                <thead>
                                    <tr>
                                        <th class="schedule-name-col">Member</th>`;
                
                // Date headers
                for (let day = 0; day < daysToShow; day++) {
                    const date = new Date(startDate);
                    date.setDate(startDate.getDate() + day);
                    const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
                    const dayNum = date.getDate();
                    
                    tableHTML += `<th class="schedule-date-col">${dayName}<br>${dayNum}</th>`;
                }
                
                tableHTML += `</tr></thead><tbody>`;
                
                // Employee rows
                groupMembers.forEach(member => {
                    const memberName = `${member.lastName}, ${member.firstName}`;
                    const platoonClass = member.platoon ? `platoon-${member.platoon.toLowerCase()}` : '';
                    
                    tableHTML += `
                        <tr>
                            <td class="schedule-name-col">
                                <div class="schedule-member-info">
                                    <span class="schedule-member-name">${memberName}</span>
                                    <div class="schedule-member-details">
                                        <span class="schedule-member-shield">${member.shield || ''}</span>
                                        ${member.platoon ? `<span class="platoon-badge ${platoonClass}">${member.platoon}</span>` : ''}
                                    </div>
                                </div>
                            </td>`;
                    
                    // Date cells
                    for (let day = 0; day < daysToShow; day++) {
                        const date = new Date(startDate);
                        date.setDate(startDate.getDate() + day);
                        const dateKey = formatDateKey(date);
                        
                        // Check if this is a working day for the platoon
                        const workingPlatoons = getWorkingPlatoonsForDate(date);
                        const isWorking = member.platoon && workingPlatoons && workingPlatoons.includes(member.platoon);
                        
                        const currentReason = (scheduleData[dateKey] && scheduleData[dateKey][memberName]) || '';
                        
                        // Parse reason and time (format: "OVERTIME@08:00" or just "OVERTIME")
                        let reasonType = currentReason;
                        let reasonTime = '';
                        if (currentReason.includes('@')) {
                            const parts = currentReason.split('@');
                            reasonType = parts[0];
                            reasonTime = parts[1] || '';
                        }
                        
                        if (!isWorking) {
                            // Off day - check if marked as overtime/switch
                            if (currentReason) {
                                // Cell has been changed (off day with entry)
                                // Determine if this is a working reason (shows work time) or off reason
                                const workingReasons = ['OVERTIME', 'SWITCH', 'TC', 'MUTUAL'];
                                const isWorkingReason = workingReasons.includes(reasonType);
                                
                                // Show the overtime/switch type with time if available
                                const displayText = reasonTime ? `${reasonType} ${reasonTime}` : reasonType;
                                
                                tableHTML += `
                                    <td class="schedule-off-day schedule-cell-changed ${isWorkingReason ? 'schedule-overtime-day' : ''}">
                                        <div style="display: flex; flex-direction: column; gap: 2px;">
                                            ${isWorkingReason ? `<span class="schedule-work-time">${reasonTime || '–'}</span>` : ''}
                                            <span class="schedule-overtime-badge">${displayText}</span>
                                            <select class="schedule-reason-select" data-date="${dateKey}" data-member="${memberName}">
                                                <option value="">Remove</option>
                                                <option value="OVERTIME" ${reasonType === 'OVERTIME' ? 'selected' : ''}>OVERTIME</option>
                                                <option value="SWITCH" ${reasonType === 'SWITCH' ? 'selected' : ''}>SWITCH</option>
                                                <option value="TC" ${reasonType === 'TC' ? 'selected' : ''}>TC (Tour Change)</option>
                                                <option value="MUTUAL" ${reasonType === 'MUTUAL' ? 'selected' : ''}>MUTUAL</option>
                                                <option value="OFF-SWITCH" ${reasonType === 'OFF-SWITCH' ? 'selected' : ''}>OFF (Switched)</option>
                                            </select>
                                        </div>
                                    </td>`;
                            } else {
                                // Show plus button to add as overtime/switch
                                tableHTML += `
                                    <td class="schedule-off-day">
                                        <div style="display: flex; align-items: center; justify-content: center; gap: 4px;">
                                            <span class="off-indicator">Off</span>
                                            <button class="schedule-add-overtime-btn" data-date="${dateKey}" data-member="${memberName}" title="Add as Overtime/Switch">+</button>
                                        </div>
                                    </td>`;
                            }
                        } else {
                            // Working day - show time and absence selector
                            const workTime = formatMilitaryTime(member.startTime);
                            
                            // Build options: first the overtime/switch options, then absence reasons
                            const workOptions = ['OVERTIME', 'SWITCH', 'TC', 'MUTUAL'];
                            let optionsHTML = '<option value="">--</option>';
                            
                            // Add overtime/switch options first
                            workOptions.forEach(opt => {
                                const displayText = opt === 'TC' ? 'TC (Tour Change)' : opt;
                                // Match based on reasonType, not full currentReason
                                optionsHTML += `<option value="${opt}" ${reasonType === opt ? 'selected' : ''}>${displayText}</option>`;
                            });
                            
                            // Add OFF-SWITCH option (for reverting switched days)
                            optionsHTML += `<option value="OFF-SWITCH" ${reasonType === 'OFF-SWITCH' ? 'selected' : ''}>OFF (Switched)</option>`;
                            
                            // Add a separator (using disabled option)
                            optionsHTML += '<option disabled>────────</option>';
                            
                            // Add regular absence reasons
                            absenceReasons.forEach(reason => {
                                // Skip if already in work options (case insensitive check)
                                if (!workOptions.some(opt => opt.toLowerCase() === reason.toLowerCase())) {
                                    optionsHTML += `<option value="${reason}" ${reasonType === reason ? 'selected' : ''}>${reason}</option>`;
                                }
                            });
                            
                            // If current reason is OFF-SWITCH, show it prominently
                            const cellClass = reasonType === 'OFF-SWITCH' ? 'schedule-off-day' : 'schedule-work-day';
                            // Add changed class if there's any modification
                            const changedClass = currentReason ? 'schedule-cell-changed' : '';
                            
                            // Determine what to display in the cell
                            let displayContent = '';
                            if (reasonType === 'OFF-SWITCH') {
                                displayContent = '<span class="off-indicator">Off (Switched)</span>';
                            } else if (reasonTime && reasonType) {
                                // Show the custom work time with reason type
                                const reasonLabel = reasonType === 'TC' ? 'TC' : reasonType;
                                displayContent = `<span class="schedule-work-time">${reasonTime}</span><span style="font-size: 0.7em; color: var(--dm-secondary-color); font-weight: 600;">${reasonLabel}</span>`;
                            } else if (reasonTime) {
                                // Show the custom work time with small notation (fallback)
                                displayContent = `<span class="schedule-work-time">${reasonTime}</span><span style="font-size: 0.75em; color: var(--dm-secondary-color);">✓ ON</span>`;
                            } else {
                                displayContent = `<span class="schedule-work-time">${workTime}</span>`;
                            }
                            
                            tableHTML += `
                                <td class="${cellClass} ${changedClass}">
                                    <div style="display: flex; flex-direction: column; gap: 2px;">
                                        ${displayContent}
                                        <select class="schedule-reason-select" data-date="${dateKey}" data-member="${memberName}">
                                            ${optionsHTML}
                                        </select>
                                    </div>
                                </td>`;
                        }
                    }
                    
                    tableHTML += `</tr>`;
                });
                
                // Add summary row with tour counts for this group
                tableHTML += `
                    <tr class="schedule-summary-row">
                        <td class="schedule-name-col"><strong>Tour Counts</strong></td>`;
                
                // Calculate tour counts for each day
                for (let day = 0; day < daysToShow; day++) {
                    const date = new Date(startDate);
                    date.setDate(startDate.getDate() + day);
                    const dateKey = formatDateKey(date);
                    
                    // Count by tour for this group
                    let tour1Count = 0, tour2Count = 0, tour3Count = 0;
                    groupMembers.forEach(member => {
                        const memberName = `${member.lastName}, ${member.firstName}`;
                        const workingPlatoons = getWorkingPlatoonsForDate(date);
                        const isWorking = member.platoon && workingPlatoons && workingPlatoons.includes(member.platoon);
                        const hasAbsence = scheduleData[dateKey] && scheduleData[dateKey][memberName];
                        
                        if (isWorking && !hasAbsence) {
                            if (member.tour === '1') tour1Count++;
                            else if (member.tour === '2') tour2Count++;
                            else if (member.tour === '3') tour3Count++;
                        }
                    });
                    
                    const tourBreakdown = [];
                    if (tour1Count > 0) tourBreakdown.push(`T1:${tour1Count}`);
                    if (tour2Count > 0) tourBreakdown.push(`T2:${tour2Count}`);
                    if (tour3Count > 0) tourBreakdown.push(`T3:${tour3Count}`);
                    const displayText = tourBreakdown.length > 0 ? tourBreakdown.join(' ') : '0';
                    
                    tableHTML += `<td class="schedule-summary-cell"><strong>${displayText}</strong></td>`;
                }
                
                tableHTML += `</tr>`;
                
                tableHTML += `</tbody></table></div></div>`;
            });
            
            scheduleTableContainer.innerHTML = tableHTML || '<p>No data to display</p>';
            
            // Attach event listeners to all selects
            scheduleTableContainer.querySelectorAll('.schedule-reason-select').forEach(select => {
                select.addEventListener('change', handleScheduleReasonChange);
            });
            
            // Attach event listeners to all plus buttons
            scheduleTableContainer.querySelectorAll('.schedule-add-overtime-btn').forEach(btn => {
                btn.addEventListener('click', handleScheduleAddOvertime);
            });
        }

        /** Formats a date as YYYY-MM-DD for use as a key */
        function formatDateKey(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        /** Handles changes to schedule reason dropdowns */
        function handleScheduleReasonChange(event) {
            const select = event.target;
            const dateKey = select.dataset.date;
            const memberName = select.dataset.member;
            const reason = select.value;
            
            // Special handling for TC (Tour Change) - open time picker
            if (reason === 'TC') {
                // Find the employee
                const employee = allEmployees.find(emp => {
                    const empName = `${emp.lastName}, ${emp.firstName}`;
                    return empName === memberName;
                });
                
                if (employee) {
                    // Get current time or default
                    const currentReason = (scheduleData[dateKey] && scheduleData[dateKey][memberName]) || '';
                    let defaultTime = employee.startTime ? formatMilitaryTime(employee.startTime) : '08:00';
                    
                    // If already has TC with time, extract it
                    if (currentReason.startsWith('TC@')) {
                        const parts = currentReason.split('@');
                        if (parts[1]) defaultTime = parts[1];
                    }
                    
                    // Prompt for time
                    const timeInput = prompt(
                        `Tour Change for ${memberName} on ${dateKey}\n\n` +
                        `Enter new start time (24-hour format):\n` +
                        `Examples: 08:00, 16:30, 07:45\n\n` +
                        `Current default: ${defaultTime}`,
                        defaultTime
                    );
                    
                    if (timeInput === null) {
                        // User cancelled - restore previous selection
                        const prevReason = (scheduleData[dateKey] && scheduleData[dateKey][memberName]) || '';
                        if (prevReason.startsWith('TC@')) {
                            select.value = 'TC';
                        } else {
                            select.value = '';
                        }
                        return;
                    }
                    
                    if (timeInput) {
                        // Validate time format
                        const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
                        const trimmedTime = timeInput.trim();
                        
                        if (timeRegex.test(trimmedTime)) {
                            if (!scheduleData[dateKey]) {
                                scheduleData[dateKey] = {};
                            }
                            scheduleData[dateKey][memberName] = `TC@${trimmedTime}`;
                            saveScheduleData();
                            showNotification(`Tour change: ${memberName} starts at ${trimmedTime}`, 'success', 2500);
                        } else {
                            showNotification('Invalid time format. Use HH:MM (e.g., 08:00)', 'error', 3000);
                            select.value = ''; // Reset dropdown
                            return;
                        }
                    } else {
                        // Empty input - remove TC
                        select.value = '';
                        if (scheduleData[dateKey]) {
                            delete scheduleData[dateKey][memberName];
                            if (Object.keys(scheduleData[dateKey]).length === 0) {
                                delete scheduleData[dateKey];
                            }
                        }
                        saveScheduleData();
                        showNotification('Tour change removed', 'success', 2000);
                        renderScheduleTable();
                        return;
                    }
                }
            } else {
                // Initialize date object if needed
                if (!scheduleData[dateKey]) {
                    scheduleData[dateKey] = {};
                }
                
                // Set or remove the reason
                if (reason) {
                    scheduleData[dateKey][memberName] = reason;
                } else {
                    delete scheduleData[dateKey][memberName];
                    // Clean up empty date objects
                    if (Object.keys(scheduleData[dateKey]).length === 0) {
                        delete scheduleData[dateKey];
                    }
                    
                    // If this is today's date, also remove from absenceState/addedState
                    const todayKey = formatDateKey(new Date(currentDisplayDate));
                    if (dateKey === todayKey) {
                        // Find the employee by name
                        const employee = allEmployees.find(emp => {
                            const empName = `${emp.lastName}, ${emp.firstName}`;
                            return empName === memberName;
                        });
                        
                        if (employee) {
                            // Remove from both states (it could be in either)
                            if (absenceState.today[employee.id]) {
                                delete absenceState.today[employee.id];
                                console.log(`Removed ${employee.id} from absence state due to schedule clear`);
                            }
                            if (addedState.today[employee.id]) {
                                delete addedState.today[employee.id];
                                console.log(`Removed ${employee.id} from added state due to schedule clear`);
                            }
                            saveState();
                            updateSummary(); // Update summary counts
                            applyFiltersAndPopulate(); // Refresh the main view
                        }
                    }
                }
                
                saveScheduleData();
                showNotification('Schedule updated', 'success', 2000);
            }
            
            // Re-render the table to show the change (e.g., off day with + button)
            renderScheduleTable();
            
            // If the scheduled date is today, apply it to the current absence state
            applyScheduledAbsencesToToday();
            
            // Update summary counts if grouped by tour
            if (scheduleGroupBy === 'tour') {
                updateScheduleSummaryCounts();
            }
        }

        /** Handles clicking the plus button on an off day to add overtime/switch */
        function handleScheduleAddOvertime(event) {
            const btn = event.target;
            const dateKey = btn.dataset.date;
            const memberName = btn.dataset.member;
            
            // Ask user what type of work this is
            const options = ['OVERTIME', 'SWITCH', 'TC', 'MUTUAL'];
            const choice = prompt(
                `Mark ${memberName} working on ${dateKey}\n\n` +
                `Select reason type:\n\n` +
                `1 = OVERTIME (coming in on day off)\n` +
                `2 = SWITCH (trading shifts with someone)\n` +
                `3 = TC (tour change)\n` +
                `4 = MUTUAL (mutual swap)\n\n` +
                `Enter 1, 2, 3, 4, or the full name (or cancel to close)`
            );
            
            if (!choice) return;
            
            // Map numeric choices or accept text
            let workType;
            const trimmed = choice.trim();
            if (trimmed === '1') workType = 'OVERTIME';
            else if (trimmed === '2') workType = 'SWITCH';
            else if (trimmed === '3') workType = 'TC';
            else if (trimmed === '4') workType = 'MUTUAL';
            else workType = trimmed.toUpperCase();
            
            if (!options.includes(workType)) {
                showNotification('Invalid option. Please select 1-4 or enter a valid work type', 'error');
                return;
            }
            
            // Show week picker for all work types
            handleWorkTypeSelection(dateKey, memberName, workType);
        }
        
        /** Handles work type selection - shows week view to pick days and time */
        function handleWorkTypeSelection(originalDateKey, memberName, workType) {
            // Store context for later use
            window.currentWorkTypeContext = {
                originalDateKey,
                memberName,
                workType
            };
            
            // Find the employee
            const employee = allEmployees.find(emp => {
                const empName = `${emp.lastName}, ${emp.firstName}`;
                return empName === memberName;
            });
            
            if (!employee) {
                showNotification('Employee not found', 'error');
                return;
            }
            
            // Get the week containing the original date (Sunday to Saturday)
            const originalDate = new Date(originalDateKey);
            const dayOfWeek = originalDate.getDay(); // 0 = Sunday, 6 = Saturday
            const weekStart = new Date(originalDate);
            weekStart.setDate(originalDate.getDate() - dayOfWeek); // Go back to Sunday
            
            // Update modal info based on work type
            document.getElementById('switch-employee-name').textContent = memberName;
            document.getElementById('switch-work-type').textContent = workType;
            
            let instructionText = '';
            if (workType === 'SWITCH') {
                instructionText = 'Select which day to take off instead';
            } else {
                instructionText = 'Select the day(s) to work';
            }
            document.getElementById('switch-instruction').textContent = instructionText;
            
            // Set default time to employee's start time or 08:00
            const defaultTime = employee.startTime ? formatMilitaryTime(employee.startTime) : '08:00';
            document.getElementById('work-time-input').value = defaultTime;
            
            // Build week day buttons
            const weekDaysContainer = document.getElementById('week-days-container');
            weekDaysContainer.innerHTML = '';
            
            for (let i = 0; i < 7; i++) {
                const date = new Date(weekStart);
                date.setDate(weekStart.getDate() + i);
                const dateKey = formatDateKey(date);
                const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
                
                // Check if this is a working day for the employee
                const workingPlatoons = getWorkingPlatoonsForDate(date);
                const isWorking = employee.platoon && workingPlatoons && workingPlatoons.includes(employee.platoon);
                const currentReason = (scheduleData[dateKey] && scheduleData[dateKey][memberName]) || '';
                
                const isOriginal = dateKey === originalDateKey;
                
                let statusText = '';
                let buttonClass = 'week-day-button';
                
                if (isOriginal) {
                    statusText = 'ORIGINAL';
                    buttonClass += ' original';
                } else if (currentReason) {
                    statusText = currentReason;
                    buttonClass += ' off';
                } else if (isWorking) {
                    statusText = '✓ ON';
                    buttonClass += ' working';
                } else {
                    statusText = '✗ OFF';
                    buttonClass += ' off';
                }
                
                const button = document.createElement('div');
                button.className = buttonClass;
                button.innerHTML = `
                    <div class="week-day-name">${dayName}</div>
                    <div class="week-day-date">${date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</div>
                    <div class="week-day-status">${statusText}</div>
                `;
                
                if (!isOriginal) {
                    button.style.cursor = 'pointer';
                    button.onclick = () => confirmWorkDay(dateKey, workType);
                }
                
                weekDaysContainer.appendChild(button);
            }
            
            // Show the modal
            document.getElementById('week-switch-modal').style.display = 'block';
        }
        
        /** Confirms and applies the work type selection */
        function confirmWorkDay(selectedDateKey, workType) {
            const context = window.currentWorkTypeContext;
            if (!context) return;
            
            const { originalDateKey, memberName } = context;
            
            // Get the selected time
            const timeInput = document.getElementById('work-time-input');
            const workTime = timeInput.value || '08:00';
            
            // Initialize schedule data objects if needed
            if (!scheduleData[originalDateKey]) {
                scheduleData[originalDateKey] = {};
            }
            if (!scheduleData[selectedDateKey]) {
                scheduleData[selectedDateKey] = {};
            }
            
            if (workType === 'SWITCH') {
                // SWITCH: Mark original as working, selected as off
                scheduleData[originalDateKey][memberName] = `SWITCH@${workTime}`;
                scheduleData[selectedDateKey][memberName] = 'OFF-SWITCH';
                
                showNotification(`${memberName}: ${originalDateKey} → working (SWITCH at ${workTime}), ${selectedDateKey} → off`, 'success', 3000);
            } else {
                // Other work types: Just mark the original day with time
                scheduleData[originalDateKey][memberName] = `${workType}@${workTime}`;
                
                showNotification(`${memberName}: ${originalDateKey} → ${workType} at ${workTime}`, 'success', 3000);
            }
            
            saveScheduleData();
            
            // Close modal
            closeWeekSwitchModal();
            
            // Refresh the table
            renderScheduleTable();
            
            // Update summary counts if grouped by tour
            if (scheduleGroupBy === 'tour') {
                updateScheduleSummaryCounts();
            }
        }
        
        /** Closes the week switch modal */
        function closeWeekSwitchModal() {
            document.getElementById('week-switch-modal').style.display = 'none';
        }

        /** Updates the summary row counts without re-rendering entire table */
        function updateScheduleSummaryCounts() {
            const summaryRows = document.querySelectorAll('.schedule-summary-row');
            if (!summaryRows.length) return;
            
            // Calculate date range
            const startDate = isScheduleWeekView 
                ? getWeekStart(currentScheduleDate)
                : getMonthStart(currentScheduleDate);
            const daysToShow = isScheduleWeekView ? 7 : getDaysInMonth(currentScheduleDate);
            
            // Process each summary row (one per tour group)
            summaryRows.forEach(summaryRow => {
                const functionSection = summaryRow.closest('.schedule-function-section');
                if (!functionSection) return;
                
                // Get all member rows in this section (exclude summary row)
                const memberRows = Array.from(functionSection.querySelectorAll('tbody tr')).filter(
                    row => !row.classList.contains('schedule-summary-row')
                );
                
                // Get all summary cells (skip first column which is the label)
                const summaryCells = Array.from(summaryRow.querySelectorAll('td')).slice(1);
                
                // Update each day's count
                summaryCells.forEach((cell, dayIndex) => {
                    const date = new Date(startDate);
                    date.setDate(startDate.getDate() + dayIndex);
                    const dateKey = formatDateKey(date);
                    
                    let workingCount = 0;
                    
                    // Count working members for this day
                    memberRows.forEach(row => {
                        const dayCells = Array.from(row.querySelectorAll('td')).slice(1);
                        const dayCell = dayCells[dayIndex];
                        if (!dayCell) return;
                        
                        // Check if this is a work day (has a select dropdown) and no absence selected
                        const select = dayCell.querySelector('.schedule-reason-select');
                        if (select && !select.value) {
                            workingCount++;
                        }
                    });
                    
                    cell.querySelector('strong').textContent = workingCount;
                });
            });
        }

        /** Saves schedule data to localStorage */
        function saveScheduleData() {
            try {
                localStorage.setItem(LS_KEYS.SCHEDULE_DATA, JSON.stringify(scheduleData));
            } catch (e) {
                console.error('Error saving schedule data:', e);
                showNotification('Error saving schedule data', 'error');
            }
        }

        /** Loads schedule data from localStorage */
        function loadScheduleData() {
            try {
                const saved = localStorage.getItem(LS_KEYS.SCHEDULE_DATA);
                if (saved) {
                    scheduleData = JSON.parse(saved);
                }
            } catch (e) {
                console.error('Error loading schedule data:', e);
                scheduleData = {};
            }
        }

        /** Handles schedule navigation - previous week */
        function handleSchedulePrevWeek() {
            currentScheduleDate.setDate(currentScheduleDate.getDate() - 7);
            updateScheduleView();
        }

        /** Handles schedule navigation - next week */
        function handleScheduleNextWeek() {
            currentScheduleDate.setDate(currentScheduleDate.getDate() + 7);
            updateScheduleView();
        }

        /** Handles schedule navigation - previous month */
        function handleSchedulePrevMonth() {
            currentScheduleDate.setMonth(currentScheduleDate.getMonth() - 1);
            updateScheduleView();
        }

        /** Handles schedule navigation - next month */
        function handleScheduleNextMonth() {
            currentScheduleDate.setMonth(currentScheduleDate.getMonth() + 1);
            updateScheduleView();
        }

        /** Toggles between week and month view */
        function toggleScheduleViewMode() {
            isScheduleWeekView = !isScheduleWeekView;
            const toggleBtn = document.getElementById('schedule-toggle-view-btn');
            if (toggleBtn) {
                toggleBtn.textContent = isScheduleWeekView ? 'Switch to Month' : 'Switch to Week';
            }
            updateScheduleView();
        }

        /** Gets scheduled absence for a specific date and member */
        function getScheduledAbsence(date, memberName) {
            const dateKey = formatDateKey(date);
            return (scheduleData[dateKey] && scheduleData[dateKey][memberName]) || null;
        }

        /** Exports the schedule view as a compact printable page */
        function exportScheduleView() {
            const printContainer = document.getElementById('schedule-print-container');
            if (!printContainer) {
                showNotification('Print container not found', 'error');
                return;
            }
            
            // Determine date range
            let startDate, daysToShow;
            if (isScheduleWeekView) {
                startDate = getStartOfWeek(currentScheduleDate);
                daysToShow = 7;
            } else {
                const month = currentScheduleDate.getMonth();
                const year = currentScheduleDate.getFullYear();
                startDate = new Date(year, month, 1);
                daysToShow = new Date(year, month + 1, 0).getDate();
            }
            
            // Build header
            const dateRangeText = isScheduleWeekView 
                ? `Week of ${startDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`
                : startDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
            
            let printHTML = `
                <div class="schedule-print-header">🚨 FDNY EMS Employee Schedule</div>
                <div class="schedule-print-subheader">NEW YORK CITY FIRE DEPARTMENT • ${dateRangeText}</div>
            `;
            
            // Group employees by selected criteria (with filtering)
            const grouped = {};
            allEmployees.forEach(emp => {
                const func = emp.function || 'Unassigned';
                const tour = emp.tour || 'Unknown';
                
                // Exclude inactive members from export
                if (emp.status === 'Inactive') {
                    return;
                }
                
                // Apply function filter
                if (scheduleSelectedFunctions.length > 0 && !scheduleSelectedFunctions.includes(func)) {
                    return;
                }
                
                // Apply tour filter
                if (scheduleSelectedTours.length > 0 && !scheduleSelectedTours.includes(tour)) {
                    return;
                }
                
                // Group by selected field - for tour grouping, include function name
                const groupKey = scheduleGroupBy === 'tour' ? `Tour ${tour} ${func}` : func;
                
                if (!grouped[groupKey]) {
                    grouped[groupKey] = [];
                }
                grouped[groupKey].push(emp);
            });
            
            // Sort groups logically
            const sortedGroups = Object.keys(grouped).sort((a, b) => {
                if (scheduleGroupBy === 'tour') {
                    // Extract tour number from "Tour X FunctionName" format
                    const tourMatchA = a.match(/Tour (\d+|Unknown)/);
                    const tourMatchB = b.match(/Tour (\d+|Unknown)/);
                    const tourA = tourMatchA ? tourMatchA[1] : 'Unknown';
                    const tourB = tourMatchB ? tourMatchB[1] : 'Unknown';
                    const orderMap = { '1': 1, '2': 2, '3': 3 };
                    const orderA = orderMap[tourA] || 999;
                    const orderB = orderMap[tourB] || 999;
                    if (orderA !== orderB) return orderA - orderB;
                    // If same tour, sort by function name
                    return a.localeCompare(b);
                }
                return a.localeCompare(b);
            });
            
            // Build compact tables for each group
            sortedGroups.forEach(groupName => {
                const groupMembers = sortEmployees(grouped[groupName]);
                
                printHTML += `<div class="schedule-print-function-title">${groupName}</div>`;
                printHTML += `<table class="schedule-print-table"><thead><tr><th class="name-cell">Name / Shield / Platoon</th>`;
                
                // Date headers
                for (let day = 0; day < daysToShow; day++) {
                    const date = new Date(startDate);
                    date.setDate(startDate.getDate() + day);
                    const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
                    const dayNum = date.getDate();
                    printHTML += `<th class="date-header">${dayName}<br>${dayNum}</th>`;
                }
                
                printHTML += `</tr></thead><tbody>`;
                
                // Employee rows
                groupMembers.forEach(member => {
                    const memberName = `${member.lastName}, ${member.firstName}`;
                    const shield = member.shield || '';
                    const platoon = member.platoon || '';
                    printHTML += `<tr><td class="name-cell">${member.lastName}, ${member.firstName.charAt(0)}. / ${shield} / ${platoon}</td>`;
                    
                    for (let day = 0; day < daysToShow; day++) {
                        const date = new Date(startDate);
                        date.setDate(startDate.getDate() + day);
                        const dateKey = formatDateKey(date);
                        
                        // Check if working day
                        const workingPlatoons = getWorkingPlatoonsForDate(date);
                        const isWorking = member.platoon && workingPlatoons && workingPlatoons.includes(member.platoon);
                        
                        const scheduledReason = (scheduleData[dateKey] && scheduleData[dateKey][memberName]) || '';
                        
                        if (!isWorking) {
                            printHTML += `<td class="off-cell">/</td>`;
                        } else if (scheduledReason) {
                            // Abbreviate common reasons for space
                            const abbrev = scheduledReason.length > 8 ? scheduledReason.substring(0, 8) : scheduledReason;
                            printHTML += `<td class="absence-cell">${abbrev}</td>`;
                        } else {
                            // Show start time in military format
                            const formattedTime = formatMilitaryTime(member.startTime);
                            printHTML += `<td class="work-cell">${formattedTime}</td>`;
                        }
                    }
                    
                    printHTML += `</tr>`;
                });
                
                // Add summary row with tour counts for this group
                printHTML += `<tr class="summary-row"><td class="name-cell"><strong>Tour Counts</strong></td>`;
                
                for (let day = 0; day < daysToShow; day++) {
                    const date = new Date(startDate);
                    date.setDate(startDate.getDate() + day);
                    const dateKey = formatDateKey(date);
                    
                    // Count by tour for this group
                    let tour1Count = 0, tour2Count = 0, tour3Count = 0;
                    groupMembers.forEach(member => {
                        const memberName = `${member.lastName}, ${member.firstName}`;
                        const workingPlatoons = getWorkingPlatoonsForDate(date);
                        const isWorking = member.platoon && workingPlatoons && workingPlatoons.includes(member.platoon);
                        const hasAbsence = scheduleData[dateKey] && scheduleData[dateKey][memberName];
                        
                        if (isWorking && !hasAbsence) {
                            if (member.tour === '1') tour1Count++;
                            else if (member.tour === '2') tour2Count++;
                            else if (member.tour === '3') tour3Count++;
                        }
                    });
                    
                    const tourBreakdown = [];
                    if (tour1Count > 0) tourBreakdown.push(`T1:${tour1Count}`);
                    if (tour2Count > 0) tourBreakdown.push(`T2:${tour2Count}`);
                    if (tour3Count > 0) tourBreakdown.push(`T3:${tour3Count}`);
                    const displayText = tourBreakdown.length > 0 ? tourBreakdown.join(' ') : '0';
                    
                    printHTML += `<td class="summary-cell"><strong>${displayText}</strong></td>`;
                }
                
                printHTML += `</tr>`;
                
                printHTML += `</tbody></table>`;
            });
            
            // Add FDNY footer with motto
            printHTML += `
                <div style="text-align: center; margin-top: 12px; padding-top: 8px; border-top: 2px solid #003478; font-size: 7pt; color: #666;">
                    <strong style="color: #C8102E;">NEW YORK'S BRAVEST</strong> • Fire Department City of New York • Generated: ${new Date().toLocaleDateString('en-US')} ${new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}
                </div>
            `;
            
            // Set the print content
            printContainer.innerHTML = printHTML;
            printContainer.style.display = 'block';
            
            // Trigger print
            document.body.classList.add('schedule-print-mode');
            
            // Small delay to ensure DOM is updated before print
            setTimeout(() => {
                window.print();
                
                // Clean up after print dialog closes
                setTimeout(() => {
                    document.body.classList.remove('schedule-print-mode');
                    printContainer.style.display = 'none';
                }, 500);
            }, 100);
        }

        /** Applies scheduled absences for the current display date to the absence state */
        function applyScheduledAbsencesToToday() {
            const todayKey = formatDateKey(new Date(currentDisplayDate));
            const scheduledAbsences = scheduleData[todayKey];
            
            if (!scheduledAbsences) return;
            
            // Define overtime-related reasons that should go to "added" instead of "absent"
            const overtimeReasons = ['OVERTIME', 'SWITCH', 'TC', 'MUTUAL'];
            
            // Apply each scheduled item to today's state
            Object.keys(scheduledAbsences).forEach(memberName => {
                let reason = scheduledAbsences[memberName];
                
                // Parse reason and time (format: "OVERTIME@08:00" or just "OVERTIME")
                let reasonType = reason;
                if (reason.includes('@')) {
                    const parts = reason.split('@');
                    reasonType = parts[0];
                    // Keep the full reason with time for display
                }
                
                // Find the employee by matching "LastName, FirstName" format
                const employee = allEmployees.find(emp => {
                    const empName = `${emp.lastName}, ${emp.firstName}`;
                    return empName === memberName;
                });
                
                if (employee) {
                    // Check if this is an overtime-related reason
                    if (overtimeReasons.includes(reasonType.toUpperCase())) {
                        // Add to "added" state (working today)
                        if (!addedState.today[employee.id]) {
                            addedState.today[employee.id] = {
                                reason: reason, // Keep the full reason with time
                                shield: employee.shield || ''
                            };
                        }
                    } else {
                        // Add to absence state (not working today) - includes OFF-SWITCH
                        if (!absenceState.today[employee.id]) {
                            absenceState.today[employee.id] = reason;
                        }
                    }
                }
            });
            
            // Save state and update views
            saveState();
            populateSideLists();
            updateSummary();
        }

        /** Handles selection of an absence reason */
        function handleReasonChange(event, employeeId) {
            const selectedReason = event.target.value;
            const parentListId = event.target.closest('.drop-zone').id;
            const stateKey = 'today'; // Only handle today now
            
            if (absenceState[stateKey].hasOwnProperty(employeeId)) {
                // Check if overtime is selected
                if (selectedReason.toLowerCase() === 'overtime') {
                    handleOvertimeSelection(employeeId, event.target, 'absence');
                } else {
                    absenceState[stateKey][employeeId] = selectedReason;
                    trackLeaveUsage(employeeId, selectedReason); // Track leave usage
                    
                    // Update schedule data for today
                    const employee = allEmployees.find(emp => emp.id === employeeId);
                    if (employee) {
                        const memberName = `${employee.lastName}, ${employee.firstName}`;
                        const todayKey = formatDateKey(new Date(currentDisplayDate));
                        if (!scheduleData[todayKey]) {
                            scheduleData[todayKey] = {};
                        }
                        scheduleData[todayKey][memberName] = selectedReason;
                        saveScheduleData();
                        renderScheduleTable();
                    }
                    
                    saveState(); // Save state on reason change
                }
            }
            console.log(`Absence Reason for ${employeeId} (${stateKey}): ${selectedReason}`);
        }
        
        /** Handles selection of an added reason */
        function handleAddedReasonChange(event, employeeId) {
            const selectedReason = event.target.value;
            const parentListId = event.target.closest('.drop-zone').id;
            const stateKey = 'today'; // Only handle today now
            
            if (addedState[stateKey].hasOwnProperty(employeeId)) {
                if (typeof addedState[stateKey][employeeId] !== 'object' || addedState[stateKey][employeeId] === null) {
                    addedState[stateKey][employeeId] = { reason: '', shield: '' }; // Initialize if needed
                }
                
                // Check if overtime is selected
                if (selectedReason.toLowerCase() === 'overtime') {
                    handleOvertimeSelection(employeeId, event.target, 'added');
                } else {
                    addedState[stateKey][employeeId].reason = selectedReason;
                    
                    // Update schedule data for today
                    const employee = allEmployees.find(emp => emp.id === employeeId);
                    if (employee) {
                        const memberName = `${employee.lastName}, ${employee.firstName}`;
                        const todayKey = formatDateKey(new Date(currentDisplayDate));
                        if (!scheduleData[todayKey]) {
                            scheduleData[todayKey] = {};
                        }
                        scheduleData[todayKey][memberName] = selectedReason;
                        saveScheduleData();
                        renderScheduleTable();
                    }
                    
                    saveState(); // Save state on reason change
                }
            }
            console.log(`Added Reason for ${employeeId} (${stateKey}): ${selectedReason}`);
        }        /** Handles input in the added shield field */
        function handleAddedShieldChange(event, employeeId) {
            const enteredShield = event.target.value.trim();
            const parentListId = event.target.closest('.drop-zone').id;
            const stateKey = 'today'; // Only handle today now
             if (addedState[stateKey].hasOwnProperty(employeeId)) {
                 if (typeof addedState[stateKey][employeeId] !== 'object' || addedState[stateKey][employeeId] === null) {
                     addedState[stateKey][employeeId] = { reason: '', shield: '' }; // Initialize if needed
                 }
                 addedState[stateKey][employeeId].shield = enteredShield;
                 saveState(); // Save state on shield change
            }
            console.log(`Added Shield for ${employeeId} (${stateKey}): ${enteredShield}`);
        }        /** Handles tour selection change for added employees */
        function handleAddedTourChange(event, employeeId) {
            const selectedTour = event.target.value;
            const parentListId = event.target.closest('.drop-zone').id;
            const stateKey = 'today'; // Only handle today now
            if (addedState[stateKey].hasOwnProperty(employeeId)) {
                if (typeof addedState[stateKey][employeeId] !== 'object' || addedState[stateKey][employeeId] === null) {
                    addedState[stateKey][employeeId] = { reason: '', shield: '', tour: '' }; // Initialize if needed
                }
                addedState[stateKey][employeeId].tour = selectedTour;
                
                // Update tour info display in the employee name
                const employeeItem = document.getElementById(employeeId);
                if (employeeItem) {
                    const nameSpan = employeeItem.querySelector('.employee-name');
                    const existingTourInfo = nameSpan.querySelector('.added-tour-info');
                    
                    if (existingTourInfo) {
                        existingTourInfo.remove();
                    }
                      if (selectedTour) {
                        const tourInfo = document.createElement('span');
                        tourInfo.className = 'added-tour-info';
                        tourInfo.textContent = `T${selectedTour}`;
                        nameSpan.appendChild(tourInfo);
                    }
                }
                
                saveState(); // Save state on tour change
            }
            console.log(`Added Tour for ${employeeId} (${stateKey}): ${selectedTour}`);
        }
        
        /** Handles overtime selection and prompts for additional details */
        function handleOvertimeSelection(employeeId, selectElement, listType) {
            // Get current time in HH:MM format
            const now = new Date();
            const currentTime = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
            
            // Create overtime modal/prompt
            const modalHTML = `
                <div id="overtime-modal" class="modal" style="display: block;">
                    <div class="modal-content">
                        <span class="close-btn" onclick="closeOvertimeModal()">&times;</span>
                        <h2>Overtime Details</h2>
                        <form id="overtime-form">
                            <div style="margin-bottom: 15px; display: flex; align-items: center; gap: 10px;">
                                <label for="overtime-start-time">Start Time:</label>
                                <button type="button" onclick="adjustOvertimeTime(-15)" style="padding: 5px 10px;">-15m</button>
                                <button type="button" onclick="adjustOvertimeTime(-5)" style="padding: 5px 10px;">-5m</button>
                                <input type="time" id="overtime-start-time" value="${currentTime}" style="width: 120px; font-size: 1em; padding: 5px;">
                                <button type="button" onclick="adjustOvertimeTime(5)" style="padding: 5px 10px;">+5m</button>
                                <button type="button" onclick="adjustOvertimeTime(15)" style="padding: 5px 10px;">+15m</button>
                            </div>
                            <div style="margin-bottom: 15px;">
                                <label for="overtime-hours">Hours:</label>
                                <input type="number" id="overtime-hours" min="0" max="24" value="0" style="width: 60px; margin: 0 10px;">
                                <label for="overtime-minutes">Minutes:</label>
                                <input type="number" id="overtime-minutes" min="0" max="59" value="0" style="width: 60px; margin: 0 10px;">
                            </div>
                            <div style="margin-bottom: 15px;">
                                <label for="overtime-person-name">Person Name:</label>
                                <input type="text" id="overtime-person-name" placeholder="Enter person's name" style="width: 200px;">
                            </div>
                            <div style="margin-bottom: 15px;">
                                <label for="overtime-vice">Vice:</label>
                                <input type="text" id="overtime-vice" placeholder="Vice information" style="width: 200px;">
                            </div>
                            <div style="margin-bottom: 15px;">
                                <label for="overtime-shield">Shield:</label>
                                <input type="text" id="overtime-shield" placeholder="Shield number" style="width: 200px;">
                            </div>
                            <div style="margin-bottom: 15px;">
                                <label for="overtime-reason">Reason:</label>
                                <input type="text" id="overtime-reason" placeholder="Reason for overtime" style="width: 200px;">
                            </div>
                            <div>
                                <button type="button" onclick="saveOvertimeDetails('${employeeId}', '${listType}')">Save Overtime</button>
                                <button type="button" onclick="closeOvertimeModal()">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>`;
            
            // Add modal to page
            document.body.insertAdjacentHTML('beforeend', modalHTML);
        }
        
        /** Adjusts overtime start time by minutes */
        function adjustOvertimeTime(minutesChange) {
            const timeInput = document.getElementById('overtime-start-time');
            if (!timeInput) return;
            
            // Parse current time
            const [hours, minutes] = timeInput.value.split(':').map(Number);
            
            // Create date object and adjust
            const date = new Date();
            date.setHours(hours);
            date.setMinutes(minutes + minutesChange);
            
            // Format back to HH:MM
            const newTime = `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;
            timeInput.value = newTime;
        }
        
        /** Saves overtime details */
        function saveOvertimeDetails(employeeId, listType) {
            const startTime = document.getElementById('overtime-start-time').value.trim();
            const hours = parseInt(document.getElementById('overtime-hours').value) || 0;
            const minutes = parseInt(document.getElementById('overtime-minutes').value) || 0;
            const personName = document.getElementById('overtime-person-name').value.trim();
            const vice = document.getElementById('overtime-vice').value.trim();
            const shield = document.getElementById('overtime-shield').value.trim();
            const reason = document.getElementById('overtime-reason').value.trim();
            
            const overtimeData = {
                startTime: startTime,
                hours: hours,
                minutes: minutes,
                totalMinutes: hours * 60 + minutes,
                personName: personName,
                vice: vice,
                shield: shield,
                reason: reason,
                date: new Date().toISOString().split('T')[0]
            };
            
            const stateKey = 'today';
            const overtimeReason = `Overtime (${startTime ? startTime + ', ' : ''}${hours}h ${minutes}m)`;
            
            // Initialize overtime tracking if not exists
            if (!window.overtimeTracking) {
                window.overtimeTracking = {};
            }
            if (!window.overtimeTracking[stateKey]) {
                window.overtimeTracking[stateKey] = {};
            }
            
            // Save overtime data
            window.overtimeTracking[stateKey][employeeId] = overtimeData;
            
            // Update the appropriate state
            if (listType === 'absence') {
                absenceState[stateKey][employeeId] = overtimeReason;
                trackLeaveUsage(employeeId, overtimeReason);
            } else if (listType === 'added') {
                if (typeof addedState[stateKey][employeeId] !== 'object' || addedState[stateKey][employeeId] === null) {
                    addedState[stateKey][employeeId] = { reason: '', shield: '' };
                }
                addedState[stateKey][employeeId].reason = overtimeReason;
            }
            
            saveState();
            closeOvertimeModal();
            
            console.log(`Overtime saved for ${employeeId}: ${hours}h ${minutes}m`);
        }
        
        /** Closes the overtime modal */
        function closeOvertimeModal() {
            const modal = document.getElementById('overtime-modal');
            if (modal) {
                modal.remove();
            }
        }

        /** Handles checking the absence checkbox in the main list */
        function handleAbsenceCheckboxCheck(checkboxElement, employeeId) {
            if (!checkboxElement.checked) return; // Only act when checked

            const employeeElement = document.getElementById(employeeId);
            if (!employeeElement) return;

            console.log(`Marking ${employeeId} absent for today via checkbox.`);

            // Update state
            absenceState.today[employeeId] = ''; // Add to today's absence state (reason empty initially)

            // Update schedule data for today
            const employee = allEmployees.find(emp => emp.id === employeeId);
            if (employee) {
                const memberName = `${employee.lastName}, ${employee.firstName}`;
                const todayKey = formatDateKey(new Date(currentDisplayDate));
                if (!scheduleData[todayKey]) {
                    scheduleData[todayKey] = {};
                }
                scheduleData[todayKey][memberName] = ''; // Empty reason initially
                saveScheduleData();
            }

            // Remove element from main list
            employeeElement.remove();

            // Refresh side lists, summary, schedule table, and save
            populateSideLists();
            updateSummary();
            renderScheduleTable();
            saveState();

            // Optional: Uncheck the box visually (though the element is removed)
            // checkboxElement.checked = false;
        }


        /** Handles removing an employee from ANY side list (Absent or Added) */
        function handleRemoveFromSideList(employeeElement) {
            const employeeId = employeeElement.id;
            const parentList = employeeElement.closest('.drop-zone');
            if (!parentList) return;

            const wasAbsent = employeeElement.classList.contains('absent');
            const wasAdded = employeeElement.classList.contains('added-schedule');

            // Remove controls
            const controls = employeeElement.querySelector('.employee-controls');
            if (controls) {
                employeeElement.removeChild(controls);
            }
            // Remove visual state class
            employeeElement.classList.remove('absent', 'added-schedule');
            employeeElement.setAttribute('draggable', 'true'); // Re-enable dragging

            // Get employee info to update schedule
            const employee = allEmployees.find(emp => emp.id === employeeId);
            if (employee) {
                const memberName = `${employee.lastName}, ${employee.firstName}`;
                const todayKey = formatDateKey(new Date(currentDisplayDate));
                
                // Remove from schedule data for today
                if (scheduleData[todayKey] && scheduleData[todayKey][memberName]) {
                    delete scheduleData[todayKey][memberName];
                    // Clean up empty date objects
                    if (Object.keys(scheduleData[todayKey]).length === 0) {
                        delete scheduleData[todayKey];
                    }
                    saveScheduleData();
                }
            }

            // Update the correct state object
            if (wasAbsent) {
                delete absenceState.today[employeeId];
                console.log(`Removed ${employeeId} from absent today`);
            } else if (wasAdded) {
                delete addedState.today[employeeId];
                 console.log(`Removed ${employeeId} from added today`);
            }

            // Remove element (it will be re-added by applyFiltersAndPopulate if it matches filters)
            employeeElement.remove();

            // Refresh main list and summary
            applyFiltersAndPopulate(); // This also calls saveState implicitly through dependency
            updateSummary(); // Update summary counts
            
            // Refresh schedule table if visible
            renderScheduleTable();
        }


        /** Handles adding a new member */
        function handleAddMember() {
            const firstName = newMemberFirstNameInput.value.trim();
            const lastName = newMemberLastNameInput.value.trim();
            const func = newMemberFunctionInput.value.trim();
            const tour = newMemberTourInput.value.trim();
            const platoon = newMemberPlatoonInput.value.trim();
            const startTime = normalizeTimeForStorage(newMemberStartTimeInput.value.trim());
            const shield = newMemberRefInput.value.trim();
            const vax = newMemberVaxInput.value.trim(); // Get Vax value
            const status = newMemberStatusInput.value.trim() || 'ACTIVE'; // Get Status value

            if (!firstName || !lastName) {
                showNotification("First and Last name are required.", 'warning');
                return;
            }

            const exists = allEmployees.some(emp =>
                (emp.firstName === firstName && emp.lastName === lastName) ||
                (shield && emp.shield === shield)
            );
            if (exists) {
                 showNotification(`${firstName} ${lastName} or Shield #${shield} already exists.`, 'warning');
                 return;
            }

            const newEmployee = {
                shield: shield || `new-${Date.now()}`,
                firstName,
                lastName,
                fullName: `${firstName} ${lastName}`,
                function: func,
                tour,
                platoon,
                startTime,
                vax, // Add vax property
                status // Add status property
            };

            const empId = newEmployee.shield ? `emp-shield-${newEmployee.shield}` : `emp-idx-${allEmployees.length}`;
            newEmployee.id = empId;

            allEmployees.push(newEmployee);
            sortEmployees(allEmployees);

            // Clear all input fields
            newMemberFirstNameInput.value = '';
            newMemberLastNameInput.value = '';
            newMemberFunctionInput.value = '';
            newMemberTourInput.value = '';
            newMemberPlatoonInput.value = '';
            newMemberStartTimeInput.value = '';
            newMemberRefInput.value = '';
            newMemberVaxInput.value = ''; // Clear Vax input
            newMemberStatusInput.value = 'ACTIVE'; // Reset to ACTIVE

            populateFilters();
            applyFiltersAndPopulate(); // Refreshes list and saves state
            updateSummary(); // Update summary counts
            showNotification(`Added new member: ${newEmployee.fullName}`, 'success');
            console.log("Added new member:", newEmployee);
            renderMemberList(); // Update member list display
        }
        
        /** Renders the member list in the Member Management tab */
        function renderMemberList() {
            console.log('renderMemberList called');
            const memberListContainer = document.getElementById('member-list');
            const searchInput = document.getElementById('member-search-input');
            
            console.log('memberListContainer:', memberListContainer);
            console.log('allEmployees count:', allEmployees.length);
            
            if (!memberListContainer) {
                console.error('member-list container not found!');
                return;
            }
            
            const searchTerm = searchInput ? searchInput.value.trim().toLowerCase() : '';
            
            // Filter employees based on search
            let filteredEmployees = allEmployees;
            if (searchTerm) {
                filteredEmployees = allEmployees.filter(emp => {
                    const fullName = `${emp.firstName} ${emp.lastName}`.toLowerCase();
                    const reverseName = `${emp.lastName} ${emp.firstName}`.toLowerCase();
                    const shield = (emp.shield || '').toString().toLowerCase();
                    return fullName.includes(searchTerm) || 
                           reverseName.includes(searchTerm) || 
                           shield.includes(searchTerm);
                });
            }
            
            console.log('filteredEmployees count:', filteredEmployees.length);
            
            if (filteredEmployees.length === 0) {
                memberListContainer.innerHTML = '<p style="text-align: center; color: var(--dm-secondary-color); padding: 20px;">No members found.</p>';
                return;
            }
            
            // Sort employees
            const sortedEmployees = sortEmployees([...filteredEmployees]);
            
            // Build HTML
            let html = '';
            sortedEmployees.forEach((emp, index) => {
                const displayName = `${emp.lastName}, ${emp.firstName}`;
                const details = [];
                if (emp.function) details.push(`Function: ${emp.function}`);
                if (emp.tour) details.push(`Tour: ${emp.tour}`);
                if (emp.shield) details.push(`Shield: ${emp.shield}`);
                if (emp.status) details.push(`Status: ${emp.status}`);
                
                // Use index as a simpler identifier
                const itemId = `member-${index}`;
                
                html += `
                    <div class="member-list-item" data-employee-id="${emp.id}" data-item-id="${itemId}">
                        <div class="member-list-item-info">
                            <div class="member-list-item-name">${displayName}</div>
                            <div class="member-list-item-details">${details.join(' • ')}</div>
                        </div>
                        <div class="member-list-item-actions">
                            <button class="member-edit-btn" data-employee-id="${emp.id}" data-index="${index}">✏️ Edit</button>
                            <button class="member-delete-btn" data-employee-id="${emp.id}" data-index="${index}">🗑️ Delete</button>
                        </div>
                    </div>
                `;
            });
            
            memberListContainer.innerHTML = html;
        }
        
        /** Handles updating an existing member */
        function handleUpdateMember(employeeId) {
            const employee = allEmployees.find(emp => emp.id === employeeId);
            if (!employee) {
                showNotification('Employee not found', 'error');
                return;
            }
            
            const firstName = newMemberFirstNameInput.value.trim();
            const lastName = newMemberLastNameInput.value.trim();
            
            if (!firstName || !lastName) {
                showNotification("First and Last name are required.", 'warning');
                return;
            }
            
            // Update employee data
            employee.firstName = firstName;
            employee.lastName = lastName;
            employee.fullName = `${firstName} ${lastName}`;
            employee.function = newMemberFunctionInput.value.trim();
            employee.tour = newMemberTourInput.value.trim();
            employee.platoon = newMemberPlatoonInput.value.trim();
            employee.startTime = normalizeTimeForStorage(newMemberStartTimeInput.value.trim());
            employee.shield = newMemberRefInput.value.trim();
            employee.vax = newMemberVaxInput.value.trim();
            employee.status = newMemberStatusInput.value.trim() || 'ACTIVE';
            
            // Clear form
            newMemberFirstNameInput.value = '';
            newMemberLastNameInput.value = '';
            newMemberFunctionInput.value = '';
            newMemberTourInput.value = '';
            newMemberPlatoonInput.value = '';
            newMemberStartTimeInput.value = '';
            newMemberRefInput.value = '';
            newMemberVaxInput.value = '';
            newMemberStatusInput.value = 'ACTIVE';
            
            // Reset button
            if (addMemberBtn) {
                addMemberBtn.textContent = 'Add Member';
                addMemberBtn.style.backgroundColor = '';
                delete addMemberBtn.dataset.editingId;
            }
            
            // Hide cancel button
            const cancelEditBtn = document.getElementById('cancel-edit-btn');
            if (cancelEditBtn) {
                cancelEditBtn.style.display = 'none';
            }
            
            sortEmployees(allEmployees);
            saveState();
            renderMemberList();
            showNotification(`Updated: ${employee.fullName}`, 'success');
        }
        
        /** Handles deleting a member */
        function handleDeleteMember(employeeId) {
            const employee = allEmployees.find(emp => emp.id === employeeId);
            if (!employee) {
                showNotification('Employee not found', 'error');
                return;
            }
            
            if (!confirm(`Are you sure you want to delete ${employee.firstName} ${employee.lastName}?`)) {
                return;
            }
            
            // Remove from allEmployees array
            const index = allEmployees.findIndex(emp => emp.id === employeeId);
            if (index > -1) {
                allEmployees.splice(index, 1);
            }
            
            saveState();
            populateFilters();
            applyFiltersAndPopulate();
            updateSummary();
            renderMemberList();
            showNotification(`Deleted: ${employee.firstName} ${employee.lastName}`, 'success');
        }
        
        /** Handles reloading/refreshing data throughout the app */
        function handleReloadMembers() {
            saveState();
            populateFilters();
            applyFiltersAndPopulate();
            updateSummary();
            renderMemberList();
            showNotification('Data reloaded successfully! All changes are now live.', 'success');
        }
        
        /** Handles exporting current employee data as CSV */
        function handleExportCSV() {
            if (allEmployees.length === 0) {
                showNotification('No employee data to export', 'warning');
                return;
            }
            
            // CSV Header
            const headers = ['DOB', 'Approved Positions', 'FirstName', 'LastName', 'Function', 'Tour', 'Platoon', 'Start Time', 'Shield', 'Vax#', 'Status'];
            let csvContent = headers.join(',') + '\n';
            
            // CSV Rows
            allEmployees.forEach(emp => {
                const row = [
                    emp.dob || '',
                    emp.approvedPositions || '',
                    emp.firstName || '',
                    emp.lastName || '',
                    emp.function || '',
                    emp.tour || '',
                    emp.platoon || '',
                    emp.startTime || '',
                    emp.shield || '',
                    emp.vax || '',
                    emp.status || 'ACTIVE'
                ];
                
                // Escape commas and quotes in fields
                const escapedRow = row.map(field => {
                    const str = String(field);
                    if (str.includes(',') || str.includes('"') || str.includes('\n')) {
                        return `"${str.replace(/"/g, '""')}"`;
                    }
                    return str;
                });
                
                csvContent += escapedRow.join(',') + '\n';
            });
            
            // Create download
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            const timestamp = new Date().toISOString().slice(0, 10);
            
            link.setAttribute('href', url);
            link.setAttribute('download', `ems-staffing-${timestamp}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            showNotification(`CSV exported successfully: ems-staffing-${timestamp}.csv`, 'success');
        }

        /** Handles removing a member from the master list */
        function handleRemoveMember(employeeId) {
            const index = allEmployees.findIndex(emp => emp.id === employeeId);
            if (index > -1) {
                const removedEmployee = allEmployees.splice(index, 1)[0];
                console.log("Removed member:", removedEmployee);

                delete absenceState.today[employeeId];
                delete addedState.today[employeeId];

                populateFilters();
                applyFiltersAndPopulate(); // Refreshes list and saves state
                updateSummary();
            } else {
                console.warn(`Could not find employee with ID ${employeeId} to remove.`);
            }
        }

        /** Handles clicking the edit button on an employee item */
        function handleEditMember(employeeId) {
            console.log("handleEditMember called for:", employeeId);
            const employee = allEmployees.find(emp => emp.id === employeeId);
            
            if (!employee) {
                console.log("Edit aborted: Employee not found.");
                showNotification('Employee not found', 'error');
                return;
            }
            
            console.log("Found employee:", employee);
            
            // Get form fields
            const firstNameInput = document.getElementById('new-member-firstname');
            const lastNameInput = document.getElementById('new-member-lastname');
            const functionInput = document.getElementById('new-member-function');
            const tourInput = document.getElementById('new-member-tour');
            const platoonInput = document.getElementById('new-member-platoon');
            const startTimeInput = document.getElementById('new-member-start-time');
            const shieldInput = document.getElementById('new-member-ref');
            const vaxInput = document.getElementById('new-member-vax');
            const statusInput = document.getElementById('new-member-status');
            const addMemberBtn = document.getElementById('add-member-btn');
            const cancelEditBtn = document.getElementById('cancel-edit-btn');
            
            // Populate form with employee data
            if (firstNameInput) firstNameInput.value = employee.firstName || '';
            if (lastNameInput) lastNameInput.value = employee.lastName || '';
            if (functionInput) functionInput.value = employee.function || '';
            if (tourInput) tourInput.value = employee.tour || '';
            if (platoonInput) platoonInput.value = employee.platoon || '';
            if (startTimeInput) startTimeInput.value = employee.startTime || '';
            if (shieldInput) shieldInput.value = employee.shield || '';
            if (vaxInput) vaxInput.value = employee.vax || '';
            if (statusInput) statusInput.value = employee.status || 'ACTIVE';
            
            // Change button to "Update Member" mode
            if (addMemberBtn) {
                addMemberBtn.textContent = '✏️ Update Member';
                addMemberBtn.style.backgroundColor = 'var(--dm-warning-color)';
                addMemberBtn.dataset.editingId = employeeId;
            }
            
            // Show cancel button
            if (cancelEditBtn) {
                cancelEditBtn.style.display = 'inline-block';
            }
            
            // Highlight the form section
            const formSection = document.querySelector('.add-member-form');
            if (formSection) {
                formSection.style.backgroundColor = 'rgba(255, 193, 7, 0.1)';
                formSection.style.border = '2px solid var(--dm-warning-color)';
                formSection.style.padding = '15px';
                formSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
            
            console.log("Form populated with employee data for editing");
            showNotification(`Editing: ${employee.firstName} ${employee.lastName}`, 'info');
        }

        /** Handles saving the edited employee data */
        function handleSaveEdit(buttonElement) {
            const employeeId = buttonElement.dataset.id;
            console.log("handleSaveEdit called for:", employeeId); // Debug log
            const li = document.getElementById(employeeId);
            const inputs = li.querySelectorAll('.edit-input');

            const updatedData = {
                firstName: inputs[0].value.trim(),
                lastName: inputs[1].value.trim(),
                function: inputs[2].value.trim(),
                tour: inputs[3].value.trim(),
                platoon: inputs[4].value.trim(),
                startTime: inputs[5].value.trim(),
                shield: inputs[6].value.trim(),
                vax: inputs[7].value.trim(), // Get Vax value
                status: inputs[8].value.trim() || 'ACTIVE' // Get Status value
            };

            if (!updatedData.firstName || !updatedData.lastName) {
                showNotification("First and Last name cannot be empty.", 'warning');
                return;
            }

            const index = allEmployees.findIndex(emp => emp.id === employeeId);
            if (index > -1) {
                allEmployees[index] = {
                    ...allEmployees[index],
                    ...updatedData,
                    fullName: `${updatedData.firstName} ${updatedData.lastName}`
                };

                const updatedEmployee = allEmployees[index];
                const newLiContent = createEmployeeElement(updatedEmployee);
                li.innerHTML = newLiContent.innerHTML;
                // Update dataset attributes including vax and status
                Object.keys(newLiContent.dataset).forEach(key => {
                    li.dataset[key] = newLiContent.dataset[key];
                });
                li.classList.remove('editing');
                li.setAttribute('draggable', 'true');

                 // Re-add listeners via delegation (already handled in DOMContentLoaded)

                populateFilters();
                updateSummary(); // Calls saveState
                showNotification(`Updated member: ${updatedEmployee.fullName}`, 'success');
                console.log("Updated employee:", updatedEmployee);
            } else {
                console.error("Could not find employee to save edit:", employeeId);
                handleCancelEdit(employeeId);
            }
        }

        /** Handles canceling the edit operation */
        function handleCancelEdit(employeeId) {
            console.log("handleCancelEdit called for:", employeeId); // Debug log
            const li = document.getElementById(employeeId);
            if (li && li.dataset.originalContent) {
                li.innerHTML = li.dataset.originalContent;
                li.classList.remove('editing');
                li.setAttribute('draggable', 'true');
                delete li.dataset.originalContent;
                console.log("Edit cancelled, restored original content for:", employeeId); // Debug log

                 // Re-add listeners via delegation (already handled in DOMContentLoaded)
            }
        }


        /** Populates a single reason dropdown select element */
        function populateReasonDropdown(selectElement) {
            const currentValue = selectElement.value;
            selectElement.innerHTML = '';

            const defaultOption = document.createElement('option');
            defaultOption.value = "";
            defaultOption.textContent = "Select Reason...";
            selectElement.appendChild(defaultOption);

            absenceReasons.forEach(reason => {
                const option = document.createElement('option');
                option.value = reason;
                option.textContent = reason;
                selectElement.appendChild(option);
            });

            if (absenceReasons.includes(currentValue)) {
                 selectElement.value = currentValue;
            } else {
                 selectElement.value = "";
            }
        }

        /** Formats a date object as "Weekday, MM/DD" */
        function formatShortWeekdayDate(date) {
            const options = { weekday: 'short', month: '2-digit', day: '2-digit' };
            return date.toLocaleDateString('en-US', options);
        }
        /** Formats a date object as "Weekday, MM/DD/YYYY" */
        function formatFullDate(date) {
            const options = { weekday: 'long', year: 'numeric', month: '2-digit', day: '2-digit' };
            return date.toLocaleDateString('en-US', options);
        }
        /** Formats a date object as MM/DD/YYYY */
        function formatDate(date) { // Keep simple format for export filename
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const year = date.getFullYear();
            return `${month}/${day}/${year}`;
        }        /** Displays today's date */
        function displayDates() {
            const today = new Date();
            const todayFormatted = formatFullDate(today);

            if (todayDateDisplay) todayDateDisplay.textContent = `(${todayFormatted})`;
            if (summaryDateDisplay) summaryDateDisplay.textContent = `(${todayFormatted})`; // Add date to summary title

            // Update the new schedule date display
            if (currentScheduleDateDisplay) currentScheduleDateDisplay.textContent = formatShortWeekdayDate(currentDisplayDate);
            
            // Update the prominent rundown date indicator
            updateRundownDateIndicator();
        }
        
        /** Updates the prominent date indicator showing which date's rundown is displayed */
        function updateRundownDateIndicator() {
            const rundownDateText = document.getElementById('rundown-date-text');
            const exceptionsTabBtn = document.getElementById('exceptions-tab-btn');
            const exceptionsHeader = document.getElementById('exceptions-date-header');
            
            if (!rundownDateText) return;
            
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const displayDate = new Date(currentDisplayDate);
            displayDate.setHours(0, 0, 0, 0);
            
            let dateLabel = '';
            
            // Check if it's today
            if (displayDate.getTime() === today.getTime()) {
                rundownDateText.innerHTML = '<strong>TODAY</strong> - ' + formatShortWeekdayDate(displayDate);
                dateLabel = "Today's";
            } else {
                // Calculate days difference
                const diffTime = displayDate.getTime() - today.getTime();
                const diffDays = Math.round(diffTime / (1000 * 60 * 60 * 24));
                
                if (diffDays === 1) {
                    rundownDateText.innerHTML = '<strong>TOMORROW</strong> - ' + formatShortWeekdayDate(displayDate);
                    dateLabel = "Tomorrow's";
                } else if (diffDays === -1) {
                    rundownDateText.innerHTML = '<strong>YESTERDAY</strong> - ' + formatShortWeekdayDate(displayDate);
                    dateLabel = "Yesterday's";
                } else if (diffDays > 0) {
                    rundownDateText.innerHTML = formatShortWeekdayDate(displayDate) + ' <span style="font-size: 0.85em; opacity: 0.9;">(+' + diffDays + ' days)</span>';
                    dateLabel = formatShortWeekdayDate(displayDate);
                } else {
                    rundownDateText.innerHTML = formatShortWeekdayDate(displayDate) + ' <span style="font-size: 0.85em; opacity: 0.9;">(' + diffDays + ' days)</span>';
                    dateLabel = formatShortWeekdayDate(displayDate);
                }
            }
            
            // Update exceptions tab and header
            if (exceptionsTabBtn) {
                exceptionsTabBtn.textContent = `${dateLabel} Exceptions`;
            }
            if (exceptionsHeader) {
                exceptionsHeader.textContent = `${dateLabel} Exceptions`;
            }
        }

        /** Updates the clock display */
        function updateClock() {
            const now = new Date();
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            const seconds = String(now.getSeconds()).padStart(2, '0');
            if (clockElement) clockElement.textContent = `${hours}:${minutes}:${seconds}`;
        }        
        
        /** Handles exporting the current state as an HTML file */
        function handleExport() {
            console.log('Export button clicked');
            
            // Check which layout is selected
            const layoutSelector = document.getElementById('export-layout-selector');
            const selectedLayout = layoutSelector ? layoutSelector.value : 'original';
            
            if (selectedLayout === 'compact') {
                handleExportCompact();
            } else if (selectedLayout === 'cards') {
                handleExportCards();
            } else if (selectedLayout === 'plaintext') {
                handleExportPlainText();
            } else {
                handleExportOriginal();
            }
        }
        
        /** Exports with plain text layout - minimal styling for 1-2 page printing */
        function handleExportPlainText() {
            console.log('Exporting plain text layout');
            
            // Safety check - ensure we have data to export
            if (!allEmployees || allEmployees.length === 0) {
                showNotification('No employee data available to export. Please upload a CSV file first.', 'warning');
                return;
            }
            
            try {
                const today = new Date();
                const displayDate = new Date(currentDisplayDate);
                const workingPlatoonsToday = getWorkingPlatoonsForDate(displayDate);
                
                // Get current filter settings
                const selectedFunctions = getSelectedFunctions();
                const selectedTours = getSelectedTours();
                const showWorkingOnly = workingTodayCheckbox ? workingTodayCheckbox.checked : false;
                
                // Filter employees
                let filteredEmployees = allEmployees.filter(emp => {
                    if (emp.status === 'Inactive') return false;
                    if (selectedFunctions.length > 0 && !selectedFunctions.includes(emp.function)) return false;
                    if (selectedTours.length > 0 && !selectedTours.includes(emp.tour)) return false;
                    if (showWorkingOnly) {
                        const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                        const isManuallyAdded = addedState.today[emp.id] !== undefined;
                        return isScheduledPlatoon || isManuallyAdded;
                    }
                    return true;
                });
                
                sortEmployees(filteredEmployees);
                
                // Calculate statistics
                const workingEmployees = filteredEmployees.filter(emp => {
                    const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                    const isManuallyAdded = addedState.today[emp.id] !== undefined;
                    const isAbsent = absenceState.today[emp.id] !== undefined;
                    return (isScheduledPlatoon || isManuallyAdded) && !isAbsent;
                });
                
                const absentEmployees = filteredEmployees.filter(emp => {
                    const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                    const isManuallyAdded = addedState.today[emp.id] !== undefined;
                    const isAbsent = absenceState.today[emp.id] !== undefined;
                    return (isScheduledPlatoon || isManuallyAdded) && isAbsent;
                });
                
                const totalScheduled = workingEmployees.length + absentEmployees.length;
                const totalAbsent = absentEmployees.length;
                const totalPresent = workingEmployees.length;
                const availability = totalScheduled > 0 ? Math.round((totalPresent / totalScheduled) * 100) : 0;
                
                // Group by tour and function
                const tourGroups = { '1': {}, '2': {}, '3': {} };
                
                filteredEmployees.forEach(emp => {
                    const tour = emp.tour || 'Other';
                    const func = emp.function || 'Other';
                    const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                    const isManuallyAdded = addedState.today[emp.id] !== undefined;
                    const isAbsent = absenceState.today[emp.id] !== undefined;
                    const isWorking = (isScheduledPlatoon || isManuallyAdded);
                    
                    if (!tourGroups[tour]) tourGroups[tour] = {};
                    if (!tourGroups[tour][func]) tourGroups[tour][func] = { members: [], present: 0, absent: 0 };
                    
                    if (isWorking) {
                        tourGroups[tour][func].members.push({
                            ...emp,
                            isAbsent: isAbsent,
                            absenceReason: absenceState.today[emp.id] || '',
                            addedReason: addedState.today[emp.id]?.reason || ''
                        });
                        
                        if (isAbsent) {
                            tourGroups[tour][func].absent++;
                        } else {
                            tourGroups[tour][func].present++;
                        }
                    }
                });
                
                // Generate tour sections
                let tourSectionsHTML = '';
                ['1', '2', '3'].forEach(tourNum => {
                    const tourFunctions = tourGroups[tourNum];
                    if (!tourFunctions || Object.keys(tourFunctions).length === 0) return;
                    
                    let tourPresent = 0;
                    let tourAbsent = 0;
                    Object.values(tourFunctions).forEach(funcData => {
                        tourPresent += funcData.present;
                        tourAbsent += funcData.absent;
                    });
                    
                    const tourAvailability = (tourPresent + tourAbsent) > 0 ? Math.round((tourPresent / (tourPresent + tourAbsent)) * 100) : 0;
                    
                    tourSectionsHTML += `
        <div class="tour-section">
            <h3>TOUR ${tourNum} - ${tourPresent} Present / ${tourAbsent} Absent (${tourAvailability}%)</h3>
            <table>
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Name</th>
                        <th>ID</th>
                        <th>Function</th>
                        <th>Plt</th>
                        <th>Time</th>
                        <th>Status</th>
                        <th>Notes</th>
                    </tr>
                </thead>
                <tbody>`;
                    
                    // Sort functions with priority order
                    const sortedFunctions = Object.keys(tourFunctions).sort((a, b) => {
                        const priority = { 
                            'CAPT': 0, 'CAP': 0, 'Captain': 0,
                            'SUP': 1, 'Supervisor': 1,
                            'RD': 2,
                            'ARD': 3
                        };
                        const priorityA = priority[a] !== undefined ? priority[a] : 999;
                        const priorityB = priority[b] !== undefined ? priority[b] : 999;
                        if (priorityA !== priorityB) return priorityA - priorityB;
                        return a.localeCompare(b);
                    });
                    
                    let rowNumber = 1;
                    
                    sortedFunctions.forEach(func => {
                        const funcData = tourFunctions[func];
                        
                        // Calculate scheduled vs added counts, separating present from absent
                        let scheduledPresent = 0;
                        let scheduledAbsent = 0;
                        let addedPresent = 0;
                        let addedAbsent = 0;
                        
                        funcData.members.forEach(member => {
                            const isScheduledPlatoon = member.platoon && workingPlatoonsToday.includes(member.platoon);
                            const wasManuallyAdded = addedState.today[member.id] !== undefined;
                            const isAbsent = member.isAbsent;
                            
                            if (wasManuallyAdded && !isScheduledPlatoon) {
                                if (isAbsent) {
                                    addedAbsent++;
                                } else {
                                    addedPresent++;
                                }
                            } else {
                                if (isAbsent) {
                                    scheduledAbsent++;
                                } else {
                                    scheduledPresent++;
                                }
                            }
                        });
                        
                        const totalPresent = scheduledPresent + addedPresent;
                        const totalScheduled = scheduledPresent + scheduledAbsent;
                        const totalAdded = addedPresent + addedAbsent;
                        
                        const functionSummary = `<strong>${func}</strong> (Scheduled: ${totalScheduled}${totalAdded > 0 ? `, Added: ${totalAdded}` : ''}, Present: ${totalPresent}, Total: ${totalScheduled + totalAdded})`;
                        
                        tourSectionsHTML += `
                    <tr class="function-row">
                        <td colspan="8">${functionSummary}</td>
                    </tr>`;
                        
                        funcData.members.forEach(member => {
                            const status = member.isAbsent ? 'Absent' : 'Present';
                            const reason = member.isAbsent ? member.absenceReason : (member.addedReason || '-');
                            const startTime = member.startTime || member.start || '';
                            const memberTour = member.tour || tourNum;
                            const scheduleDisplay = `T${memberTour} ${startTime}`;
                            
                            tourSectionsHTML += `
                    <tr>
                        <td>${rowNumber++}</td>
                        <td>${member.fullName || member.name}</td>
                        <td>${member.shield || member.id || 'N/A'}</td>
                        <td>${func}</td>
                        <td>${member.platoon || 'N/A'}</td>
                        <td>${scheduleDisplay}</td>
                        <td>${status}</td>
                        <td>${reason}</td>
                    </tr>`;
                        });
                    });
                    
                    tourSectionsHTML += `
                </tbody>
            </table>
        </div>`;
                });
                
                // Generate complete HTML
                const exportHTML = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Daily Rundown - Plain Text - ${formatDate(new Date())}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: Arial, sans-serif; font-size: 9pt; line-height: 1.2; padding: 0.3in; background: white; color: black; }
        h1 { font-size: 14pt; text-align: center; margin-bottom: 5px; border-bottom: 2px solid black; padding-bottom: 3px; }
        h2 { font-size: 10pt; text-align: center; margin-bottom: 8px; }
        h3 { font-size: 10pt; margin: 8px 0 4px 0; padding: 2px 4px; background: #e0e0e0; border: 1px solid black; }
        .summary { display: flex; justify-content: space-around; margin-bottom: 10px; padding: 4px; border: 1px solid black; background: #f5f5f5; }
        .summary div { text-align: center; }
        .summary .label { font-size: 7pt; text-transform: uppercase; }
        .summary .value { font-size: 12pt; font-weight: bold; }
        table { width: 100%; border-collapse: collapse; margin-bottom: 10px; font-size: 8pt; }
        th, td { border: 1px solid black; padding: 2px 4px; text-align: left; }
        th { background: #d0d0d0; font-weight: bold; text-align: center; font-size: 7pt; text-transform: uppercase; }
        .function-row { background: #e8e8e8; font-weight: bold; }
        .tour-section { page-break-inside: avoid; margin-bottom: 12px; }
        @page { size: letter; margin: 0.3in; }
        @media print {
            body { padding: 0; }
            .tour-section { page-break-inside: avoid; }
        }
    </style>
</head>
<body>
    <h1>FDNY EMS DAILY RUNDOWN</h1>
    <h2>${formatFullDate(displayDate)}</h2>
    
    <div class="summary">
        <div>
            <div class="label">Total</div>
            <div class="value">${allEmployees.length}</div>
        </div>
        <div>
            <div class="label">Scheduled</div>
            <div class="value">${totalScheduled}</div>
        </div>
        <div>
            <div class="label">Present</div>
            <div class="value">${totalPresent}</div>
        </div>
        <div>
            <div class="label">Absent</div>
            <div class="value">${totalAbsent}</div>
        </div>
        <div>
            <div class="label">Available</div>
            <div class="value">${availability}%</div>
        </div>
    </div>
    
    ${tourSectionsHTML}
    
    <p style="text-align: center; margin-top: 10px; font-size: 7pt; border-top: 1px solid black; padding-top: 4px;">
        Generated: ${formatFullDate(new Date())} at ${new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })} | FDNY EMS Staffing Management System
    </p>
</body>
</html>`;
                
                // Create download
                const blob = new Blob([exportHTML], { type: 'text/html' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = `Rundown_PlainText_${formatDate(new Date()).replace(/\//g, '-')}.html`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(link.href);
                
                console.log('Plain text export completed successfully');
                showNotification('Plain text report exported successfully!', 'success');
                
            } catch (error) {
                console.error('Plain text export error:', error);
                showNotification('Failed to export plain text report. Please try again.', 'error');
            }
        }
        
        /** Exports with compact table layout */
        function handleExportCompact() {
            console.log('Exporting compact table layout');
            
            // Safety check - ensure we have data to export
            if (!allEmployees || allEmployees.length === 0) {
                showNotification('No employee data available to export. Please upload a CSV file first.', 'warning');
                return;
            }
            
            try {
                const today = new Date();
                const displayDate = new Date(currentDisplayDate);
                const workingPlatoonsToday = getWorkingPlatoonsForDate(displayDate);
                
                // Get current filter settings
                const selectedFunctions = getSelectedFunctions();
                const selectedTours = getSelectedTours();
                const showWorkingOnly = workingTodayCheckbox ? workingTodayCheckbox.checked : false;
                
                // Filter employees
                let filteredEmployees = allEmployees.filter(emp => {
                    if (emp.status === 'Inactive') return false;
                    if (selectedFunctions.length > 0 && !selectedFunctions.includes(emp.function)) return false;
                    if (selectedTours.length > 0 && !selectedTours.includes(emp.tour)) return false;
                    if (showWorkingOnly) {
                        const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                        const isManuallyAdded = addedState.today[emp.id] !== undefined;
                        return isScheduledPlatoon || isManuallyAdded;
                    }
                    return true;
                });
                
                sortEmployees(filteredEmployees);
                
                // Calculate statistics
                const workingEmployees = filteredEmployees.filter(emp => {
                    const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                    const isManuallyAdded = addedState.today[emp.id] !== undefined;
                    const isAbsent = absenceState.today[emp.id] !== undefined;
                    return (isScheduledPlatoon || isManuallyAdded) && !isAbsent;
                });
                
                const absentEmployees = filteredEmployees.filter(emp => {
                    const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                    const isManuallyAdded = addedState.today[emp.id] !== undefined;
                    const isAbsent = absenceState.today[emp.id] !== undefined;
                    return (isScheduledPlatoon || isManuallyAdded) && isAbsent;
                });
                
                const totalScheduled = workingEmployees.length + absentEmployees.length;
                const totalAbsent = absentEmployees.length;
                const totalPresent = workingEmployees.length;
                const availability = totalScheduled > 0 ? Math.round((totalPresent / totalScheduled) * 100) : 0;
                
                // Group by tour and function
                const tourGroups = { '1': {}, '2': {}, '3': {} };
                
                filteredEmployees.forEach(emp => {
                    const tour = emp.tour || 'Other';
                    const func = emp.function || 'Other';
                    const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                    const isManuallyAdded = addedState.today[emp.id] !== undefined;
                    const isAbsent = absenceState.today[emp.id] !== undefined;
                    const isWorking = (isScheduledPlatoon || isManuallyAdded);
                    
                    if (!tourGroups[tour]) tourGroups[tour] = {};
                    if (!tourGroups[tour][func]) tourGroups[tour][func] = { members: [], present: 0, absent: 0 };
                    
                    if (isWorking) {
                        tourGroups[tour][func].members.push({
                            ...emp,
                            isAbsent: isAbsent,
                            absenceReason: absenceState.today[emp.id] || '',
                            addedReason: addedState.today[emp.id]?.reason || ''
                        });
                        
                        if (isAbsent) {
                            tourGroups[tour][func].absent++;
                        } else {
                            tourGroups[tour][func].present++;
                        }
                    }
                });
                
                // Generate tour sections
                let tourSectionsHTML = '';
                ['1', '2', '3'].forEach(tourNum => {
                    const tourFunctions = tourGroups[tourNum];
                    if (!tourFunctions || Object.keys(tourFunctions).length === 0) return;
                    
                    let tourPresent = 0;
                    let tourAbsent = 0;
                    Object.values(tourFunctions).forEach(funcData => {
                        tourPresent += funcData.present;
                        tourAbsent += funcData.absent;
                    });
                    
                    const tourAvailability = (tourPresent + tourAbsent) > 0 ? Math.round((tourPresent / (tourPresent + tourAbsent)) * 100) : 0;
                    
                    tourSectionsHTML += `
        <div class="tour-section">
            <div class="tour-title-bar">
                <h2><span>TOUR ${tourNum}</span></h2>
                <div class="tour-stats">${tourPresent} Present • ${tourAbsent} Absent • ${tourAvailability}% Availability</div>
            </div>
            <table class="roster-table">
                <thead>
                    <tr>
                        <th style="width: 50px;">#</th>
                        <th style="width: 250px;">Name</th>
                        <th style="width: 100px;">Employee ID</th>
                        <th style="width: 150px;">Function</th>
                        <th style="width: 100px;">Platoon</th>
                        <th style="width: 150px;">Schedule</th>
                        <th style="width: 120px;">Status</th>
                        <th>Notes / Reason</th>
                    </tr>
                </thead>
                <tbody>`;
                    
                    // Sort functions - Captain, Supervisor, RD, ARD, then alphabetically
                    const sortedFunctions = Object.keys(tourFunctions).sort((a, b) => {
                        const priority = { 
                            'CAPT': 0, 'CAP': 0, 'Captain': 0,
                            'SUP': 1, 'Supervisor': 1,
                            'RD': 2,
                            'ARD': 3
                        };
                        const priorityA = priority[a] !== undefined ? priority[a] : 999;
                        const priorityB = priority[b] !== undefined ? priority[b] : 999;
                        if (priorityA !== priorityB) return priorityA - priorityB;
                        return a.localeCompare(b);
                    });
                    let rowNumber = 1;
                    
                    sortedFunctions.forEach(func => {
                        const funcData = tourFunctions[func];
                        const presentCount = funcData.present;
                        const absentCount = funcData.absent;
                        const totalCount = funcData.members.length;
                        
                        tourSectionsHTML += `
                    <tr class="function-row">
                        <td colspan="8">${func} - ${presentCount} Present${absentCount > 0 ? ` / ${absentCount} Absent` : ''} (Total: ${totalCount})</td>
                    </tr>`;
                        
                        funcData.members.forEach(member => {
                            const status = member.isAbsent ? 'Absent' : 'Present';
                            const statusClass = member.isAbsent ? 'absent' : 'present';
                            const reason = member.isAbsent ? member.absenceReason : (member.addedReason || '-');
                            
                            // Get actual start time from employee data, use member's tour for display
                            const memberTour = member.tour || tourNum;
                            const startTime = member.startTime || member.start || '0000';
                            const scheduleDisplay = `T${memberTour} ${startTime}`;
                            
                            tourSectionsHTML += `
                    <tr>
                        <td class="row-number">${rowNumber++}</td>
                        <td class="employee-name">${member.fullName || member.name}</td>
                        <td class="employee-id">#${member.shield || member.id || 'N/A'}</td>
                        <td>${func}</td>
                        <td><span class="platoon-badge">${member.platoon || 'N/A'}</span></td>
                        <td>${scheduleDisplay}</td>
                        <td><span class="status-indicator ${statusClass}">${status}</span></td>
                        <td>${member.isAbsent ? '<span class="reason-text">' + reason + '</span>' : reason}</td>
                    </tr>`;
                        });
                    });
                    
                    tourSectionsHTML += `
                </tbody>
            </table>
        </div>`;
                });
                
                // Generate complete HTML
                const exportHTML = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Daily Rundown - Compact Layout - ${formatDate(new Date())}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Arial', 'Helvetica', sans-serif; background: #f5f5f5; padding: 20px; }
        .container { max-width: 1600px; margin: 0 auto; background: white; box-shadow: 0 0 20px rgba(0, 0, 0, 0.1); }
        .header { background: #003366; color: white; padding: 25px 40px; border-bottom: 5px solid #0066cc; }
        .header-content { display: flex; justify-content: space-between; align-items: center; }
        .header h1 { font-size: 2em; font-weight: bold; }
        .header-info { text-align: right; }
        .header-info .date { font-size: 1.3em; font-weight: bold; margin-bottom: 5px; }
        .header-info .time { font-size: 1em; opacity: 0.9; }
        .stats-dashboard { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); background: #0066cc; color: white; }
        .stat-item { padding: 20px; text-align: center; border-right: 1px solid rgba(255, 255, 255, 0.2); }
        .stat-item:last-child { border-right: none; }
        .stat-item .label { font-size: 0.85em; opacity: 0.9; margin-bottom: 8px; text-transform: uppercase; letter-spacing: 1px; }
        .stat-item .value { font-size: 2em; font-weight: bold; }
        .tour-section { border-bottom: 3px solid #e0e0e0; }
        .tour-title-bar { background: linear-gradient(to right, #003366, #0066cc); color: white; padding: 15px 40px; display: flex; justify-content: space-between; align-items: center; }
        .tour-title-bar h2 { font-size: 1.5em; display: flex; align-items: center; gap: 15px; }
        .tour-time { background: rgba(255, 255, 255, 0.2); padding: 5px 15px; border-radius: 15px; font-size: 0.9em; }
        .tour-stats { font-size: 1.1em; }
        .roster-table { width: 100%; border-collapse: collapse; }
        .roster-table thead { background: #333; color: white; }
        .roster-table th { padding: 12px 15px; text-align: left; font-weight: bold; text-transform: uppercase; font-size: 0.85em; letter-spacing: 0.5px; border-right: 1px solid rgba(255, 255, 255, 0.1); }
        .roster-table th:last-child { border-right: none; }
        .roster-table tbody tr { border-bottom: 1px solid #e0e0e0; }
        .roster-table tbody tr:nth-child(even) { background: #f9f9f9; }
        .roster-table tbody tr:hover { background: #e3f2fd; }
        .roster-table td { padding: 12px 15px; border-right: 1px solid #e0e0e0; }
        .roster-table td:last-child { border-right: none; }
        .function-row { background: #f0f0f0 !important; font-weight: bold; border-top: 2px solid #003366; border-bottom: 2px solid #003366; }
        .function-row td { padding: 10px 15px; color: #003366; font-size: 1.05em; }
        .row-number { color: #666; font-weight: bold; text-align: center; width: 50px; }
        .employee-name { font-weight: 600; color: #212529; }
        .employee-id { color: #666; font-size: 0.95em; }
        .platoon-badge { display: inline-block; background: #6c757d; color: white; padding: 3px 10px; border-radius: 12px; font-size: 0.85em; font-weight: bold; }
        .status-indicator { display: inline-block; padding: 5px 12px; border-radius: 15px; font-size: 0.85em; font-weight: bold; text-align: center; }
        .status-indicator.present { background: #d4edda; color: #155724; }
        .status-indicator.absent { background: #f8d7da; color: #721c24; }
        .reason-text { color: #721c24; font-style: italic; font-size: 0.9em; }
        .footer { background: #333; color: white; padding: 15px 40px; text-align: center; font-size: 0.9em; }
        @media print {
            body { background: white; padding: 0; }
            .tour-section { page-break-after: always; }
            .tour-section:last-child { page-break-after: auto; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="header-content">
                <h1>FDNY EMS DAILY RUNDOWN</h1>
                <div class="header-info">
                    <div class="date">${formatFullDate(displayDate)}</div>
                    <div class="time">Generated: ${formatFullDate(new Date())} at ${new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</div>
                </div>
            </div>
        </div>
        <div class="stats-dashboard">
            <div class="stat-item">
                <div class="label">Total Roster</div>
                <div class="value">${allEmployees.length}</div>
            </div>
            <div class="stat-item">
                <div class="label">Working Today</div>
                <div class="value">${totalScheduled}</div>
            </div>
            <div class="stat-item">
                <div class="label">Present</div>
                <div class="value">${totalPresent}</div>
            </div>
            <div class="stat-item">
                <div class="label">Absent</div>
                <div class="value">${totalAbsent}</div>
            </div>
            <div class="stat-item">
                <div class="label">Availability</div>
                <div class="value">${availability}%</div>
            </div>
        </div>
        ${tourSectionsHTML}
        <div class="footer">
            FDNY EMS Staffing Management System | Report Generated: ${formatFullDate(new Date())} at ${new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}<br>
            Confidential Document - For Official Use Only
        </div>
    </div>
</body>
</html>`;
                
                // Create download
                const blob = new Blob([exportHTML], { type: 'text/html' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = `Rundown_Compact_${formatDate(new Date()).replace(/\//g, '-')}.html`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(link.href);
                
                console.log('Compact export completed successfully');
                showNotification('Compact report exported successfully!', 'success');
                
            } catch (error) {
                console.error('Compact export error:', error);
                showNotification('Failed to export compact report. Please try again.', 'error');
            }
        }
        
        /** Exports with modern card layout */
        function handleExportCards() {
            console.log('Exporting modern card layout');
            
            // Safety check - ensure we have data to export
            if (!allEmployees || allEmployees.length === 0) {
                showNotification('No employee data available to export. Please upload a CSV file first.', 'warning');
                return;
            }
            
            try {
                const today = new Date();
                const displayDate = new Date(currentDisplayDate);
                const workingPlatoonsToday = getWorkingPlatoonsForDate(displayDate);
                
                // Get current filter settings
                const selectedFunctions = getSelectedFunctions();
                const selectedTours = getSelectedTours();
                const showWorkingOnly = workingTodayCheckbox ? workingTodayCheckbox.checked : false;
                
                // Filter employees
                let filteredEmployees = allEmployees.filter(emp => {
                    if (emp.status === 'Inactive') return false;
                    if (selectedFunctions.length > 0 && !selectedFunctions.includes(emp.function)) return false;
                    if (selectedTours.length > 0 && !selectedTours.includes(emp.tour)) return false;
                    if (showWorkingOnly) {
                        const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                        const isManuallyAdded = addedState.today[emp.id] !== undefined;
                        return isScheduledPlatoon || isManuallyAdded;
                    }
                    return true;
                });
                
                sortEmployees(filteredEmployees);
                
                // Calculate statistics
                const workingEmployees = filteredEmployees.filter(emp => {
                    const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                    const isManuallyAdded = addedState.today[emp.id] !== undefined;
                    const isAbsent = absenceState.today[emp.id] !== undefined;
                    return (isScheduledPlatoon || isManuallyAdded) && !isAbsent;
                });
                
                const absentEmployees = filteredEmployees.filter(emp => {
                    const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                    const isManuallyAdded = addedState.today[emp.id] !== undefined;
                    const isAbsent = absenceState.today[emp.id] !== undefined;
                    return (isScheduledPlatoon || isManuallyAdded) && isAbsent;
                });
                
                const totalScheduled = workingEmployees.length + absentEmployees.length;
                const totalAbsent = absentEmployees.length;
                const totalPresent = workingEmployees.length;
                
                // Group by tour and function
                const tourGroups = { '1': {}, '2': {}, '3': {} };
                
                filteredEmployees.forEach(emp => {
                    const tour = emp.tour || 'Other';
                    const func = emp.function || 'Other';
                    const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                    const isManuallyAdded = addedState.today[emp.id] !== undefined;
                    const isAbsent = absenceState.today[emp.id] !== undefined;
                    const isWorking = (isScheduledPlatoon || isManuallyAdded);
                    
                    if (!tourGroups[tour]) tourGroups[tour] = {};
                    if (!tourGroups[tour][func]) tourGroups[tour][func] = [];
                    
                    if (isWorking) {
                        tourGroups[tour][func].push({
                            ...emp,
                            isAbsent: isAbsent,
                            absenceReason: absenceState.today[emp.id] || '',
                            addedReason: addedState.today[emp.id]?.reason || ''
                        });
                    }
                });
                
                // Generate tour sections HTML
                let tourSectionsHTML = '';
                ['1', '2', '3'].forEach(tourNum => {
                    const tourFunctions = tourGroups[tourNum];
                    if (!tourFunctions || Object.keys(tourFunctions).length === 0) return;
                    
                    let tourPresent = 0;
                    let tourAbsent = 0;
                    Object.values(tourFunctions).forEach(members => {
                        members.forEach(m => {
                            if (m.isAbsent) tourAbsent++;
                            else tourPresent++;
                        });
                    });
                    
                    tourSectionsHTML += `
            <div class="tour-section">
                <div class="tour-header">
                    <h2><span>Tour ${tourNum}</span></h2>
                    <div class="tour-badge">${tourPresent} Present / ${tourAbsent} Absent</div>
                </div>
                <div class="function-grid">`;
                    
                    // Combine Captain and Supervisor into one card - use case-insensitive matching
                    const isCaptain = (f) => f && (f.toUpperCase().includes('CAPT') || f.toUpperCase().includes('CAPTAIN'));
                    const isSupervisor = (f) => f && (f.toUpperCase().includes('SUP') || f.toUpperCase().includes('SUPERVISOR'));
                    
                    const captainMembers = [];
                    const supervisorMembers = [];
                    
                    // Collect all captain and supervisor members
                    Object.keys(tourFunctions).forEach(func => {
                        if (isCaptain(func)) {
                            captainMembers.push(...tourFunctions[func]);
                        } else if (isSupervisor(func)) {
                            supervisorMembers.push(...tourFunctions[func]);
                        }
                    });
                    
                    const hasCaptain = captainMembers.length > 0;
                    const hasSupervisor = supervisorMembers.length > 0;
                    
                    if (hasCaptain || hasSupervisor) {
                        const presentCount = [...captainMembers, ...supervisorMembers].filter(m => !m.isAbsent).length;
                        const absentCount = [...captainMembers, ...supervisorMembers].filter(m => m.isAbsent).length;
                        const totalCount = captainMembers.length + supervisorMembers.length;
                        
                        tourSectionsHTML += `
                    <div class="function-card">
                        <div class="function-header">
                            <span>Command Staff</span>
                            <span class="function-count">${presentCount} Pres${absentCount > 0 ? ` / ${absentCount} Abs` : ''}</span>
                        </div>
                        <div class="member-list">`;
                        
                        // Add captains first
                        captainMembers.forEach(member => {
                            const status = member.isAbsent ? 'absent' : 'present';
                            const statusText = member.isAbsent ? 'Absent' : 'Present';
                            const startTime = member.startTime || member.start || '';
                            const memberTour = member.tour || tourNum;
                            const platoon = member.platoon || 'N/A';
                            
                            tourSectionsHTML += `
                            <div class="member-item">
                                <div>
                                    <div class="member-name">CAPT ${member.fullName || member.name} [${platoon}]</div>
                                    <div class="member-details">
                                        <span>📋 #${member.shield || member.id || 'N/A'}</span>
                                        <span>⏰ T${memberTour} ${startTime}</span>
                                    </div>
                                </div>
                                <span class="status-badge ${status}">${statusText}</span>
                            </div>`;
                        });
                        
                        // Then add supervisors
                        supervisorMembers.forEach(member => {
                            const status = member.isAbsent ? 'absent' : 'present';
                            const statusText = member.isAbsent ? 'Absent' : 'Present';
                            const startTime = member.startTime || member.start || '';
                            const memberTour = member.tour || tourNum;
                            const platoon = member.platoon || 'N/A';
                            
                            tourSectionsHTML += `
                            <div class="member-item">
                                <div>
                                    <div class="member-name">SUP ${member.fullName || member.name} [${platoon}]</div>
                                    <div class="member-details">
                                        <span>📋 #${member.shield || member.id || 'N/A'}</span>
                                        <span>⏰ T${memberTour} ${startTime}</span>
                                    </div>
                                </div>
                                <span class="status-badge ${status}">${statusText}</span>
                            </div>`;
                        });
                        
                        tourSectionsHTML += `
                        </div>
                    </div>`;
                    }
                    
                    // Sort remaining functions (excluding Captain and Supervisor)
                    const sortedFunctions = Object.keys(tourFunctions).filter(f => {
                        return !isCaptain(f) && !isSupervisor(f);
                    }).sort((a, b) => {
                        const priority = { 'RD': 0, 'ARD': 1 };
                        const priorityA = priority[a] !== undefined ? priority[a] : 999;
                        const priorityB = priority[b] !== undefined ? priority[b] : 999;
                        if (priorityA !== priorityB) return priorityA - priorityB;
                        return a.localeCompare(b);
                    });
                    
                    sortedFunctions.forEach(func => {
                        const members = tourFunctions[func];
                        if (members.length === 0) return;
                        
                        const presentCount = members.filter(m => !m.isAbsent).length;
                        const absentCount = members.filter(m => m.isAbsent).length;
                        
                        tourSectionsHTML += `
                    <div class="function-card">
                        <div class="function-header">
                            <span>${func}</span>
                            <span class="function-count">${presentCount} Pres${absentCount > 0 ? ` / ${absentCount} Abs` : ''}</span>
                        </div>
                        <div class="member-list">`;
                        
                        members.forEach(member => {
                            const status = member.isAbsent ? 'absent' : 'present';
                            const statusText = member.isAbsent ? 'Absent' : 'Present';
                            const startTime = member.startTime || member.start || '';
                            const memberTour = member.tour || tourNum;
                            const platoon = member.platoon || 'N/A';
                            
                            tourSectionsHTML += `
                            <div class="member-item">
                                <div>
                                    <div class="member-name">${member.fullName || member.name} [${platoon}]</div>
                                    <div class="member-details">
                                        <span>📋 #${member.shield || member.id || 'N/A'}</span>
                                        <span>⏰ T${memberTour} ${startTime}</span>
                                    </div>
                                </div>
                                <span class="status-badge ${status}">${statusText}</span>
                            </div>`;
                        });
                        
                        tourSectionsHTML += `
                        </div>
                    </div>`;
                    });
                    
                    tourSectionsHTML += `
                </div>
            </div>`;
                });
                
                // Generate complete HTML
                const exportHTML = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Daily Rundown - Card Layout - ${formatDate(new Date())}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: white; padding: 0; margin: 0; }
        .container { max-width: 100%; margin: 0; background: white; }
        .header { background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%); color: white; padding: 15px 20px; text-align: center; }
        .header h1 { font-size: 1.5em; margin-bottom: 5px; text-transform: uppercase; letter-spacing: 1px; }
        .header .date-info { font-size: 0.9em; opacity: 0.9; }
        .summary-bar { display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px; padding: 10px 20px; background: #f8f9fa; border-bottom: 2px solid #e9ecef; }
        .stat-box { background: white; padding: 8px; border-radius: 6px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); text-align: center; border-left: 3px solid; }
        .stat-box.total { border-left-color: #6c757d; }
        .stat-box.working { border-left-color: #007bff; }
        .stat-box.present { border-left-color: #28a745; }
        .stat-box.absent { border-left-color: #dc3545; }
        .stat-box .label { font-size: 0.7em; color: #6c757d; text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 4px; }
        .stat-box .value { font-size: 1.3em; font-weight: bold; color: #212529; }
        .content { padding: 15px 20px; }
        .tour-section { margin-bottom: 20px; page-break-inside: avoid; }
        .tour-header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 8px 15px; border-radius: 6px; margin-bottom: 10px; display: flex; justify-content: space-between; align-items: center; }
        .tour-header h2 { font-size: 1.1em; display: flex; align-items: center; gap: 10px; }
        .tour-badge { background: rgba(255, 255, 255, 0.2); padding: 3px 10px; border-radius: 12px; font-size: 0.75em; }
        .function-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 10px; }
        .function-card { background: white; border: 1px solid #e9ecef; border-radius: 6px; overflow: hidden; }
        .function-header { background: #343a40; color: white; padding: 6px 10px; font-weight: bold; font-size: 0.85em; display: flex; justify-content: space-between; align-items: center; }
        .function-count { background: rgba(255, 255, 255, 0.2); padding: 2px 8px; border-radius: 10px; font-size: 0.85em; }
        .member-list { padding: 8px 10px; }
        .member-item { padding: 6px; margin-bottom: 4px; background: #f8f9fa; border-radius: 4px; display: flex; justify-content: space-between; align-items: center; border-left: 3px solid #007bff; font-size: 0.75em; }
        .member-item:last-child { margin-bottom: 0; }
        .member-name { font-weight: 600; color: #212529; font-size: 1em; }
        .member-details { display: flex; gap: 8px; font-size: 0.9em; color: #6c757d; margin-top: 2px; }
        .status-badge { padding: 2px 6px; border-radius: 8px; font-size: 0.85em; font-weight: 600; }
        .status-badge.present { background: #d4edda; color: #155724; }
        .status-badge.absent { background: #f8d7da; color: #721c24; }
        .footer { background: #343a40; color: white; padding: 8px; text-align: center; font-size: 0.7em; }
        @media print {
            @page { size: letter; margin: 0.5in; }
            body { margin: 0; padding: 0; }
            .container { box-shadow: none; }
            .tour-section { page-break-inside: avoid; }
            .function-card { page-break-inside: avoid; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>FDNY EMS Daily Rundown</h1>
            <div class="date-info">${formatFullDate(displayDate)}</div>
        </div>
        <div class="summary-bar">
            <div class="stat-box total">
                <div class="label">Total Staff</div>
                <div class="value">${allEmployees.length}</div>
            </div>
            <div class="stat-box working">
                <div class="label">Working Today</div>
                <div class="value">${totalScheduled}</div>
            </div>
            <div class="stat-box present">
                <div class="label">Present</div>
                <div class="value">${totalPresent}</div>
            </div>
            <div class="stat-box absent">
                <div class="label">Absent</div>
                <div class="value">${totalAbsent}</div>
            </div>
        </div>
        <div class="content">
            ${tourSectionsHTML}
        </div>
        <div class="footer">
            Generated on ${formatFullDate(new Date())} at ${new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })} | FDNY EMS Staffing Management System
        </div>
    </div>
</body>
</html>`;
                
                // Create download
                const blob = new Blob([exportHTML], { type: 'text/html' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = `Rundown_Cards_${formatDate(new Date()).replace(/\//g, '-')}.html`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(link.href);
                
                console.log('Cards export completed successfully');
                showNotification('Modern cards report exported successfully!', 'success');
                
            } catch (error) {
                console.error('Cards export error:', error);
                showNotification('Failed to export cards report. Please try again.', 'error');
            }
        }
        
        /** Handles exporting with original card layout */
        function handleExportOriginal() {
            console.log('Export button clicked');
            
            // Safety check - ensure we have data to export
            if (!allEmployees || allEmployees.length === 0) {
                showNotification('No employee data available to export. Please upload a CSV file first.', 'warning');
                return;
            }
            
            try {
                const today = new Date();
                const displayDate = new Date(currentDisplayDate);
                const workingPlatoonsToday = getWorkingPlatoonsForDate(displayDate);
                
                // Determine what date label to show
                const todayNormalized = new Date(today);
                todayNormalized.setHours(0, 0, 0, 0);
                const displayDateNormalized = new Date(displayDate);
                displayDateNormalized.setHours(0, 0, 0, 0);
                
                let dateLabel = '';
                if (displayDateNormalized.getTime() === todayNormalized.getTime()) {
                    dateLabel = 'TODAY';
                } else {
                    const diffTime = displayDateNormalized.getTime() - todayNormalized.getTime();
                    const diffDays = Math.round(diffTime / (1000 * 60 * 60 * 24));
                    if (diffDays === 1) {
                        dateLabel = 'TOMORROW';
                    } else if (diffDays === -1) {
                        dateLabel = 'YESTERDAY';
                    } else if (diffDays > 0) {
                        dateLabel = `${diffDays} DAYS FROM NOW`;
                    } else {
                        dateLabel = `${Math.abs(diffDays)} DAYS AGO`;
                    }
                }
                
                // Generate employee table
                let employeeTableHTML = `
                    <table class="export-table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Function</th>
                                <th>Tour</th>
                                <th>Platoon</th>
                                <th>Shield</th>
                                <th>Status</th>
                                <th>Reason</th>
                            </tr>
                        </thead>
                        <tbody>`;

                // Get current filter settings to only export checked/filtered employees
                const selectedFunctions = getSelectedFunctions();
                const selectedTours = getSelectedTours();
                const showWorkingOnly = workingTodayCheckbox ? workingTodayCheckbox.checked : false;
                
                // Filter employees based on current UI selections
                let filteredEmployees = allEmployees.filter(emp => {
                    // Exclude inactive members from export
                    if (emp.status === 'Inactive') {
                        return false;
                    }
                    
                    // Apply function filter (if any functions are selected)
                    if (selectedFunctions.length > 0 && !selectedFunctions.includes(emp.function)) {
                        return false;
                    }
                    
                    // Apply tour filter (if any tours are selected)
                    if (selectedTours.length > 0 && !selectedTours.includes(emp.tour)) {
                        return false;
                    }
                    
                    // Apply working today filter
                    if (showWorkingOnly) {
                        const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                        const isManuallyAdded = addedState.today[emp.id] !== undefined;
                        return isScheduledPlatoon || isManuallyAdded;
                    }
                    
                    return true;
                });
                
                // Sort employees logically by start time, platoon, last name
                sortEmployees(filteredEmployees);
                
                // Group employees by function for better organization
                const groupedEmployees = {};
                filteredEmployees.forEach(emp => {
                    const func = emp.function || 'Other';
                    if (!groupedEmployees[func]) groupedEmployees[func] = [];
                    groupedEmployees[func].push(emp);
                });

                // Sort functions
                const sortedFunctions = Object.keys(groupedEmployees).sort();
                
                sortedFunctions.forEach(func => {
                    // Add function header
                    employeeTableHTML += `
                        <tr class="function-header">
                            <td colspan="7"><strong>${func}</strong></td>
                        </tr>`;
                    
                    groupedEmployees[func].forEach(emp => {
                        let status = 'Scheduled';
                        let reason = '';
                        let rowClass = '';
                        
                        // Check if employee is working today
                        const isWorkingToday = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                        
                        // Check absence status
                        if (absenceState.today[emp.id]) {
                            status = 'Absent';
                            reason = absenceState.today[emp.id] || 'No reason given';
                            rowClass = 'absent-row';
                        } else if (addedState.today[emp.id]) {
                            status = 'Added to Schedule';
                            reason = addedState.today[emp.id].reason || '';
                            rowClass = 'added-row';
                        } else if (!isWorkingToday) {
                            status = 'Off Duty';
                            rowClass = 'off-duty-row';
                        }
                        
                        employeeTableHTML += `
                            <tr class="${rowClass}">
                                <td>${emp.fullName}</td>
                                <td>${emp.function || 'N/A'}</td>
                                <td>T${emp.tour || 'N/A'}</td>
                                <td>${emp.platoon || 'N/A'}</td>
                                <td>${emp.shield || 'N/A'}</td>
                                <td>${status}</td>
                                <td>${reason}</td>
                            </tr>`;
                    });
                });

                employeeTableHTML += `</tbody></table>`;
                
                // Generate comprehensive summary like original app using filtered employees
                const workingEmployees = filteredEmployees.filter(emp => {
                    const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                    const isManuallyAdded = addedState.today[emp.id] !== undefined;
                    const isAbsent = absenceState.today[emp.id] !== undefined;
                    return (isScheduledPlatoon || isManuallyAdded) && !isAbsent;
                });
                
                const absentEmployees = filteredEmployees.filter(emp => {
                    const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                    const isManuallyAdded = addedState.today[emp.id] !== undefined;
                    const isAbsent = absenceState.today[emp.id] !== undefined;
                    return (isScheduledPlatoon || isManuallyAdded) && isAbsent;
                });
                
                const totalScheduled = workingEmployees.length + absentEmployees.length;
                const totalAbsent = absentEmployees.length;
                const totalPresent = workingEmployees.length;
                
                // Calculate overtime totals
                let totalOvertimeHours = 0;
                let totalOvertimeMinutes = 0;
                let overtimeCount = 0;
                const overtimeDetails = [];
                
                if (window.overtimeTracking && window.overtimeTracking['today']) {
                    Object.entries(window.overtimeTracking['today']).forEach(([empId, overtime]) => {
                        totalOvertimeMinutes += overtime.totalMinutes || 0;
                        overtimeCount++;
                        overtimeDetails.push({
                            employeeId: empId,
                            employee: allEmployees.find(emp => emp.id === empId),
                            ...overtime
                        });
                    });
                }
                
                // Convert total minutes to hours and minutes
                totalOvertimeHours = Math.floor(totalOvertimeMinutes / 60);
                const remainingMinutes = totalOvertimeMinutes % 60;
                
                // Collect employee IDs that should be highlighted
                const highlightInfo = {
                    absent: new Set(absentEmployees.map(emp => emp.id)),
                    added: new Set(Object.keys(addedState.today)),
                    overtime: new Set(overtimeDetails.map(detail => detail.employeeId))
                };
                
                // Generate comprehensive export like original app
                const tourStats = generateTourStats(workingEmployees, absentEmployees);
                const employeeGrid = generateEmployeeGrid(groupedEmployees, workingPlatoonsToday, highlightInfo);
                const attendanceSection = generateAttendanceSection(absentEmployees, addedState.today);
                
                const exportHTML = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Staffing Report Export - ${formatDate(new Date())}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: Arial, sans-serif; line-height: 1.4; color: #333; background: white; }
        .export-header { text-align: center; border-bottom: 3px solid #2c3e50; padding: 20px; margin-bottom: 30px; }
        .export-header h1 { font-size: 2.5em; color: #2c3e50; margin-bottom: 10px; }
        .export-date { font-size: 1.2em; color: #666; }
        
        .export-summary { background: #ecf0f1; padding: 20px; margin-bottom: 25px; border-radius: 8px; }
        .summary-grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 15px; text-align: center; }
        .summary-item { background: white; padding: 15px; border-radius: 5px; border: 2px solid #bdc3c7; }
        .summary-number { font-size: 2.2em; font-weight: bold; color: #2980b9; margin-bottom: 5px; }
        .summary-label { font-weight: 600; color: #34495e; }
        
        .platoons-info { background: #e8f4f8; border-left: 4px solid #2980b9; padding: 15px; margin: 20px 0; font-size: 1.1em; }
        
        .export-employee-grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 20px; margin: 25px 0; }
        .export-column { background: #f8f9fa; padding: 15px; border-radius: 8px; border: 2px solid #dee2e6; }
        .export-column h3 { color: #2c3e50; margin-bottom: 15px; font-size: 1.3em; border-bottom: 2px solid #3498db; padding-bottom: 8px; }
        
        .export-table { width: 100%; border-collapse: collapse; margin: 15px 0; }
        .export-table th, .export-table td { border: 2px solid #bdc3c7; padding: 8px; text-align: left; font-size: 0.9em; }
        .export-table th { background: #34495e; color: white; font-weight: 600; }
        .tour-header td { background: #3498db; color: white; font-weight: bold; text-align: center; }
        .employee-row:nth-child(even) { background: #f8f9fa; }
        .employee-row:hover { background: #e3f2fd; }
        
        /* Highlight rows for employees with absences, additions, or overtime */
        .employee-row.highlight-absent { background: #ffebee !important; border-left: 4px solid #f44336; }
        .employee-row.highlight-added { background: #e8f5e9 !important; border-left: 4px solid #4caf50; }
        .employee-row.highlight-overtime { background: #fff3e0 !important; border-left: 4px solid #ff9800; }
        .employee-row.highlight-absent:hover { background: #ffcdd2 !important; }
        .employee-row.highlight-added:hover { background: #c8e6c9 !important; }
        .employee-row.highlight-overtime:hover { background: #ffe0b2 !important; }
        
        .counter-col { width: 35px; text-align: center; }
        .name-col { width: auto; min-width: 140px; }
        .shield-col { width: 60px; text-align: center; }
        .time-col { width: 80px; text-align: center; }
        .platoon-col { width: 70px; text-align: center; }
        
        .tour-stats-container { margin: 25px 0; padding: 20px; background: #f4f6f7; border-radius: 8px; }
        .stats-title { font-size: 1.5em; color: #2c3e50; margin-bottom: 15px; text-align: center; }
        .stats-content { display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; }
        .tour-stat-block { background: white; padding: 15px; border-radius: 5px; border: 2px solid #bdc3c7; }
        .tour-stat-header { font-size: 1.2em; font-weight: bold; color: #2980b9; margin-bottom: 10px; text-align: center; }
        .tour-total { font-size: 1.5em; font-weight: bold; text-align: center; margin: 10px 0; }
        .function-breakdown { font-size: 0.9em; }
        .function-stat { padding: 3px 0; border-bottom: 2px solid #ecf0f1; }
        
        .export-attendance { margin: 30px 0; }
        .attendance-section { margin: 20px 0; }
        .attendance-section h3 { color: #2c3e50; margin-bottom: 10px; font-size: 1.2em; }
        .function-header td { background: #95a5a6; color: white; font-weight: bold; }
        .no-data { text-align: center; color: #7f8c8d; font-style: italic; padding: 20px; }
        
        .export-footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 2px solid #bdc3c7; color: #7f8c8d; }
        
        /* Legend for highlighting */
        .highlight-legend {
            background: #f8f9fa;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 30px;
            flex-wrap: wrap;
        }
        .legend-item {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 0.95em;
        }
        .legend-color-box {
            width: 30px;
            height: 20px;
            border-radius: 3px;
            border: 1px solid #999;
        }
        .legend-color-box.absent { background: #ffebee; border-left: 4px solid #f44336; }
        .legend-color-box.added { background: #e8f5e9; border-left: 4px solid #4caf50; }
        .legend-color-box.overtime { background: #fff3e0; border-left: 4px solid #ff9800; }
        
        /* Tour Filter Controls */
        .tour-filter-controls { 
            background: #34495e; 
            padding: 15px 20px; 
            margin: 20px 0; 
            border-radius: 8px; 
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .tour-filter-controls label {
            color: white;
            font-weight: bold;
            margin-right: 10px;
            font-size: 1.1em;
        }
        .tour-filter-btn {
            background: #3498db;
            color: white;
            border: 2px solid #2980b9;
            padding: 10px 20px;
            margin: 0 5px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .tour-filter-btn:hover {
            background: #2980b9;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        .tour-filter-btn.active {
            background: #27ae60;
            border-color: #229954;
        }
        .tour-filter-btn.active:hover {
            background: #229954;
        }
        
        /* Hide tour sections when filtered */
        .tour-section.hidden { display: none !important; }
        .tour-stat-block.hidden { display: none !important; }
        
        @media print {
            body { margin: 0; }
            .export-header { page-break-after: avoid; }
            .export-employee-grid { page-break-inside: avoid; }
            .tour-stats-container { page-break-inside: avoid; }
            .tour-filter-controls { display: none !important; }
        }
    </style>
</head>
<body>
    <div class="export-header">
        <h1>🚨 FDNY EMS Staffing Report</h1>
        <p style="font-size: 0.9em; color: var(--secondary-color); margin: -10px 0 15px; font-weight: 500; letter-spacing: 0.5px;">NEW YORK CITY FIRE DEPARTMENT • EMERGENCY MEDICAL SERVICES</p>
        <div style="background: linear-gradient(135deg, var(--primary-color), #E53946); color: white; padding: 20px; margin: 15px 0; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.15);">
            <div style="font-size: 1.1em; font-weight: 500; opacity: 0.95; text-transform: uppercase; letter-spacing: 1px;">Rundown For</div>
            <div style="font-size: 2.5em; font-weight: bold; margin-top: 8px;">${dateLabel}</div>
            <div style="font-size: 1.3em; margin-top: 8px; opacity: 0.95;">${formatFullDate(displayDate)}</div>
        </div>
        <div class="export-date" style="font-size: 0.95em; color: #7f8c8d;">Generated: ${formatFullDate(new Date())} at ${new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</div>
    </div>

    <div class="tour-filter-controls">
        <label>Filter by Tour:</label>
        <button class="tour-filter-btn active" data-tour="all" onclick="filterByTour('all')">Show All</button>
        <button class="tour-filter-btn" data-tour="1" onclick="filterByTour('1')">Tour 1</button>
        <button class="tour-filter-btn" data-tour="2" onclick="filterByTour('2')">Tour 2</button>
        <button class="tour-filter-btn" data-tour="3" onclick="filterByTour('3')">Tour 3</button>
    </div>

    <div class="export-summary">
        <div class="summary-grid" style="grid-template-columns: repeat(5, 1fr);">
            <div class="summary-item">
                <div class="summary-number">${totalScheduled}</div>
                <div class="summary-label">Total Scheduled</div>
            </div>
            <div class="summary-item">
                <div class="summary-number">${totalAbsent}</div>
                <div class="summary-label">Total Absent</div>
            </div>
            <div class="summary-item">
                <div class="summary-number">${totalPresent}</div>
                <div class="summary-label">Total Present</div>
            </div>
            <div class="summary-item">
                <div class="summary-number">${Math.round((totalPresent / totalScheduled) * 100) || 0}%</div>
                <div class="summary-label">Attendance Rate</div>
            </div>
            <div class="summary-item">
                <div class="summary-number">${totalOvertimeHours}h ${remainingMinutes}m</div>
                <div class="summary-label">Total Overtime (${overtimeCount} employees)</div>
            </div>
        </div>
    </div>

    <div class="platoons-info">
        <strong>Working Platoons Today:</strong> ${workingPlatoonsToday || 'N/A'}
    </div>

    ${tourStats}
    
    <div class="highlight-legend">
        <strong style="margin-right: 10px;">Employee Status Legend:</strong>
        <div class="legend-item">
            <div class="legend-color-box absent"></div>
            <span>Absent Today</span>
        </div>
        <div class="legend-item">
            <div class="legend-color-box added"></div>
            <span>Added to Schedule</span>
        </div>
        <div class="legend-item">
            <div class="legend-color-box overtime"></div>
            <span>Overtime Assigned</span>
        </div>
    </div>
    
    <div class="export-main">
        <h2 style="color: #2c3e50; margin-bottom: 20px; text-align: center;">Employee Assignments by Function</h2>
        ${employeeGrid}
    </div>

    ${attendanceSection}
    
    ${generateOvertimeSection(overtimeDetails)}

    <div class="export-footer">
        <p><strong>Generated by EMS Staffing Report System</strong></p>
        <p>${formatFullDate(new Date())} | Total Employees in System: ${allEmployees.length}</p>
        <p>Confidential Document - For Official Use Only</p>
    </div>

    <script>
        function filterByTour(selectedTour) {
            // Update button states
            document.querySelectorAll('.tour-filter-btn').forEach(btn => {
                btn.classList.remove('active');
                if (btn.dataset.tour === selectedTour) {
                    btn.classList.add('active');
                }
            });

            // Get all tour sections and stat blocks
            const tourSections = document.querySelectorAll('.tour-section');
            const tourStatBlocks = document.querySelectorAll('.tour-stat-block');

            if (selectedTour === 'all') {
                // Show all
                tourSections.forEach(section => section.classList.remove('hidden'));
                tourStatBlocks.forEach(block => block.classList.remove('hidden'));
            } else {
                // Filter to show only selected tour
                tourSections.forEach(section => {
                    if (section.dataset.tour === selectedTour) {
                        section.classList.remove('hidden');
                    } else {
                        section.classList.add('hidden');
                    }
                });

                tourStatBlocks.forEach(block => {
                    if (block.dataset.tour === selectedTour) {
                        block.classList.remove('hidden');
                    } else {
                        block.classList.add('hidden');
                    }
                });
            }
            
            // Renumber visible rows per column
            document.querySelectorAll('.export-column').forEach(column => {
                let counter = 1;
                column.querySelectorAll('.tour-section').forEach(row => {
                    if (!row.classList.contains('hidden')) {
                        const counterCell = row.querySelector('.counter-col');
                        if (counterCell) {
                            counterCell.textContent = counter++;
                        }
                    }
                });
            });
        }
    <\/script>
</body>
</html>`;            // Create download
            const blob = new Blob([exportHTML], { type: 'text/html' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `Staffing_Report_${formatDate(new Date()).replace(/\//g, '-')}.html`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
            
            console.log('Export completed successfully');
            showNotification('Report exported successfully!', 'success');
            
        } catch (error) {
            console.error('Export error:', error);
            showNotification('Failed to export report. Please try again.', 'error');
        }
    }
    
    /** Generate tour statistics section for export */
    function generateTourStats(workingEmployees, absentEmployees) {
        const tourData = { '1': {present: 0, absent: 0, functions: {}}, '2': {present: 0, absent: 0, functions: {}}, '3': {present: 0, absent: 0, functions: {}} };
        
        // Count present employees by tour and function
        workingEmployees.forEach(emp => {
            const tour = emp.tour || 'Unknown';
            const func = emp.function || 'Other';
            if (tourData[tour]) {
                tourData[tour].present++;
                tourData[tour].functions[func] = (tourData[tour].functions[func] || 0) + 1;
            }
        });
        
        // Count absent employees by tour and function
        absentEmployees.forEach(emp => {
            const tour = emp.tour || 'Unknown';
            const func = emp.function || 'Other';
            if (tourData[tour]) {
                tourData[tour].absent++;
                tourData[tour].functions[func] = (tourData[tour].functions[func] || 0) + 1;
            }
        });
        
        let statsHTML = `
            <div class="tour-stats-container">
                <div class="stats-title">Tour Statistics</div>
                <div class="stats-content">`;
        
        ['1', '2', '3'].forEach(tour => {
            const data = tourData[tour];
            const total = data.present + data.absent;
            
            statsHTML += `
                <div class="tour-stat-block" data-tour="${tour}">
                    <div class="tour-stat-header">Tour ${tour}</div>
                    <div class="tour-total">${total} Total (${data.present} Present, ${data.absent} Absent)</div>
                    <div class="function-breakdown">`;
            
            Object.entries(data.functions).forEach(([func, count]) => {
                statsHTML += `<div class="function-stat">${func}: ${count}</div>`;
            });
            
            statsHTML += `</div></div>`;
        });
        
        statsHTML += `</div></div>`;
        return statsHTML;
    }
    
    /** Generate employee grid section for export */
    function generateEmployeeGrid(groupedEmployees, workingPlatoons, highlightInfo = {}) {
        const functionColumns = {
            'Leadership': ['CHIEF', 'CAPTAIN', 'LIEUTENANT'],
            'Supervisors': ['SGT', 'SUPERVISOR'],
            'RD Operations': ['RD', 'RELAY', 'DD'],
            'ARD Operations': ['ARD', 'INSTRUCTOR', 'CADO-GIS']
        };
        
        let gridHTML = '<div class="export-employee-grid">';
        
        Object.entries(functionColumns).forEach(([columnName, functions]) => {
            gridHTML += `<div class="export-column">
                <h3>${columnName}</h3>
                <table class="export-table">
                    <thead>
                        <tr>
                            <th class="counter-col">#</th>
                            <th class="name-col">Name</th>
                            <th class="shield-col">Shield</th>
                            <th class="time-col">Start</th>
                            <th class="platoon-col">PLT</th>
                        </tr>
                    </thead>
                    <tbody>`;
            
            let counter = 1;
            functions.forEach(func => {
                if (groupedEmployees[func] && groupedEmployees[func].length > 0) {
                    gridHTML += `<tr class="tour-header"><td colspan="5">Tour / ${func}</td></tr>`;
                    
                    ['1', '2', '3'].forEach(tour => {
                        const tourEmployees = groupedEmployees[func].filter(emp => emp.tour === tour);
                        if (tourEmployees.length > 0) {
                            tourEmployees.forEach(emp => {
                                const isWorking = emp.platoon && workingPlatoons.includes(emp.platoon);
                                let rowClass = isWorking ? 'employee-row' : 'employee-row off-duty-row';
                                
                                // Add highlight classes based on status
                                if (highlightInfo.absent && highlightInfo.absent.has(emp.id)) {
                                    rowClass += ' highlight-absent';
                                } else if (highlightInfo.added && highlightInfo.added.has(emp.id)) {
                                    rowClass += ' highlight-added';
                                } else if (highlightInfo.overtime && highlightInfo.overtime.has(emp.id)) {
                                    rowClass += ' highlight-overtime';
                                }
                                
                                const startTime = emp.startTime ? 
                                    (emp.startTime.length === 4 ? 
                                        `${emp.startTime.substring(0,2)}:${emp.startTime.substring(2,4)}` : 
                                        emp.startTime) : 'N/A';
                                
                                gridHTML += `
                                    <tr class="${rowClass} tour-section" data-tour="${tour}">
                                        <td class="counter-col">${counter++}</td>
                                        <td class="name-col">${emp.fullName}</td>
                                        <td class="shield-col">${emp.shield || 'N/A'}</td>
                                        <td class="time-col">${startTime}</td>
                                        <td class="platoon-col">${emp.platoon || 'N/A'}</td>
                                    </tr>`;
                            });
                        }
                    });
                }
            });
            
            gridHTML += `</tbody></table></div>`;
        });
        
        gridHTML += '</div>';
        return gridHTML;
    }
    
    /** Generate attendance section for export */
    function generateAttendanceSection(absentEmployees, addedToday) {
        let attendanceHTML = `
            <div class="export-attendance">
                <h2 style="color: #2c3e50; text-align: center; margin-bottom: 20px;">Daily Attendance Summary</h2>`;
        
        // Group absences by function
        const absencesByFunction = {};
        absentEmployees.forEach(emp => {
            const func = emp.function || 'Other';
            if (!absencesByFunction[func]) absencesByFunction[func] = [];
            absencesByFunction[func].push(emp);
        });
        
        // Group additions by function
        const additionsByFunction = {};
        Object.entries(addedToday).forEach(([empId, data]) => {
            const emp = allEmployees.find(e => e.id === empId);
            if (emp) {
                const func = emp.function || 'Other';
                if (!additionsByFunction[func]) additionsByFunction[func] = [];
                additionsByFunction[func].push({emp, data});
            }
        });
        
        // Absences section
        attendanceHTML += `
            <div class="attendance-section">
                <h3>Employees Absent Today</h3>`;
        
        if (Object.keys(absencesByFunction).length === 0) {
            attendanceHTML += '<div class="no-data">No absences reported for today</div>';
        } else {
            attendanceHTML += `
                <table class="export-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Function</th>
                            <th>Tour</th>
                            <th>Platoon</th>
                            <th>Reason</th>
                        </tr>
                    </thead>
                    <tbody>`;
            
            Object.keys(absencesByFunction).sort().forEach(func => {
                attendanceHTML += `<tr class="function-header"><td colspan="5">${func}</td></tr>`;
                absencesByFunction[func].forEach(emp => {
                    const reason = absenceState.today[emp.id] || 'Not specified';
                    attendanceHTML += `
                        <tr>
                            <td>${emp.fullName}</td>
                            <td>${emp.function}</td>
                            <td>T${emp.tour || 'N/A'}</td>
                            <td>${emp.platoon || 'N/A'}</td>
                            <td>${reason}</td>
                        </tr>`;
                });
            });
            
            attendanceHTML += `</tbody></table>`;
        }
        
        attendanceHTML += `</div>`;
        
        // Additions section
        attendanceHTML += `
            <div class="attendance-section">
                <h3>Employees Added to Schedule</h3>`;
        
        if (Object.keys(additionsByFunction).length === 0) {
            attendanceHTML += '<div class="no-data">No employees added to schedule for today</div>';
        } else {
            attendanceHTML += `
                <table class="export-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Function</th>
                            <th>Tour</th>
                            <th>Reason</th>
                            <th>Shield Override</th>
                        </tr>
                    </thead>
                    <tbody>`;
            
            Object.keys(additionsByFunction).sort().forEach(func => {
                attendanceHTML += `<tr class="function-header"><td colspan="5">${func}</td></tr>`;
                additionsByFunction[func].forEach(item => {
                    attendanceHTML += `
                        <tr>
                            <td>${item.emp.fullName}</td>
                            <td>${item.emp.function}</td>
                            <td>T${item.data.tour || item.emp.tour || 'N/A'}</td>
                            <td>${item.data.reason || 'Not specified'}</td>
                            <td>${item.data.shield || 'None'}</td>
                        </tr>`;
                });
            });
            
            attendanceHTML += `</tbody></table>`;
        }
        
        attendanceHTML += `</div></div>`;
        return attendanceHTML;
    }
    
    /** Generate overtime section for export */
    function generateOvertimeSection(overtimeDetails) {
        if (!overtimeDetails || overtimeDetails.length === 0) {
            return `
                <div class="export-attendance">
                    <h2 style="color: #2c3e50; text-align: center; margin-bottom: 20px;">Overtime Summary</h2>
                    <div class="no-data">No overtime recorded for today</div>
                </div>`;
        }
        
        let overtimeHTML = `
            <div class="export-attendance">
                <h2 style="color: #2c3e50; text-align: center; margin-bottom: 20px;">Overtime Summary</h2>
                <table class="export-table">
                    <thead>
                        <tr>
                            <th>Employee</th>
                            <th>Function</th>
                            <th>Hours</th>
                            <th>Minutes</th>
                            <th>Total Time</th>
                            <th>Person Name</th>
                            <th>Vice</th>
                            <th>Shield</th>
                            <th>Reason</th>
                        </tr>
                    </thead>
                    <tbody>`;
        
        let totalHours = 0;
        let totalMinutes = 0;
        
        overtimeDetails.forEach(detail => {
            totalMinutes += detail.totalMinutes || 0;
            const emp = detail.employee || { fullName: 'Unknown', function: 'N/A' };
            
            overtimeHTML += `
                <tr>
                    <td>${emp.fullName}</td>
                    <td>${emp.function || 'N/A'}</td>
                    <td>${detail.hours || 0}</td>
                    <td>${detail.minutes || 0}</td>
                    <td>${detail.hours || 0}h ${detail.minutes || 0}m</td>
                    <td>${detail.personName || 'N/A'}</td>
                    <td>${detail.vice || 'N/A'}</td>
                    <td>${detail.shield || 'N/A'}</td>
                    <td>${detail.reason || 'N/A'}</td>
                </tr>`;
        });
        
        // Calculate total hours and minutes
        totalHours = Math.floor(totalMinutes / 60);
        const remainingTotalMinutes = totalMinutes % 60;
        
        overtimeHTML += `
                    <tr style="background-color: #3498db; color: white; font-weight: bold;">
                        <td colspan="4">TOTAL OVERTIME</td>
                        <td>${totalHours}h ${remainingTotalMinutes}m</td>
                        <td colspan="4">${overtimeDetails.length} Employee(s)</td>
                    </tr>
                </tbody>
            </table>
        </div>`;
        
        return overtimeHTML;
    }
    
    /** Calculates and updates the summary panel based on selected Function filters, Tour, and today's working platoons */
        function updateSummary() {
            if (!summaryContent) return; // Safety check
            summaryContent.innerHTML = ''; // Clear previous summary

            // Check if we have any employees
            if (allEmployees.length === 0) {
                const noDataMessage = document.createElement('div');
                noDataMessage.style.textAlign = 'center';
                noDataMessage.style.padding = '20px';
                noDataMessage.style.color = 'var(--dm-secondary-color)';
                noDataMessage.style.fontStyle = 'italic';
                noDataMessage.innerHTML = 'No employee data available.<br>Upload a CSV file to see summary information.';
                summaryContent.appendChild(noDataMessage);
                return;
            }

            const today = new Date();
            today.setHours(0, 0, 0, 0); // Normalize today's date
            const workingPlatoonsToday = getWorkingPlatoonsForDate(today);
            const selectedFunctions = getSelectedFunctions();

            // 1. Filter by selected functions first
            const functionFilteredEmployees = allEmployees.filter(emp => selectedFunctions.length === 0 || selectedFunctions.includes(emp.function));            // 2. Determine who is actually working today (scheduled platoon OR manually added) AND not absent
            const employeesWorkingTodayList = functionFilteredEmployees.filter(emp => {
                // Ensure employee has an ID
                if (!emp.id) return false;
                
                const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                const isManuallyAdded = addedState.today[emp.id] !== undefined;
                const isAbsent = absenceState.today[emp.id] !== undefined;
                return (isScheduledPlatoon || isManuallyAdded) && !isAbsent; // Must be scheduled/added AND not absent
            });

            // 3. Determine who is absent today (from the function-filtered list)
            const employeesAbsentTodayList = functionFilteredEmployees.filter(emp => {
                // Ensure employee has an ID
                if (!emp.id) return false;
                return absenceState.today[emp.id] !== undefined;
            });

            // 4. Get unique functions from the *combined* working and absent lists for display purposes
            const combinedListForFunctions = [...employeesWorkingTodayList, ...employeesAbsentTodayList];
            let uniqueFunctionsInSummary = [...new Set(combinedListForFunctions.map(e => e.function).filter(Boolean))];

            // 5. Sort functions based on predefined order
            uniqueFunctionsInSummary.sort((a, b) => {
                const indexA = summaryFunctionOrder.indexOf(a);
                const indexB = summaryFunctionOrder.indexOf(b);
                if (indexA !== -1 && indexB !== -1) return indexA - indexB;
                if (indexA !== -1) return -1;
                if (indexB !== -1) return 1;
                return a.localeCompare(b);
            });

            // --- Create Section Divs (will be appended later in correct order) ---
            const sections = {
                tour: document.createElement('div'),
                function: document.createElement('div'),
                funcTour: document.createElement('div'),
                overall: document.createElement('div')
            };

            // Assign IDs for reordering
            sections.tour.dataset.sectionId = 'tour';
            sections.function.dataset.sectionId = 'function';
            sections.funcTour.dataset.sectionId = 'funcTour';
            sections.overall.dataset.sectionId = 'overall';

            Object.values(sections).forEach(div => div.className = 'summary-section');

            // --- Tour Summary ---
            sections.tour.innerHTML = `<h4>By Tour (Today - Working) ${selectedFunctions.length > 0 ? '(Filtered)' : ''}<span class="reorder-controls"><button class="arrow-up" aria-label="Move Up">↑</button><button class="arrow-down" aria-label="Move Down">↓</button></span></h4>`;
            const tours = [...new Set(functionFilteredEmployees.map(e => e.tour).filter(Boolean))].sort(); // Use functionFiltered for tour list
            const tourCounts = {};
            tours.forEach(tour => tourCounts[tour] = { scheduled: 0, absent: 0, present: 0 }); // Simplified counts
            tourCounts['Other'] = { scheduled: 0, absent: 0, present: 0 };            // Count scheduled/present based on the working list
            employeesWorkingTodayList.forEach(emp => {
                // Safety check for emp.id
                if (!emp.id) return;
                
                // Use updated tour from addedState if the employee was manually added, otherwise use their original tour
                let effectiveTour = emp.tour;
                if (addedState.today[emp.id] !== undefined && addedState.today[emp.id].tour) {
                    effectiveTour = addedState.today[emp.id].tour;
                }
                const tourKey = tours.includes(effectiveTour) ? effectiveTour : 'Other';
                tourCounts[tourKey].scheduled++; // Everyone in this list is considered scheduled for today
                tourCounts[tourKey].present++; // And present (absences filtered out earlier)
            });            // Count absences based on the absent list
            employeesAbsentTodayList.forEach(emp => {
                // Safety check for emp.id
                if (!emp.id) return;
                
                // Use updated tour from addedState if the employee was manually added, otherwise use their original tour
                let effectiveTour = emp.tour;
                if (addedState.today[emp.id] !== undefined && addedState.today[emp.id].tour) {
                    effectiveTour = addedState.today[emp.id].tour;
                }
                const tourKey = tours.includes(effectiveTour) ? effectiveTour : 'Other';
                 // Only count absence if they *would* have been working (platoon or added)
                 const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                 const wasManuallyAdded = addedState.today[emp.id] !== undefined; // Check if they were added *before* being marked absent
                 if (isScheduledPlatoon || wasManuallyAdded) {
                    tourCounts[tourKey].absent++;
                    // Also increment scheduled count here, as they were scheduled but are now absent
                    tourCounts[tourKey].scheduled++;
                 }
            });

            const tourTable = document.createElement('table');
            tourTable.className = 'summary-table';
            tourTable.innerHTML = `<thead><tr><th>Tour</th><th>Sched</th><th>Abs</th><th>Pres</th></tr></thead>`;
            const tourTbody = document.createElement('tbody');
            Object.keys(tourCounts).sort((a, b) => { // Sort numerically, 'Other' last
                if (a === 'Other') return 1;
                if (b === 'Other') return -1;
                return parseInt(a) - parseInt(b);
            }).forEach(tourKey => {
                const counts = tourCounts[tourKey];
                if (counts.scheduled > 0 || counts.absent > 0) { // Show if anyone scheduled or absent
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                        <td>${tourKey}</td>
                        <td>${counts.scheduled}</td>
                        <td>${counts.absent}</td>
                        <td>${counts.present}</td>
                    `;
                    tourTbody.appendChild(tr);
                }
            });
            tourTable.appendChild(tourTbody);
            sections.tour.appendChild(tourTable);            // --- Function Summary ---
            sections.function.innerHTML = `<h4>By Function (Today - Working) ${selectedFunctions.length > 0 ? '(Filtered)' : ''}<span class="reorder-controls"><button class="arrow-up" aria-label="Move Up">↑</button><button class="arrow-down" aria-label="Move Down">↓</button></span></h4>`;
            uniqueFunctionsInSummary.forEach(func => {
                const presentTodayForFunction = employeesWorkingTodayList.filter(emp => emp.function === func).length;
                let absentTodayForFunction = 0;
                let sickTodayForFunction = 0;                // Count absences for this function only if they *would* have been working
                employeesAbsentTodayList.forEach(emp => {
                    // Safety check for emp.id
                    if (!emp.id) return;
                    
                    if (emp.function === func) {
                        const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                        const wasManuallyAdded = addedState.today[emp.id] !== undefined; // Check if they were added *before* being marked absent
                        if (isScheduledPlatoon || wasManuallyAdded) {
                            absentTodayForFunction++;
                            // Count specifically sick members
                            const absenceReason = absenceState.today[emp.id] || '';
                            if (absenceReason.toLowerCase() === 'sick') {
                                sickTodayForFunction++;
                            }
                        }
                    }
                });

                const totalScheduledForFunction = presentTodayForFunction + absentTodayForFunction;
                const sickPercentage = totalScheduledForFunction > 0 ? ((sickTodayForFunction / totalScheduledForFunction) * 100).toFixed(1) : 0;

                if (totalScheduledForFunction > 0) { // Only show if anyone scheduled (present or absent)
                    const funcDiv = document.createElement('div');
                    funcDiv.innerHTML = `
                        <div class="summary-item compact-function-summary">
                            <strong>${func}:</strong>
                            <span>
                                <span class="sched-count">${totalScheduledForFunction}</span><span class="count-label">S</span><span class="count-separator">/</span>
                                <span class="absent-count">${absentTodayForFunction}</span><span class="count-label">A</span><span class="count-separator">/</span>
                                <span class="present-count">${presentTodayForFunction}</span><span class="count-label">P</span>
                                ${sickTodayForFunction > 0 ? `<span class="count-separator"> | </span><span class="sick-count">${sickTodayForFunction}</span><span class="count-label">Sick</span><span class="count-separator"> (</span><span class="sick-percentage">${sickPercentage}%</span><span class="count-separator">)</span>` : ''}
                            </span>
                        </div>
                    `;
            sections.function.appendChild(funcDiv);
                }
            });

            // --- Function x Tour Table ---
            sections.funcTour.innerHTML = `<h4>Function/Tour Breakdown (Today - Working) ${selectedFunctions.length > 0 ? '(Filtered)' : ''}<span class="reorder-controls"><button class="arrow-up" aria-label="Move Up">↑</button><button class="arrow-down" aria-label="Move Down">↓</button></span></h4>`;
            const funcTourTable = document.createElement('table');
            funcTourTable.className = 'function-tour-summary-table';
            const allToursForTable = ['1', '2', '3', 'Other']; // Use consistent tour list
            let tableHeaderHTML = '<thead><tr><th>Function</th>';
            allToursForTable.forEach(t => tableHeaderHTML += `<th>T${t}<br>(S/A/P)</th>`);
            tableHeaderHTML += '</tr></thead>';
            funcTourTable.innerHTML = tableHeaderHTML;
            const funcTourTbody = document.createElement('tbody');
            const funcTourCounts = {}; // { func: { tour: { present: 0, absent: 0 } } }

            // Initialize counts
            uniqueFunctionsInSummary.forEach(func => {
                funcTourCounts[func] = {};
                allToursForTable.forEach(tour => funcTourCounts[func][tour] = { present: 0, absent: 0 });
            });            // Count Present
            employeesWorkingTodayList.forEach(emp => {
                // Safety check for emp.id
                if (!emp.id) return;
                
                const funcKey = emp.function;
                // Use updated tour from addedState if the employee was manually added, otherwise use their original tour
                let effectiveTour = emp.tour;
                if (addedState.today[emp.id] !== undefined && addedState.today[emp.id].tour) {
                    effectiveTour = addedState.today[emp.id].tour;
                }
                const tourKey = tours.includes(effectiveTour) ? effectiveTour : 'Other';
                if (funcTourCounts[funcKey] && funcTourCounts[funcKey][tourKey]) {
                    funcTourCounts[funcKey][tourKey].present++;
                }
            });            // Count Absent (only if they would have been working)
            employeesAbsentTodayList.forEach(emp => {
                // Safety check for emp.id
                if (!emp.id) return;
                
                const funcKey = emp.function;
                // Use updated tour from addedState if the employee was manually added, otherwise use their original tour
                let effectiveTour = emp.tour;
                if (addedState.today[emp.id] !== undefined && addedState.today[emp.id].tour) {
                    effectiveTour = addedState.today[emp.id].tour;
                }
                const tourKey = tours.includes(effectiveTour) ? effectiveTour : 'Other';
                if (funcTourCounts[funcKey] && funcTourCounts[funcKey][tourKey]) {
                    const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                    const wasManuallyAdded = addedState.today[emp.id] !== undefined;
                    if (isScheduledPlatoon || wasManuallyAdded) {
                        funcTourCounts[funcKey][tourKey].absent++;
                    }
                }
            });

            // Populate Table
            uniqueFunctionsInSummary.forEach(func => {
                let funcHasData = false;
                let rowHTML = `<td class="func-header">${func}</td>`;
                allToursForTable.forEach(tour => {
                    const counts = funcTourCounts[func][tour];
                    const totalSched = counts.present + counts.absent;
                    rowHTML += `<td>${totalSched}/${counts.absent}/${counts.present}</td>`;
                    if (totalSched > 0) funcHasData = true;
                });
                if (funcHasData) { // Only add row if there's data for this function
                    const tr = document.createElement('tr');
                    tr.innerHTML = rowHTML;
                    funcTourTbody.appendChild(tr);
                }
            });
            funcTourTable.appendChild(funcTourTbody);
            sections.funcTour.appendChild(funcTourTable);

            // --- Overall Summary ---
             sections.overall.innerHTML = `<h4>Overall (Today - Working) ${selectedFunctions.length > 0 ? '(Filtered)' : ''}<span class="reorder-controls"><button class="arrow-up" aria-label="Move Up">↑</button><button class="arrow-down" aria-label="Move Down">↓</button></span></h4>`;
             const totalPresentToday = employeesWorkingTodayList.length;
             let totalAbsentToday = 0;
             let totalAbsentTomorrow = 0; // Tomorrow's logic remains unchanged for now             // Count absences only if they *would* have been working today
             employeesAbsentTodayList.forEach(emp => {
                 // Safety check for emp.id
                 if (!emp.id) return;
                 
                 const isScheduledPlatoon = emp.platoon && workingPlatoonsToday.includes(emp.platoon);
                 const wasManuallyAdded = addedState.today[emp.id] !== undefined;
                 if (isScheduledPlatoon || wasManuallyAdded) {
                     totalAbsentToday++;
                 }
             });

             // Count tomorrow's absences (based on function filter only, as platoon schedule isn't applied to tomorrow's summary)
             const finalTotalScheduledToday = totalPresentToday + totalAbsentToday;

             sections.overall.innerHTML += `
                <div class="summary-item"><strong>Total Scheduled Today:</strong> ${finalTotalScheduledToday}</div>
                <div class="summary-item"><strong>Total Absent Today:</strong> ${totalAbsentToday}</div>
                <div class="summary-item"><strong>Total Present Today:</strong> ${totalPresentToday}</div>
            `;             // --- Append Sections in Correct Order ---
             const fragment = document.createDocumentFragment();
             summarySectionOrder.forEach(id => {
                 if (sections[id]) {
                     fragment.appendChild(sections[id]);
                 }
             });
             summaryContent.appendChild(fragment);

             // Add event listeners for reorder arrows (delegated listener handles this now)
        }        /** Handles changing the displayed schedule date */
        function handleChangeDisplayDate(direction) {
            currentDisplayDate.setDate(currentDisplayDate.getDate() + direction);
            displayDates(); // Update the display span
            
            // Clear current exceptions state before loading new date
            absenceState.today = {};
            addedState.today = {};
            
            // Apply scheduled absences for the new date
            applyScheduledAbsencesToToday();
            
            // Update the exceptions lists immediately
            populateSideLists();
            
            // Always update the working platoons display when date changes
            updateWorkingPlatoonsDisplay();

            // Re-apply filters ONLY if the "Working Today" checkbox is checked
            if (workingTodayCheckbox.checked) {
                applyFiltersAndPopulate();
            }
            
            // Update summary to reflect new date
            updateSummary();
            
            // Save state
            saveState();
        }


        /** Handles reordering summary sections */
        function handleReorder(event) {
            const button = event.target;
            const sectionDiv = button.closest('.summary-section');
            const sectionId = sectionDiv.dataset.sectionId;
            const currentIndex = summarySectionOrder.indexOf(sectionId);

            if (currentIndex === -1) return; // Should not happen

            let newIndex = currentIndex;
            if (button.classList.contains('arrow-up') && currentIndex > 0) {
                newIndex = currentIndex - 1;
            } else if (button.classList.contains('arrow-down') && currentIndex < summarySectionOrder.length - 1) {
                newIndex = currentIndex + 1;
            }

            if (newIndex !== currentIndex) {
                // Remove from current position
                summarySectionOrder.splice(currentIndex, 1);
                // Insert at new position
                summarySectionOrder.splice(newIndex, 0, sectionId);
                // Re-render summary
                updateSummary();
                // State is saved within updateSummary or explicitly after filter changes
            }
        }


        /** Updates all existing reason dropdowns */
        function updateAllReasonDropdowns() {
            const allSelects = document.querySelectorAll('.reason-select');
            allSelects.forEach(select => populateReasonDropdown(select));
        }        /** Populates filter dropdowns and checkboxes with unique values */
        function populateFilters() {
             // --- Tour Filter (Checkboxes) ---
             const tours = [...new Set(allEmployees.map(e => e.tour).filter(Boolean))].sort();
             if (tourFilterContainer) tourFilterContainer.innerHTML = ''; // Clear previous checkboxes/loading message

             // Define default tours to be checked (load from state if available)
             const savedFilters = JSON.parse(localStorage.getItem(LS_KEYS.FILTERS) || '{}');
             const savedTourState = savedFilters.tours || {};
             // Default to no tours checked (show all) if no saved state
             const defaultTours = Object.keys(savedTourState).length > 0 ? [] : [];

             if (allEmployees.length === 0) {
                 if (tourFilterContainer) tourFilterContainer.innerHTML = '<p style="color: var(--dm-secondary-color); font-style: italic;">No employee data loaded</p>';
             } else if (tours.length > 0) {
                 tours.forEach(tour => {
                     const label = document.createElement('label');
                     const checkbox = document.createElement('input');
                     checkbox.type = 'checkbox';
                     checkbox.value = tour;
                     // Check based on saved state or default list
                     checkbox.checked = savedTourState[tour] !== undefined ? savedTourState[tour] : defaultTours.includes(tour);
                     checkbox.addEventListener('change', () => {
                         applyFiltersAndPopulate();
                         updateSummary();
                         saveState(); // Save filter state on change
                     });

                     label.appendChild(checkbox);
                     label.appendChild(document.createTextNode(`Tour ${tour}`));
                     if (tourFilterContainer) tourFilterContainer.appendChild(label);
                 });
             } else {
                 if (tourFilterContainer) tourFilterContainer.innerHTML = '<p>No tours found in employee data.</p>';
             }
             
             // --- Function Filter (Checkboxes) ---
             const functions = [...new Set(allEmployees.map(e => e.function).filter(Boolean))].sort();
             if (functionFilterContainer) functionFilterContainer.innerHTML = ''; // Clear previous checkboxes/loading message

             // Define default functions to be checked (load from state if available)
             const savedFunctionState = savedFilters.functions || {};
             // Default to checking ARD, RD, SUPERVISOR, SGT, CAPTAIN if no saved state
             const defaultFunctions = Object.keys(savedFunctionState).length > 0 ? [] : ["ARD", "RD", "SUPERVISOR", "SGT", "CAPTAIN"];

             if (allEmployees.length === 0) {
                 if (functionFilterContainer) functionFilterContainer.innerHTML = '<p style="color: var(--dm-secondary-color); font-style: italic;">No employee data loaded</p>';
             } else if (functions.length > 0) {
                 functions.forEach(func => {
                     const label = document.createElement('label');
                     const checkbox = document.createElement('input');
                     checkbox.type = 'checkbox';
                     checkbox.value = func;
                     // Check based on saved state or default list
                     checkbox.checked = savedFunctionState[func] !== undefined ? savedFunctionState[func] : defaultFunctions.includes(func);
                     checkbox.addEventListener('change', () => {
                         applyFiltersAndPopulate();
                         updateSummary();
                         saveState(); // Save filter state on change
                     });

                     label.appendChild(checkbox);
                     label.appendChild(document.createTextNode(func));
                     if (functionFilterContainer) functionFilterContainer.appendChild(label);
                 });
             } else {
                 if (functionFilterContainer) functionFilterContainer.innerHTML = '<p>No functions found in employee data.</p>';
             }

             // --- Working Today Filter (Checkbox) ---
             if (workingTodayCheckbox) workingTodayCheckbox.checked = savedFilters.workingToday || false; // Restore state
        }

        /** Populates the reason list in the management panel */
        function populateReasonList() {
            if (!reasonList) return;
            reasonList.innerHTML = ''; // Clear existing list
            absenceReasons.forEach(reason => {
                const li = document.createElement('li');
                li.className = 'reason-item';
                li.textContent = reason;

                const removeBtn = document.createElement('button');
                removeBtn.className = 'remove-reason-btn';
                removeBtn.innerHTML = '&times;';
                removeBtn.setAttribute('aria-label', `Remove reason ${reason}`);
                // Listener added via delegation

                li.appendChild(removeBtn);
                reasonList.appendChild(li);
            });
        }

        /** Handles adding a new absence reason */
        function handleAddReason() {
            const reason = newReasonInput.value.trim();
            if (reason && !absenceReasons.includes(reason)) {
                absenceReasons.push(reason);
                absenceReasons.sort(); // Keep sorted
                populateReasonList();
                updateAllReasonDropdowns(); // Update dropdowns everywhere
                newReasonInput.value = '';
                saveState(); // Save updated reasons
                showNotification(`Added new reason: ${reason}`, 'success');
            } else if (!reason) {
                showNotification("Reason cannot be empty.", 'warning');
            } else {
                showNotification(`Reason "${reason}" already exists.`, 'warning');
            }
        }

        /** Handles removing an absence reason */
        function handleRemoveReason(reasonText) {
            const index = absenceReasons.indexOf(reasonText);
            if (index > -1) {
                absenceReasons.splice(index, 1);
                populateReasonList();
                updateAllReasonDropdowns(); // Update dropdowns everywhere
                saveState(); // Save updated reasons
                showNotification(`Removed reason: ${reasonText}`, 'success');
            }
        }        /** Populates the history panel */
        function populateHistory() {
            console.log("populateHistory called, historyState:", historyState); // Debug log
            
            if (!historyList) {
                console.error("historyList element not found");
                return;
            }
            
            historyList.innerHTML = ''; // Clear existing history

            if (!historyState || historyState.length === 0) {
                historyList.innerHTML = '<li style="padding: 10px; color: var(--dm-secondary-color); font-style: italic;">No history available.</li>';
                console.log("No history to display");
                return;
            }            historyState.forEach((session, sessionIndex) => {
                try {
                    if (!session || !session.timestamp) {
                        console.warn("Invalid session data:", session);
                        return;
                    }
                    
                    const sessionTimestamp = new Date(session.timestamp);
                    const sessionHeader = document.createElement('li');
                sessionHeader.style.fontWeight = 'bold';
                sessionHeader.style.marginTop = sessionIndex > 0 ? '10px' : '0';
                sessionHeader.style.borderBottom = '1px solid var(--dm-border-color)';
                sessionHeader.style.paddingBottom = '5px';
                sessionHeader.style.marginBottom = '5px';
                sessionHeader.textContent = `Session from: ${sessionTimestamp.toLocaleString()}`;
                historyList.appendChild(sessionHeader);                const items = [];
                // Collect and sort items within the session
                const day = 'today'; // Only handle today now
                if (session.absences && session.absences[day]) {
                    Object.entries(session.absences[day]).forEach(([empId, reason]) => {
                        const emp = allEmployees.find(e => e.id === empId);
                        if (emp) items.push({ emp, type: 'absent', day, reason, shield: '' });
                    });
                }
                if (session.added && session.added[day]) {
                    Object.entries(session.added[day]).forEach(([empId, data]) => {
                        const emp = allEmployees.find(e => e.id === empId);
                        if (emp) items.push({ emp, type: 'added', day, reason: data.reason || '', shield: data.shield || '' });
                    });
                }

                items.sort((a, b) => a.emp.lastName.localeCompare(b.emp.lastName) || a.emp.firstName.localeCompare(b.emp.firstName));

                if (items.length === 0) {
                     const noItemsLi = document.createElement('li');
                     noItemsLi.textContent = 'No changes in this session.';
                     noItemsLi.style.fontStyle = 'italic';
                     historyList.appendChild(noItemsLi);
                } else {
                    items.forEach(item => {
                        const li = document.createElement('li');
                        li.className = 'history-item';
                        const infoDiv = document.createElement('div');
                        infoDiv.className = 'history-item-info';
                        const nameSpan = document.createElement('span');
                        nameSpan.className = 'name';
                        nameSpan.textContent = item.emp.fullName;
                        const detailsSpan = document.createElement('span');
                        detailsSpan.className = 'details';
                        detailsSpan.textContent = ` (${item.type === 'absent' ? 'Absent' : 'Added'} ${item.day}${item.reason ? ` - ${item.reason}` : ''}${item.shield ? ` / #${item.shield}` : ''})`;

                        infoDiv.appendChild(nameSpan);
                        infoDiv.appendChild(detailsSpan);
                        li.appendChild(infoDiv);

                        // Add Apply buttons
                        const controlsDiv = document.createElement('div');
                        controlsDiv.className = 'history-item-controls';
                        const applyTodayBtn = document.createElement('button');
                        applyTodayBtn.textContent = 'Apply Today';
                        applyTodayBtn.className = 'apply-today-btn';
                        applyTodayBtn.dataset.empId = item.emp.id;
                        applyTodayBtn.dataset.type = item.type;
                        applyTodayBtn.dataset.reason = item.reason;
                        applyTodayBtn.dataset.shield = item.shield;
                        applyTodayBtn.dataset.targetDay = 'today';                        controlsDiv.appendChild(applyTodayBtn);
                        li.appendChild(controlsDiv);historyList.appendChild(li);
                    });
                }
                } catch (error) {
                    console.error("Error processing history session:", error, session);
                }
            });
        }

        /** Handles applying a history item to a specific day */        function handleApplyHistory(event) {
            const button = event.target;
            const empId = button.dataset.empId;
            const type = button.dataset.type;
            const reason = button.dataset.reason;
            const shield = button.dataset.shield;
            const targetDay = 'today'; // Only handle today now

            const employee = allEmployees.find(e => e.id === empId);
            if (!employee) {
                console.error("Cannot apply history: Employee not found", empId);
                return;
            }

            // Remove from other lists if present
            delete absenceState.today[empId];
            delete addedState.today[empId];

            // Apply to today
            if (type === 'absent') {
                absenceState[targetDay][empId] = reason;
                trackLeaveUsage(empId, reason); // Track leave usage
            } else if (type === 'added') {
                addedState[targetDay][empId] = { reason, shield };
            }

            console.log(`Applied history for ${employee.fullName} to ${targetDay}`);
            showNotification(`Applied ${type} for ${employee.fullName} to Today`, 'info', 2000);
            populateSideLists();
            applyFiltersAndPopulate(); // Refresh main list
            updateSummary();
            saveState(); // This will also call populateHistory() to refresh the display
        }

        /** Handles clearing all items from Today's lists */
        function handleClearToday() {
            if (confirm("Are you sure you want to clear all entries for Today?")) {
                absenceState.today = {};
                addedState.today = {};
                populateSideLists();
                applyFiltersAndPopulate();
                updateSummary();
                saveState();
                showNotification("Cleared all exceptions for Today.", 'info', 2000);
            }
        }

        /** Handles clearing history (for debugging/testing) */
        function handleClearHistory() {
            if (confirm("Are you sure you want to clear all history? This cannot be undone.")) {
                historyState = [];
                localStorage.removeItem(LS_KEYS.HISTORY);
                populateHistory();
                console.log("History cleared");
                showNotification("History permanently cleared.", 'danger', 2000);
            }
        }

        /** Handles opening the statistics page (or modal in this design) */
        function handleViewStatistics() {
            toggleStatisticsFullView(); // Opens the full-screen stats panel
        }

        // --- END OF COMPLETE ORIGINAL JAVASCRIPT CORE ---

        // --- NEW JAVASCRIPT SETUP AND ADAPTATIONS (Binding Core to New Layout) ---
        
        document.addEventListener('DOMContentLoaded', () => {
            
            // 0. Initialize Color Theme
            const savedColorTheme = localStorage.getItem('colorTheme') || 'fdny';
            document.body.setAttribute('data-theme', savedColorTheme);
            
            const colorThemeSelect = document.getElementById('color-theme-select');
            if (colorThemeSelect) {
                colorThemeSelect.value = savedColorTheme;
                colorThemeSelect.addEventListener('change', (e) => {
                    const selectedTheme = e.target.value;
                    document.body.setAttribute('data-theme', selectedTheme);
                    localStorage.setItem('colorTheme', selectedTheme);
                    showNotification(`Color theme changed to: ${e.target.options[e.target.selectedIndex].text}`, 'success');
                });
            }
            
            // 0. Initialize DOM element references
            csvFileInput = document.getElementById('csv-file-input');
            loadCSVBtn = document.getElementById('load-csv-btn');
            clearDataBtn = document.getElementById('clear-data-btn');
            csvStatus = document.getElementById('csv-status');
            employeeCountDisplay = document.getElementById('employee-count-display');
            
            addMemberBtn = document.getElementById('add-member-btn');
            newMemberFirstNameInput = document.getElementById('new-member-firstname');
            newMemberLastNameInput = document.getElementById('new-member-lastname');
            newMemberFunctionInput = document.getElementById('new-member-function');
            newMemberTourInput = document.getElementById('new-member-tour');
            newMemberPlatoonInput = document.getElementById('new-member-platoon');
            newMemberStartTimeInput = document.getElementById('new-member-start-time');
            newMemberRefInput = document.getElementById('new-member-ref');
            newMemberVaxInput = document.getElementById('new-member-vax');
            newMemberStatusInput = document.getElementById('new-member-status');
            addReasonBtn = document.getElementById('add-reason-btn');
            newReasonInput = document.getElementById('new-reason');
            reasonList = document.getElementById('reason-list');
            
            // Statistics elements
            statisticsPanelFull = document.getElementById('statistics-panel-full');
            viewStatsBtn = document.getElementById('view-stats-btn');
            refreshStatsBtn = document.getElementById('refresh-stats-btn');
            
            // 1. Initial Load & Setup (Must run first)
            loadState(); // Load saved state first
            allEmployees.forEach((employee, index) => { // Re-assign IDs just in case
                if (!employee.id) {
                    const empId = employee.shield ? `emp-shield-${employee.shield}` : `emp-idx-${index}`;
                    employee.id = empId;
                }
                if (employee.vax === undefined) {
                    employee.vax = '';
                }
            });
            
            // 1. Initialize Core Components
            initializeSearchFunctionality(); 
            loadLeaveUsageStats(); // Load leave usage statistics
            // loadStatisticsData(); // Stubbed call
            // updateStatisticsDisplay(); // Stubbed call
            
            // 2. Initial Population
            populateFilters(); 
            populateReasonList();
            applyFiltersAndPopulate();
            populateSideLists();
            populateHistory();
            updateSummary();
            displayDates();
            updateWorkingPlatoonsDisplay();
            
            // Apply any scheduled absences for today
            applyScheduledAbsencesToToday();
            updateClock(); 
            setInterval(updateClock, 1000);
            updateEmployeeCountDisplay();
            
            // 3. Theme
            const savedTheme = localStorage.getItem(LS_KEYS.THEME) || 'light';
            applyTheme(savedTheme);
            
            // 4. Update CSV Status
            if (csvStatus) {
                updateCSVStatus('No employee data loaded. Please upload a CSV file.', 'warning');
            }


            // --- Modal and Tab Logic ---
            
            // Settings Modal Logic
            if(openSettingsBtn) openSettingsBtn.onclick = () => settingsModal.style.display = 'block';
            if(closeSettingsBtn) closeSettingsBtn.onclick = () => settingsModal.style.display = 'none';
            
            // Help Modal Logic
            const helpModal = document.getElementById('help-modal');
            const helpBtn = document.getElementById('help-btn');
            const closeHelpModalBtn = document.getElementById('close-help-modal');
            const closeHelpBtn = document.getElementById('close-help-btn');
            
            if (helpBtn) {
                helpBtn.onclick = (e) => {
                    e.stopPropagation(); // Prevent triggering settings modal close
                    helpModal.style.display = 'block';
                };
            }
            if (closeHelpModalBtn) closeHelpModalBtn.onclick = () => helpModal.style.display = 'none';
            if (closeHelpBtn) closeHelpBtn.onclick = () => helpModal.style.display = 'none';
            
            window.onclick = (event) => {
                if (event.target == settingsModal) {
                    settingsModal.style.display = 'none';
                }
                if (event.target == helpModal) {
                    helpModal.style.display = 'none';
                }
                // Close week switch modal when clicking outside
                const weekSwitchModal = document.getElementById('week-switch-modal');
                if (event.target == weekSwitchModal) {
                    closeWeekSwitchModal();
                }
            };
            
            // Modal Tab Switching
            modalTabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const target = button.dataset.tab;
                    modalTabButtons.forEach(btn => btn.classList.remove('active'));
                    button.classList.add('active');
                    modalTabPanes.forEach(pane => {
                        pane.classList.add('hidden');
                        if (pane.id === target) {
                            pane.classList.remove('hidden');
                        }
                    });
                    // Refresh member list when switching to member management
                    if (target === 'member-management-pane') {
                        renderMemberList();
                    }
                });
            });
            
            // Ops Tab Switching
            opsTabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const target = button.dataset.tab;
                    opsTabButtons.forEach(btn => btn.classList.remove('active'));
                    button.classList.add('active');
                    opsTabPanes.forEach(pane => {
                        pane.classList.add('hidden');
                        if (pane.id === target) {
                            pane.classList.remove('hidden');
                        }
                    });
                    // Refresh content when switching
                    if (target === 'history-pane') { populateHistory(); }
                    if (target === 'summary-pane') { updateSummary(); }
                });
            });

            // --- Button/Action Mappings (Binding the core functions) ---

            // Top Header Bar
            const exportBtn = document.getElementById('export-btn');
            const calendarViewBtn = document.getElementById('calendar-view-btn');
            const scheduleViewBtn = document.getElementById('schedule-view-btn');
            
            if (exportBtn) exportBtn.addEventListener('click', handleExport);
            if (calendarViewBtn) {
                calendarViewBtn.addEventListener('click', () => {
                    console.log('Calendar button clicked');
                    toggleCalendarView();
                });
            }
            if (scheduleViewBtn) {
                scheduleViewBtn.addEventListener('click', () => {
                    console.log('Schedule button clicked');
                    toggleScheduleView();
                });
            }
            
            // Date Navigation
            if (prevDayBtn) prevDayBtn.addEventListener('click', () => handleChangeDisplayDate(-1));
            if (nextDayBtn) nextDayBtn.addEventListener('click', () => handleChangeDisplayDate(1));
            
            // Summary Pane
            if (viewStatsBtn) viewStatsBtn.addEventListener('click', toggleStatisticsFullView);
            
            // Exceptions Pane
            if (clearTodayBtn) clearTodayBtn.addEventListener('click', handleClearToday);

            // Settings Modal (Data)
            if (loadCSVBtn) loadCSVBtn.addEventListener('click', handleCSVLoad);
            if (clearDataBtn) clearDataBtn.addEventListener('click', handleClearData);

            // Settings Modal (Add Member)  
            if (addMemberBtn) {
                addMemberBtn.addEventListener('click', function() {
                    // Check if we're in edit mode
                    if (this.dataset.editingId) {
                        handleUpdateMember(this.dataset.editingId);
                    } else {
                        handleAddMember();
                    }
                });
            }
            
            // Member List Management
            const reloadMembersBtn = document.getElementById('reload-members-btn');
            const exportCSVBtn = document.getElementById('export-csv-btn');
            const memberSearchInput = document.getElementById('member-search-input');
            const cancelEditBtn = document.getElementById('cancel-edit-btn');
            
            if (reloadMembersBtn) reloadMembersBtn.addEventListener('click', handleReloadMembers);
            if (exportCSVBtn) exportCSVBtn.addEventListener('click', handleExportCSV);
            if (memberSearchInput) memberSearchInput.addEventListener('input', renderMemberList);
            
            if (cancelEditBtn) {
                cancelEditBtn.addEventListener('click', function() {
                    // Clear form
                    if (newMemberFirstNameInput) newMemberFirstNameInput.value = '';
                    if (newMemberLastNameInput) newMemberLastNameInput.value = '';
                    if (newMemberFunctionInput) newMemberFunctionInput.value = '';
                    if (newMemberTourInput) newMemberTourInput.value = '';
                    if (newMemberPlatoonInput) newMemberPlatoonInput.value = '';
                    if (newMemberStartTimeInput) newMemberStartTimeInput.value = '';
                    if (newMemberRefInput) newMemberRefInput.value = '';
                    if (newMemberVaxInput) newMemberVaxInput.value = '';
                    if (newMemberStatusInput) newMemberStatusInput.value = 'ACTIVE';
                    
                    // Reset button
                    if (addMemberBtn) {
                        addMemberBtn.textContent = 'Add Member';
                        addMemberBtn.style.backgroundColor = '';
                        delete addMemberBtn.dataset.editingId;
                    }
                    
                    // Hide cancel button
                    this.style.display = 'none';
                    
                    // Remove form highlight
                    const formSection = document.querySelector('.add-member-form');
                    if (formSection) {
                        formSection.style.backgroundColor = '';
                        formSection.style.border = '';
                        formSection.style.padding = '';
                    }
                    
                    showNotification('Edit cancelled', 'info');
                });
            }
            
            // Event delegation for member list buttons (edit/delete)
            // This listener stays attached even when innerHTML changes
            const memberListElement = document.getElementById('member-list');
            if (memberListElement) {
                memberListElement.addEventListener('click', function(e) {
                    // Check if clicked element is an edit button
                    if (e.target.classList.contains('member-edit-btn')) {
                        e.preventDefault();
                        e.stopPropagation();
                        const employeeId = e.target.getAttribute('data-employee-id');
                        console.log('Edit button clicked for employee:', employeeId);
                        handleEditMember(employeeId);
                    }
                    // Check if clicked element is a delete button
                    else if (e.target.classList.contains('member-delete-btn')) {
                        e.preventDefault();
                        e.stopPropagation();
                        const employeeId = e.target.getAttribute('data-employee-id');
                        console.log('Delete button clicked for employee:', employeeId);
                        handleDeleteMember(employeeId);
                    }
                });
            }
            
            // Initial member list population
            renderMemberList();

            // Settings Modal (Reasons)
            if (addReasonBtn) addReasonBtn.addEventListener('click', handleAddReason);

            // Handle Enter key for new reason input
            if (newReasonInput) {
                newReasonInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        handleAddReason();
                    }
                });
            }

            // Calendar View
            if (calendarViewContent) {
                const calendarPrevBtn = document.getElementById('calendar-prev-month-btn');
                const calendarNextBtn = document.getElementById('calendar-next-month-btn');
                const calendarBackBtn = document.getElementById('calendar-back-btn');
                
                if (calendarPrevBtn) calendarPrevBtn.addEventListener('click', handleCalendarPrevMonth);
                if (calendarNextBtn) calendarNextBtn.addEventListener('click', handleCalendarNextMonth);
                if (calendarBackBtn) calendarBackBtn.addEventListener('click', toggleCalendarView);
            }
            
            // Schedule View
            const scheduleViewContent = document.getElementById('schedule-view-content');
            if (scheduleViewContent) {
                const schedulePrevWeekBtn = document.getElementById('schedule-prev-week-btn');
                const scheduleNextWeekBtn = document.getElementById('schedule-next-week-btn');
                const schedulePrevMonthBtn = document.getElementById('schedule-prev-month-btn');
                const scheduleNextMonthBtn = document.getElementById('schedule-next-month-btn');
                const scheduleViewToggleBtn = document.getElementById('schedule-toggle-view-btn');
                const scheduleBackBtn = document.getElementById('schedule-back-btn');
                const scheduleExportBtn = document.getElementById('schedule-export-btn');
                const scheduleClearFiltersBtn = document.getElementById('schedule-clear-filters-btn');
                const scheduleGroupBySelect = document.getElementById('schedule-group-by');
                
                if (schedulePrevWeekBtn) schedulePrevWeekBtn.addEventListener('click', handleSchedulePrevWeek);
                if (scheduleNextWeekBtn) scheduleNextWeekBtn.addEventListener('click', handleScheduleNextWeek);
                if (schedulePrevMonthBtn) schedulePrevMonthBtn.addEventListener('click', handleSchedulePrevMonth);
                if (scheduleNextMonthBtn) scheduleNextMonthBtn.addEventListener('click', handleScheduleNextMonth);
                if (scheduleViewToggleBtn) scheduleViewToggleBtn.addEventListener('click', toggleScheduleViewMode);
                if (scheduleBackBtn) scheduleBackBtn.addEventListener('click', toggleScheduleView);
                if (scheduleExportBtn) scheduleExportBtn.addEventListener('click', exportScheduleView);
                if (scheduleGroupBySelect) scheduleGroupBySelect.addEventListener('change', () => {
                    renderScheduleTable();
                });
                if (scheduleClearFiltersBtn) scheduleClearFiltersBtn.addEventListener('click', () => {
                    scheduleSelectedFunctions = [];
                    scheduleSelectedTours = [];
                    const checkboxes = document.querySelectorAll('.schedule-function-checkbox, .schedule-tour-checkbox');
                    checkboxes.forEach(cb => cb.checked = false);
                    renderScheduleTable();
                });
                
                // Search functionality
                const scheduleSearchInput = document.getElementById('schedule-search-input');
                const scheduleClearSearchBtn = document.getElementById('schedule-clear-search-btn');
                
                if (scheduleSearchInput) {
                    scheduleSearchInput.addEventListener('input', () => {
                        renderScheduleTable();
                    });
                }
                
                if (scheduleClearSearchBtn) {
                    scheduleClearSearchBtn.addEventListener('click', () => {
                        if (scheduleSearchInput) {
                            scheduleSearchInput.value = '';
                            renderScheduleTable();
                        }
                    });
                }
            }
            
            // Statistics View
            if (statisticsPanelFull) {
                const statsBackBtn = document.getElementById('stats-back-btn');
                if (statsBackBtn) {
                    statsBackBtn.addEventListener('click', toggleStatisticsFullView);
                }
                // Note: Other stats buttons are inside the full panel HTML which is not fully replicated here, but the logic is bound above.
            }

            // Filters
            document.getElementById('clear-filter-btn').addEventListener('click', () => {
                if (tourFilterContainer) {
                    tourFilterContainer.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
                }
                document.getElementById('working-today-checkbox').checked = false;
                if (rosterSearchInput) rosterSearchInput.value = '';
                applyFiltersAndPopulate();
                updateSummary();
                saveState();
            });
            document.getElementById('clear-function-filters').addEventListener('click', () => {
                functionFilterContainer.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
                if (tourFilterContainer) {
                    tourFilterContainer.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
                }
                applyFiltersAndPopulate();
                updateSummary();
                saveState();
            });
            document.getElementById('sort-roster-btn').addEventListener('click', () => {
                console.log('Manual sort triggered');
                applyFiltersAndPopulate(); // This will re-sort the roster
                showNotification('Roster sorted by Time → Platoon → Last Name', 'success');
            });
            document.getElementById('working-today-checkbox').addEventListener('change', () => {
                applyFiltersAndPopulate();
                updateSummary();
                saveState();
            });
            document.getElementById('hide-inactive-checkbox').addEventListener('change', () => {
                applyFiltersAndPopulate();
                renderScheduleTable(); // Update schedule view as well
                saveState(); // Persist the preference
                showNotification(hideInactiveCheckbox.checked ? 'Inactive members hidden' : 'Showing all members', 'info');
            });


            // --- Delegated Listeners (Re-establishing the core interactivity for dynamic elements) ---

            // Drag and Drop listeners
            dropZones.forEach(zone => {
                zone.addEventListener('dragover', handleDragOver);
                zone.addEventListener('dragleave', handleDragLeave);
                zone.addEventListener('drop', handleDrop);
            });
            
            // Master Delegated Click Listener for dynamic buttons in lists
            document.body.addEventListener('click', (event) => {
                // Remove from main list
                if (event.target.classList.contains('remove-member-btn')) {
                    const employeeItem = event.target.closest('.employee-item');
                    if (employeeItem && confirm(`Remove ${employeeItem.querySelector('.employee-name').textContent}?`)) {
                        handleRemoveMember(employeeItem.id);
                    }
                }
                // Edit member
                if (event.target.classList.contains('edit-member-btn')) {
                     const employeeItem = event.target.closest('.employee-item');
                     if (employeeItem) {
                         handleEditMember(employeeItem.id);
                     }
                }
                // Remove from side list (absent or added)
                if (event.target.classList.contains('remove-btn')) {
                    const employeeItem = event.target.closest('.employee-item');
                    if (employeeItem) {
                        handleRemoveFromSideList(employeeItem);
                    }
                }
                // Save/Cancel Edit buttons (inside employee item)
                if (event.target.classList.contains('save-edit-btn')) {
                    event.stopPropagation();
                    handleSaveEdit(event.target);
                }
                if (event.target.classList.contains('cancel-edit-btn')) {
                    event.stopPropagation();
                    handleCancelEdit(event.target.dataset.id);
                }
                // Remove reason (in modal)
                if (event.target.classList.contains('remove-reason-btn')) {
                    const reasonItem = event.target.closest('.reason-item');
                    if (reasonItem && confirm(`Remove reason "${reasonItem.firstChild.textContent}"?`)) {
                        handleRemoveReason(reasonItem.firstChild.textContent);
                    }
                }
                // Reorder summary sections
                if (event.target.classList.contains('arrow-up') || event.target.classList.contains('arrow-down')) {
                    handleReorder(event);
                }
                // Apply history item
                if (event.target.classList.contains('apply-today-btn')) {
                    handleApplyHistory(event);
                }
                // Refresh history button
                if (event.target.id === 'refresh-history-btn') {
                    console.log("Manually refreshing history display");
                    populateHistory();
                }
            });

            // Delegated change listeners for selects/inputs in side lists
            document.body.addEventListener('change', (event) => {
                const target = event.target;
                const employeeItem = target.closest('.employee-item');
                if (!employeeItem) return;

                const employeeId = employeeItem.id;

                // Handle Absence Checkbox Check
                if (target.classList.contains('absence-checkbox')) {
                    handleAbsenceCheckboxCheck(target, employeeId);
                }                // Handle Reason Select Change (Absent or Added)
                else if (target.classList.contains('reason-select')) {
                    if (employeeItem.classList.contains('absent')) {
                        handleReasonChange(event, employeeId);
                    } else if (employeeItem.classList.contains('added-schedule')) {
                        handleAddedReasonChange(event, employeeId);
                    }
                } 
                // Handle Tour Select Change (Added only)
                else if (target.classList.contains('tour-select')) {
                    if (employeeItem.classList.contains('added-schedule')) {
                        handleAddedTourChange(event, employeeId);
                    }
                }
                // Handle Shield Input Change (Added only)
                else if (target.classList.contains('shield-input')) {
                     if (employeeItem.classList.contains('added-schedule')) {
                        handleAddedShieldChange(event, employeeId);
                    }
                }
            });
            
            // Dark Mode Toggle Listener
            const darkModeSwitch = document.getElementById('dark-mode-switch');
            if (darkModeSwitch) {
                darkModeSwitch.addEventListener('change', (event) => {
                    const theme = event.target.checked ? 'dark' : 'light';
                    applyTheme(theme);
                    localStorage.setItem(LS_KEYS.THEME, theme); // Save preference
                });
            }
        });
        
    </script>
</body>
</html>